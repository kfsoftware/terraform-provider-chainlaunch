basePath: /api/v1
definitions:
  ai.ChatMessage:
    properties:
      content:
        type: string
      parts:
        items:
          $ref: '#/definitions/ai.ChatMessagePart'
        type: array
      role:
        type: string
    type: object
  ai.ChatMessagePart:
    properties:
      text:
        type: string
      type:
        type: string
    type: object
  ai.ChatRequest:
    properties:
      conversationId:
        type: integer
      id:
        type: string
      messages:
        items:
          $ref: '#/definitions/ai.ChatMessage'
        type: array
      projectId:
        type: string
    type: object
  ai.ConversationDetail:
    properties:
      id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/ai.Message'
        type: array
      projectId:
        type: integer
      startedAt:
        type: string
    type: object
  ai.ConversationResponse:
    properties:
      id:
        type: integer
      projectId:
        type: integer
      startedAt:
        type: string
    type: object
  ai.CreateConversationRequest:
    properties:
      title:
        type: string
    type: object
  ai.Message:
    properties:
      content:
        type: string
      conversationId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      sender:
        type: string
      toolArguments:
        type: string
      toolCalls:
        items:
          $ref: '#/definitions/ai.ToolCallAI'
        type: array
    type: object
  ai.Model:
    properties:
      description:
        type: string
      maxTokens:
        type: integer
      name:
        type: string
    type: object
  ai.ToolCallAI:
    properties:
      arguments:
        type: string
      createdAt:
        type: string
      error:
        type: string
      id:
        type: integer
      messageId:
        type: integer
      result:
        type: string
      toolName:
        type: string
    type: object
  audit.Event:
    properties:
      affectedResource:
        type: string
      details:
        additionalProperties: true
        type: object
      eventOutcome:
        $ref: '#/definitions/audit.EventOutcome'
      eventSource:
        type: string
      eventType:
        type: string
      id:
        type: integer
      requestId:
        type: string
      sessionId:
        type: string
      severity:
        $ref: '#/definitions/audit.Severity'
      sourceIp:
        type: string
      timestamp:
        type: string
      userIdentity:
        type: integer
    type: object
  audit.EventOutcome:
    enum:
    - SUCCESS
    - FAILURE
    - PENDING
    type: string
    x-enum-varnames:
    - EventOutcomeSuccess
    - EventOutcomeFailure
    - EventOutcomePending
  audit.ListLogsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/audit.Event'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  audit.Severity:
    enum:
    - DEBUG
    - INFO
    - WARNING
    - CRITICAL
    type: string
    x-enum-varnames:
    - SeverityDebug
    - SeverityInfo
    - SeverityWarning
    - SeverityCritical
  auth.APIKey:
    properties:
      created_at:
        type: string
      description:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      key_prefix:
        description: Prefix for display (e.g., "clpro_abcd")
        type: string
      last_used_at:
        type: string
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/auth.Permission'
        type: array
      role:
        $ref: '#/definitions/auth.Role'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  auth.APIKeyLogEntry:
    properties:
      action:
        type: string
      api_key_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      metadata:
        type: string
      user_agent:
        type: string
    type: object
  auth.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  auth.CreateAPIKeyRequest:
    properties:
      description:
        example: Key for CI/CD pipeline
        type: string
      expires_in:
        description: 'Duration string: 30d, 1y, etc.'
        example: 30d
        type: string
      name:
        example: My API Key
        type: string
      permissions:
        example:
        - NETWORK_READ
        - NODE_READ
        items:
          $ref: '#/definitions/auth.Permission'
        type: array
      role:
        allOf:
        - $ref: '#/definitions/auth.Role'
        example: OPERATOR
    required:
    - name
    - role
    type: object
  auth.CreateAPIKeyResponse:
    properties:
      api_key:
        $ref: '#/definitions/auth.APIKey'
      key:
        description: Only returned once during creation
        type: string
    type: object
  auth.CreateUserRequest:
    properties:
      password:
        minLength: 8
        type: string
      role:
        $ref: '#/definitions/auth.Role'
      username:
        type: string
    required:
    - password
    - role
    - username
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      message:
        type: string
    type: object
  auth.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  auth.Permission:
    enum:
    - NETWORK_CREATE
    - NETWORK_READ
    - NETWORK_UPDATE
    - NETWORK_DELETE
    - NODE_CREATE
    - NODE_READ
    - NODE_UPDATE
    - NODE_DELETE
    - NODE_EXECUTE
    - KEY_CREATE
    - KEY_READ
    - KEY_UPDATE
    - KEY_DELETE
    - KEY_SIGN
    - PROVIDER_CREATE
    - PROVIDER_READ
    - PROVIDER_UPDATE
    - PROVIDER_DELETE
    - ORGANIZATION_CREATE
    - ORGANIZATION_READ
    - ORGANIZATION_UPDATE
    - ORGANIZATION_DELETE
    - CHAINCODE_CREATE
    - CHAINCODE_READ
    - CHAINCODE_UPDATE
    - CHAINCODE_DELETE
    - CHAINCODE_EXECUTE
    - PROPOSAL_CREATE
    - PROPOSAL_READ
    - PROPOSAL_SIGN
    - PROPOSAL_SUBMIT
    - USER_CREATE
    - USER_READ
    - USER_UPDATE
    - USER_DELETE
    - API_KEY_CREATE
    - API_KEY_READ
    - API_KEY_REVOKE
    - SYSTEM_CONFIG
    - SYSTEM_BACKUP
    - SYSTEM_BACKUP_CREATE
    - SYSTEM_BACKUP_UPDATE
    - SYSTEM_BACKUP_DELETE
    - SYSTEM_RESTORE
    - SYSTEM_MONITOR
    - METRICS_DEPLOY
    - METRICS_MANAGE
    - METRICS_JOB_EDIT
    - MCP_TOOL_EXECUTE
    - MCP_PROMPT_EXECUTE
    - MCP_RESOURCE_READ
    - MCP_STREAM_ACCESS
    type: string
    x-enum-comments:
      PermissionMCPPromptExecute: Execute MCP prompts
      PermissionMCPResourceRead: Read MCP resources
      PermissionMCPStreamAccess: Access MCP stream endpoints
      PermissionMCPToolExecute: Execute MCP tools
      PermissionMetricsDeploy: Deploy/undeploy Prometheus
      PermissionMetricsJobEdit: Add/remove Prometheus jobs
      PermissionMetricsManage: Start/stop/reload/refresh Prometheus
      PermissionNodeExecute: Execute commands on nodes
    x-enum-descriptions:
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - Execute commands on nodes
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - Deploy/undeploy Prometheus
    - Start/stop/reload/refresh Prometheus
    - Add/remove Prometheus jobs
    - Execute MCP tools
    - Execute MCP prompts
    - Read MCP resources
    - Access MCP stream endpoints
    x-enum-varnames:
    - PermissionNetworkCreate
    - PermissionNetworkRead
    - PermissionNetworkUpdate
    - PermissionNetworkDelete
    - PermissionNodeCreate
    - PermissionNodeRead
    - PermissionNodeUpdate
    - PermissionNodeDelete
    - PermissionNodeExecute
    - PermissionKeyCreate
    - PermissionKeyRead
    - PermissionKeyUpdate
    - PermissionKeyDelete
    - PermissionKeySign
    - PermissionProviderCreate
    - PermissionProviderRead
    - PermissionProviderUpdate
    - PermissionProviderDelete
    - PermissionOrganizationCreate
    - PermissionOrganizationRead
    - PermissionOrganizationUpdate
    - PermissionOrganizationDelete
    - PermissionChaincodeCreate
    - PermissionChaincodeRead
    - PermissionChaincodeUpdate
    - PermissionChaincodeDelete
    - PermissionChaincodeExecute
    - PermissionProposalCreate
    - PermissionProposalRead
    - PermissionProposalSign
    - PermissionProposalSubmit
    - PermissionUserCreate
    - PermissionUserRead
    - PermissionUserUpdate
    - PermissionUserDelete
    - PermissionAPIKeyCreate
    - PermissionAPIKeyRead
    - PermissionAPIKeyRevoke
    - PermissionSystemConfig
    - PermissionSystemBackup
    - PermissionSystemBackupCreate
    - PermissionSystemBackupUpdate
    - PermissionSystemBackupDelete
    - PermissionSystemRestore
    - PermissionSystemMonitor
    - PermissionMetricsDeploy
    - PermissionMetricsManage
    - PermissionMetricsJobEdit
    - PermissionMCPToolExecute
    - PermissionMCPPromptExecute
    - PermissionMCPResourceRead
    - PermissionMCPStreamAccess
  auth.PermissionInfo:
    properties:
      category:
        example: Network
        type: string
      code:
        example: NETWORK_CREATE
        type: string
      description:
        example: Allows creating new blockchain networks
        type: string
      name:
        example: Create Network
        type: string
    type: object
  auth.PermissionsResponse:
    properties:
      permissions:
        items:
          $ref: '#/definitions/auth.PermissionInfo'
        type: array
      roles:
        items:
          $ref: '#/definitions/auth.RolePermissionsInfo'
        type: array
    type: object
  auth.Role:
    enum:
    - ADMIN
    - OPERATOR
    - VIEWER
    - CUSTOM
    - MCP
    type: string
    x-enum-comments:
      RoleAdmin: Full system access
      RoleCustom: Custom permissions set
      RoleMCP: Model Context Protocol access for AI agents
      RoleOperator: Can manage networks and nodes (was manager)
      RoleViewer: Read-only access
    x-enum-descriptions:
    - Full system access
    - Can manage networks and nodes (was manager)
    - Read-only access
    - Custom permissions set
    - Model Context Protocol access for AI agents
    x-enum-varnames:
    - RoleAdmin
    - RoleOperator
    - RoleViewer
    - RoleCustom
    - RoleMCP
  auth.RolePermissionsInfo:
    properties:
      description:
        example: Full system access
        type: string
      name:
        example: Administrator
        type: string
      permissions:
        items:
          $ref: '#/definitions/auth.PermissionInfo'
        type: array
      role:
        allOf:
        - $ref: '#/definitions/auth.Role'
        example: ADMIN
    type: object
  auth.UpdateUserRequest:
    properties:
      role:
        $ref: '#/definitions/auth.Role'
      username:
        type: string
    type: object
  auth.UserResponse:
    properties:
      created_at:
        type: string
      demo_mode:
        type: boolean
      id:
        type: integer
      last_login_at:
        type: string
      role:
        $ref: '#/definitions/auth.Role'
      username:
        type: string
    type: object
  block.Block:
    properties:
      createdAt:
        type: string
      dataHash:
        type: string
      number:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/block.Transaction'
        type: array
    type: object
  block.Transaction:
    properties:
      chaincodeId:
        type: string
      channelId:
        type: string
      createdAt:
        type: string
      event:
        $ref: '#/definitions/block.TransactionEvent'
      id:
        type: string
      path:
        type: string
      reads:
        items:
          $ref: '#/definitions/block.TransactionRead'
        type: array
      request:
        items:
          type: integer
        type: array
      response:
        items:
          type: integer
        type: array
      type:
        $ref: '#/definitions/block.TxType'
      version:
        type: string
      writes:
        items:
          $ref: '#/definitions/block.TransactionWrite'
        type: array
    type: object
  block.TransactionEvent:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  block.TransactionRead:
    properties:
      blockNumVersion:
        type: integer
      chaincodeId:
        type: string
      key:
        type: string
      txNumVersion:
        type: integer
    type: object
  block.TransactionWrite:
    properties:
      chaincodeId:
        type: string
      deleted:
        type: boolean
      key:
        type: string
      value:
        type: string
    type: object
  block.TxType:
    enum:
    - MESSAGE
    - CONFIG
    - CONFIG_UPDATE
    - ENDORSER_TRANSACTION
    - ORDERER_TRANSACTION
    - DELIVER_SEEK_INFO
    - CHAINCODE_PACKAGE
    type: string
    x-enum-varnames:
    - MESSAGE
    - CONFIG
    - CONFIG_UPDATE
    - ENDORSER_TRANSACTION
    - ORDERER_TRANSACTION
    - DELIVER_SEEK_INFO
    - CHAINCODE_PACKAGE
  boilerplates.BoilerplateConfig:
    properties:
      args:
        items:
          type: string
        type: array
      command:
        type: string
      description:
        type: string
      id:
        description: ID is the key in the configs map
        type: string
      image:
        type: string
      name:
        type: string
      platform:
        type: string
      repoName:
        type: string
      repoOwner:
        type: string
      repoPath:
        type: string
      systemPrompt:
        type: string
      validateCommand:
        type: string
    type: object
  chaincode.Gateway:
    type: object
  chaincode.Peer:
    type: object
  chainlaunchdeploy.ApproveChaincodeByDefinitionRequest:
    properties:
      peer_id:
        description: |-
          Peer ID to use for approval
          required: true
        type: integer
    type: object
  chainlaunchdeploy.BesuDeployRequest:
    properties:
      abi:
        description: Contract ABI (JSON string)
        type: string
      bytecode:
        description: Compiled contract bytecode
        items:
          format: int32
          type: integer
        type: array
      chainID:
        description: Chain ID for the target network
        format: int64
        type: integer
      constructorArgs:
        description: Constructor arguments for the contract
        items: {}
        type: array
      rpcurl:
        description: RPC endpoint for Besu node
        type: string
      solidityCode:
        description: (Optional) Solidity source code (for reference)
        type: string
    type: object
  chainlaunchdeploy.BesuDeployResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/chainlaunchdeploy.DeploymentResult'
      status:
        type: string
    type: object
  chainlaunchdeploy.ChaincodeDefinitionDetailResponse:
    properties:
      definition:
        $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse'
      events:
        items:
          $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionEvent'
        type: array
    type: object
  chainlaunchdeploy.ChaincodeDefinitionEvent:
    properties:
      created_at:
        type: string
      definition_id:
        type: integer
      event_data: {}
      event_type:
        type: string
      id:
        type: integer
    type: object
  chainlaunchdeploy.ChaincodeDefinitionResponse:
    properties:
      chaincode_address:
        type: string
      chaincode_id:
        type: integer
      created_at:
        type: string
      docker_image:
        type: string
      endorsement_policy:
        type: string
      id:
        type: integer
      sequence:
        type: integer
      version:
        type: string
    type: object
  chainlaunchdeploy.ChaincodeInvokeRequest:
    properties:
      args:
        description: Arguments to pass to the chaincode function
        items:
          type: string
        type: array
      channel:
        description: 'Optional: Channel name'
        type: string
      function:
        description: Function name to invoke
        type: string
      key_id:
        description: KeyID to use for signing
        type: string
      transient:
        additionalProperties:
          items:
            format: int32
            type: integer
          type: array
        description: 'Optional: Transient data'
        type: object
    type: object
  chainlaunchdeploy.ChaincodeInvokeResponse:
    properties:
      message:
        type: string
      result: {}
      status:
        type: string
    type: object
  chainlaunchdeploy.ChaincodeMetadataResponse:
    properties:
      message:
        type: string
      result: {}
      status:
        type: string
    type: object
  chainlaunchdeploy.ChaincodeQueryRequest:
    properties:
      args:
        description: Arguments to pass to the chaincode function
        items:
          type: string
        type: array
      channel:
        description: 'Optional: Channel name'
        type: string
      function:
        description: Function name to query
        type: string
      key_id:
        description: KeyID to use for signing/query
        type: string
      transient:
        additionalProperties:
          items:
            format: int32
            type: integer
          type: array
        description: 'Optional: Transient data'
        type: object
    type: object
  chainlaunchdeploy.ChaincodeQueryResponse:
    properties:
      message:
        type: string
      result: {}
      status:
        type: string
    type: object
  chainlaunchdeploy.ChaincodeResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      network_id:
        type: integer
      network_name:
        type: string
      network_platform:
        type: string
    type: object
  chainlaunchdeploy.CommitChaincodeByDefinitionRequest:
    properties:
      peer_id:
        description: |-
          Peer ID to use for commit
          required: true
        type: integer
    type: object
  chainlaunchdeploy.CreateChaincodeDefinitionRequest:
    properties:
      chaincode_address:
        description: Chaincode address
        type: string
      chaincode_id:
        description: |-
          Chaincode ID
          required: true
        type: integer
      docker_image:
        description: |-
          Docker image
          required: true
        type: string
      endorsement_policy:
        description: Endorsement policy
        type: string
      sequence:
        description: |-
          Sequence
          required: true
        type: integer
      version:
        description: |-
          Version
          required: true
        type: string
    type: object
  chainlaunchdeploy.CreateChaincodeDefinitionResponse:
    properties:
      definition:
        $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse'
    type: object
  chainlaunchdeploy.CreateChaincodeRequest:
    properties:
      name:
        description: |-
          Name of the chaincode
          required: true
        type: string
      network_id:
        description: |-
          Network ID
          required: true
        type: integer
    type: object
  chainlaunchdeploy.CreateChaincodeResponse:
    properties:
      chaincode:
        $ref: '#/definitions/chainlaunchdeploy.ChaincodeResponse'
    type: object
  chainlaunchdeploy.DeployChaincodeByDefinitionRequest:
    properties:
      environment_variables:
        additionalProperties:
          type: string
        description: Environment variables for the chaincode container
        type: object
    type: object
  chainlaunchdeploy.DeploymentResult:
    properties:
      chaincodeID:
        description: For Fabric
        type: string
      contractAddress:
        description: For EVM
        type: string
      error: {}
      logs:
        type: string
      success:
        type: boolean
      transactionHash:
        description: For EVM
        type: string
    type: object
  chainlaunchdeploy.DockerContainerInfo:
    properties:
      created:
        type: integer
      docker_status:
        description: direct from Docker inspect
        type: string
      id:
        type: string
      image:
        type: string
      name:
        type: string
      ports:
        items:
          type: string
        type: array
      state:
        type: string
      status:
        type: string
    type: object
  chainlaunchdeploy.FabricApproveRequest:
    properties:
      channelID:
        type: string
      endorsementPolicy:
        type: string
      initRequired:
        type: boolean
      name:
        type: string
      packageID:
        type: string
      sequence:
        format: int64
        type: integer
      version:
        type: string
    type: object
  chainlaunchdeploy.FabricApproveResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/chainlaunchdeploy.DeploymentResult'
      status:
        type: string
    type: object
  chainlaunchdeploy.FabricChaincodeApproveParams:
    properties:
      channelID:
        type: string
      collectionsConfig:
        description: Serialized CollectionConfigPackage
        items:
          format: int32
          type: integer
        type: array
      endorsementPolicy:
        type: string
      gateway:
        $ref: '#/definitions/chaincode.Gateway'
      initRequired:
        type: boolean
      name:
        type: string
      packageID:
        type: string
      sequence:
        format: int64
        type: integer
      version:
        type: string
    type: object
  chainlaunchdeploy.FabricChaincodeCommitParams:
    properties:
      channelID:
        type: string
      collectionsConfig:
        description: Serialized CollectionConfigPackage
        items:
          format: int32
          type: integer
        type: array
      endorsementPolicy:
        type: string
      gateway:
        $ref: '#/definitions/chaincode.Gateway'
      initRequired:
        type: boolean
      name:
        type: string
      sequence:
        format: int64
        type: integer
      version:
        type: string
    type: object
  chainlaunchdeploy.FabricChaincodeInstallParams:
    properties:
      label:
        description: Chaincode label
        type: string
      packageBytes:
        description: Chaincode package bytes
        items:
          format: int32
          type: integer
        type: array
      peer:
        $ref: '#/definitions/chaincode.Peer'
    type: object
  chainlaunchdeploy.FabricCommitRequest:
    properties:
      channelID:
        type: string
      endorsementPolicy:
        type: string
      initRequired:
        type: boolean
      name:
        type: string
      sequence:
        format: int64
        type: integer
      version:
        type: string
    type: object
  chainlaunchdeploy.FabricCommitResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/chainlaunchdeploy.DeploymentResult'
      status:
        type: string
    type: object
  chainlaunchdeploy.FabricDeployRequest:
    properties:
      approveParams:
        $ref: '#/definitions/chainlaunchdeploy.FabricChaincodeApproveParams'
      commitParams:
        $ref: '#/definitions/chainlaunchdeploy.FabricChaincodeCommitParams'
      installParams:
        $ref: '#/definitions/chainlaunchdeploy.FabricChaincodeInstallParams'
    type: object
  chainlaunchdeploy.FabricDeployResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/chainlaunchdeploy.DeploymentResult'
      status:
        type: string
    type: object
  chainlaunchdeploy.FabricInstallRequest:
    properties:
      label:
        type: string
      package_bytes:
        items:
          type: integer
        type: array
    required:
    - label
    - package_bytes
    type: object
  chainlaunchdeploy.FabricInstallResponse:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/chainlaunchdeploy.DeploymentResult'
      status:
        type: string
    type: object
  chainlaunchdeploy.FabricSequenceResponse:
    properties:
      chaincode_name:
        type: string
      channel_name:
        type: string
      message:
        type: string
      sequence:
        type: integer
      status:
        type: string
    type: object
  chainlaunchdeploy.InstallChaincodeByDefinitionRequest:
    properties:
      peer_ids:
        description: |-
          Peer IDs to install the chaincode on
          required: true
        items:
          type: integer
        type: array
    type: object
  chainlaunchdeploy.ListChaincodeDefinitionsResponse:
    properties:
      definitions:
        items:
          $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse'
        type: array
    type: object
  chainlaunchdeploy.ListChaincodesResponse:
    properties:
      chaincodes:
        items:
          $ref: '#/definitions/chainlaunchdeploy.ChaincodeResponse'
        type: array
    type: object
  chainlaunchdeploy.UpdateChaincodeDefinitionRequest:
    properties:
      chaincode_address:
        description: Chaincode address
        type: string
      docker_image:
        description: |-
          Docker image
          required: true
        type: string
      endorsement_policy:
        description: Endorsement policy
        type: string
      sequence:
        description: |-
          Sequence
          required: true
        type: integer
      version:
        description: |-
          Version
          required: true
        type: string
    type: object
  common.DeploymentMode:
    enum:
    - docker
    - service
    type: string
    x-enum-varnames:
    - DeploymentModeDocker
    - DeploymentModeService
  common.NetworkMode:
    enum:
    - bridge
    - host
    type: string
    x-enum-varnames:
    - NetworkModeBridge
    - NetworkModeHost
  common.QueryResult:
    properties:
      data:
        description: Data contains the query results
      error:
        description: Error contains any error message
        type: string
      status:
        description: Status is the query status
        type: string
    type: object
  communication.ConnectedPeer:
    description: Connected peer node information
    properties:
      analytics_enabled:
        type: boolean
      id:
        type: integer
      metrics_federation:
        type: boolean
      node_id:
        type: string
      peer_endpoint:
        type: string
      peer_public_key:
        type: string
      status:
        type: string
    type: object
  communication.ConnectedPeersResponse:
    description: List of connected peer node IDs
    properties:
      connected_peers:
        items:
          $ref: '#/definitions/communication.ConnectedPeer'
        type: array
    type: object
  communication.ErrorResponse:
    description: Standard error response
    properties:
      message:
        type: string
    type: object
  communication.ExternalNodesAuthRequest:
    description: Request to get all external node info, signed by the requesting node
    properties:
      node_id:
        type: string
      nonce:
        type: string
      signature:
        type: string
      timestamp:
        type: integer
    type: object
  communication.ExternalNodesResponse:
    description: Response containing all external node info
    properties:
      besu_nodes:
        items:
          $ref: '#/definitions/service.ExternalBesuNodeDTO'
        type: array
      fabric_orderers:
        items:
          $ref: '#/definitions/service.ExternalFabricOrdererDTO'
        type: array
      fabric_peers:
        items:
          $ref: '#/definitions/service.ExternalFabricPeerDTO'
        type: array
      organizations:
        items:
          $ref: '#/definitions/service.ExternalOrganizationDTO'
        type: array
    type: object
  communication.Message:
    properties:
      id:
        type: string
      nonce:
        type: string
      payload:
        items:
          type: integer
        type: array
      sender_id:
        type: string
      subType:
        $ref: '#/definitions/communication.MessageSubType'
      timestamp:
        type: integer
      type:
        $ref: '#/definitions/communication.MessageType'
    type: object
  communication.MessageSubType:
    enum:
    - ShareNetwork
    - ShareBesuNetwork
    - ShareConfigUpdate
    - ShareChaincodeDefinition
    - ShareSignature
    - ShareKey
    type: string
    x-enum-varnames:
    - MessageSubTypeShareNetwork
    - MessageSubTypeShareBesuNetwork
    - MessageSubTypeShareConfigUpdate
    - MessageSubTypeShareChaincodeDefinition
    - MessageSubTypeShareSignature
    - MessageSubTypeShareKey
  communication.MessageType:
    enum:
    - PING
    - STATUS_UPDATE
    - DATA_EXCHANGE
    type: string
    x-enum-varnames:
    - MessageTypePing
    - MessageTypeStatusUpdate
    - MessageTypeDataExchange
  communication.MetricsEnabledResponse:
    properties:
      metrics_enabled:
        type: boolean
    type: object
  communication.MetricsFederationRequest:
    properties:
      metrics_federation:
        type: boolean
      peer_node_id:
        type: string
    required:
    - peer_node_id
    type: object
  communication.NodeAcceptInvitationRequest:
    properties:
      invitation_jwt:
        type: string
    type: object
  communication.NodeAcceptInvitationResponse:
    properties:
      error:
        type: string
      message:
        description: Optional message with sync details
        type: string
      success:
        type: boolean
    type: object
  communication.NodeInvitationRequest:
    properties:
      bidirectional:
        description: If true, request bidirectional handshake
        type: boolean
      options:
        additionalProperties: true
        type: object
    type: object
  communication.NodeInvitationResponse:
    properties:
      invitation_jwt:
        type: string
    type: object
  communication.ReceiveChaincodeShareRequest:
    description: Request to receive a shared chaincode definition
    properties:
      chaincodeId:
        type: string
      dockerImage:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      senderId:
        type: string
      sequence:
        type: integer
      shareId:
        type: string
      version:
        type: string
    type: object
  communication.ReceiveConfigUpdateShareRequest:
    description: Request to receive a shared config update proposal
    properties:
      channelName:
        type: string
      configUpdate:
        items:
          type: integer
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      proposalId:
        type: string
      senderId:
        type: string
      shareId:
        type: string
    type: object
  communication.ReceiveKeyShareRequest:
    properties:
      algorithm:
        type: string
      curve:
        type: string
      format:
        type: string
      keySize:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      publicKey:
        type: string
      senderId:
        type: string
      shareId:
        type: string
      status:
        type: string
    type: object
  communication.ReceiveNetworkShareRequest:
    description: Request to receive a shared network
    properties:
      genesisBlock:
        items:
          type: integer
        type: array
      name:
        type: string
      networkId:
        type: integer
      peerNodeId:
        type: string
      platform:
        type: string
    type: object
  communication.RegisterPeerRequest:
    properties:
      analytics_enabled:
        type: boolean
      node_id:
        type: string
      node_name:
        type: string
      node_type:
        type: string
      peer_endpoint:
        type: string
      peer_public_key:
        type: string
    type: object
  communication.RemoveConnectedPeerResponse:
    properties:
      message:
        type: string
    type: object
  communication.SyncExternalNodesRequest:
    properties:
      peer_node_id:
        type: string
    type: object
  communication.SyncExternalNodesResponse:
    properties:
      besu_nodes_added:
        type: integer
      besu_nodes_deleted:
        type: integer
      errors:
        items:
          type: string
        type: array
      fabric_orderers_added:
        type: integer
      fabric_orderers_deleted:
        type: integer
      fabric_peers_added:
        type: integer
      fabric_peers_deleted:
        type: integer
      organizations_added:
        type: integer
    type: object
  dirs.CreateDirRequest:
    properties:
      dir:
        example: newdir
        type: string
      project:
        example: myproject
        type: string
    type: object
  dirs.CreateDirResponse:
    properties:
      status:
        example: created
        type: string
    type: object
  dirs.DeleteDirResponse:
    properties:
      status:
        example: deleted
        type: string
    type: object
  dirs.ListEntriesResponse:
    description: Unified response for listing files and directories in a directory
    properties:
      directories:
        example:
        - '["src"'
        - '"docs"]'
        items:
          type: string
        type: array
      files:
        example:
        - '["main.go"'
        - '"README.md"]'
        items:
          type: string
        type: array
      skipped:
        example:
        - '["node_modules"]'
        items:
          type: string
        type: array
    type: object
  fabric.ConfigUpdateOperation:
    properties:
      payload:
        items:
          type: integer
        type: array
      type:
        $ref: '#/definitions/fabric.ConfigUpdateOperationType'
    type: object
  fabric.ConfigUpdateOperationType:
    enum:
    - add_org
    - remove_org
    - update_org_msp
    - set_anchor_peers
    - update_etcd_raft_options
    - update_application_policy
    - update_orderer_policy
    - update_channel_policy
    - add_consenter
    - remove_consenter
    - update_consenter
    - update_batch_size
    - update_batch_timeout
    - add_bft_consenter
    - remove_bft_consenter
    - update_bft_consenter
    - update_bft_options
    - update_channel_capability
    - update_orderer_capability
    - update_application_capability
    - add_orderer_org
    - remove_orderer_org
    - update_orderer_org_msp
    - update_application_acl
    type: string
    x-enum-varnames:
    - OpAddOrg
    - OpRemoveOrg
    - OpUpdateOrgMSP
    - OpSetAnchorPeers
    - OpUpdateEtcdRaftOptions
    - OpUpdateAppPolicy
    - OpUpdateOrdererPolicy
    - OpUpdateChannelPolicy
    - OpAddConsenter
    - OpRemoveConsenter
    - OpUpdateConsenter
    - OpUpdateBatchSize
    - OpUpdateBatchTimeout
    - OpAddBFTConsenter
    - OpRemoveBFTConsenter
    - OpUpdateBFTConsenter
    - OpUpdateBFTOptions
    - OpUpdateChannelCapability
    - OpUpdateOrdererCapability
    - OpUpdateApplicationCapability
    - ConfigUpdateOperationTypeAddOrdererOrg
    - ConfigUpdateOperationTypeRemoveOrdererOrg
    - ConfigUpdateOperationTypeUpdateOrdererOrgMSP
    - OpUpdateApplicationACL
  files.DeleteFileResponse:
    properties:
      status:
        example: deleted
        type: string
    type: object
  files.DirectoryTreeNode:
    properties:
      children:
        items:
          $ref: '#/definitions/files.DirectoryTreeNode'
        type: array
      isDir:
        type: boolean
      name:
        type: string
      path:
        type: string
    type: object
  files.ListFilesResponse:
    properties:
      files:
        example:
        - '["main.go"'
        - '"README.md"]'
        items:
          type: string
        type: array
    type: object
  files.ReadFileResponse:
    properties:
      content:
        example: file contents
        type: string
    type: object
  files.WriteFileRequest:
    properties:
      content:
        example: new file contents
        type: string
      path:
        example: main.go
        type: string
      project:
        example: myproject
        type: string
    type: object
  files.WriteFileResponse:
    properties:
      status:
        example: written
        type: string
    type: object
  github_com_chainlaunch_chainlaunch_pkg_metrics_common.Status:
    properties:
      deployment_mode:
        allOf:
        - $ref: '#/definitions/common.DeploymentMode'
        description: DeploymentMode is the current deployment mode
      error:
        description: Error contains any error message
        type: string
      network_mode:
        allOf:
        - $ref: '#/definitions/common.NetworkMode'
        description: NetworkMode is the Docker network mode (only for Docker deployments)
      port:
        description: Port is the port Prometheus is listening on
        type: integer
      scrape_interval:
        allOf:
        - $ref: '#/definitions/time.Duration'
        description: ScrapeInterval is the current scrape interval
      started_at:
        description: StartedAt is when the instance was started
        type: string
      status:
        description: Status is the current status (running, stopped, etc.)
        type: string
      version:
        description: Version is the Prometheus version
        type: string
    type: object
  github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  github_com_chainlaunch_chainlaunch_pkg_plugin_types.Parameters:
    properties:
      $schema:
        type: string
      properties:
        additionalProperties:
          $ref: '#/definitions/types.ParameterSpec'
        type: object
      required:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin:
    properties:
      apiVersion:
        type: string
      deploymentStatus:
        $ref: '#/definitions/types.DeploymentStatus'
      kind:
        type: string
      metadata:
        $ref: '#/definitions/types.Metadata'
      spec:
        $ref: '#/definitions/types.Spec'
    type: object
  github_com_chainlaunch_chainlaunch_pkg_plugin_types.Port:
    properties:
      containerPort:
        type: string
      hostPort:
        type: string
      protocol:
        type: string
    type: object
  handler.AWSKMSConfigHandler:
    properties:
      assumeRoleArn:
        example: arn:aws:iam::123456789012:role/KMSRole
        type: string
      awsAccessKeyId:
        example: AKIAIOSFODNN7EXAMPLE
        type: string
      awsRegion:
        example: us-east-1
        type: string
      awsSecretAccessKey:
        example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
        type: string
      awsSessionToken:
        type: string
      endpointUrl:
        example: http://localhost:4566
        type: string
      externalId:
        example: unique-external-id
        type: string
      kmsKeyAliasPrefix:
        example: chainlaunch/
        type: string
      operation:
        example: IMPORT
        type: string
    required:
    - awsRegion
    - operation
    type: object
  handler.AWSKMSImportData:
    properties:
      signCaCert:
        description: 'Required: CA certificates (stored in ChainLaunch, keys tracked
          in KMS)'
        type: string
      signCaKeyId:
        description: 'Required: KMS key IDs/ARNs for the CA keys'
        type: string
      tlsCaCert:
        description: PEM-encoded TLS CA certificate
        type: string
      tlsCaKeyId:
        description: AWS KMS key ID or ARN for TLS CA
        type: string
    required:
    - signCaCert
    - signCaKeyId
    - tlsCaCert
    - tlsCaKeyId
    type: object
  handler.AWSKMSStatusResponse:
    properties:
      access_key_id:
        example: AKIA****************
        type: string
      account_id:
        example: "123456789012"
        type: string
      connection_error:
        example: ""
        type: string
      endpoint:
        description: Custom endpoint (LocalStack)
        example: http://localhost:4566
        type: string
      has_credentials:
        example: true
        type: boolean
      key_count:
        example: 5
        type: integer
      kms_reachable:
        example: true
        type: boolean
      kms_status:
        description: '"available", "unavailable", "error"'
        example: available
        type: string
      provider_id:
        example: 1
        type: integer
      provider_name:
        example: my-kms-provider
        type: string
      region:
        example: us-east-1
        type: string
      sdk_version:
        example: aws-sdk-go-v2
        type: string
      service_available:
        example: true
        type: boolean
    type: object
  handler.CertificateHandlerRequest:
    properties:
      commonName:
        example: example.com
        type: string
      country:
        example:
        - US
        items:
          type: string
        type: array
      dnsNames:
        example:
        - www.example.com
        items:
          type: string
        type: array
      emailAddresses:
        example:
        - admin@example.com
        items:
          type: string
        type: array
      isCA:
        example: false
        type: boolean
      locality:
        example:
        - San Francisco
        items:
          type: string
        type: array
      organization:
        example:
        - Example Corp
        items:
          type: string
        type: array
      organizationalUnit:
        example:
        - Engineering
        items:
          type: string
        type: array
      postalCode:
        example:
        - "94105"
        items:
          type: string
        type: array
      province:
        example:
        - California
        items:
          type: string
        type: array
      streetAddress:
        example:
        - 123 Main St
        items:
          type: string
        type: array
      validFor:
        example: 8760h
        type: string
    required:
    - commonName
    - validFor
    type: object
  handler.CertificateSigningRequest:
    properties:
      commonName:
        example: example.com
        type: string
      country:
        example:
        - US
        items:
          type: string
        type: array
      dnsNames:
        example:
        - www.example.com
        items:
          type: string
        type: array
      emailAddresses:
        example:
        - admin@example.com
        items:
          type: string
        type: array
      locality:
        example:
        - San Francisco
        items:
          type: string
        type: array
      organization:
        example:
        - Example Corp
        items:
          type: string
        type: array
      organizationalUnit:
        example:
        - Engineering
        items:
          type: string
        type: array
      postalCode:
        example:
        - "94105"
        items:
          type: string
        type: array
      province:
        example:
        - California
        items:
          type: string
        type: array
      streetAddress:
        example:
        - 123 Main St
        items:
          type: string
        type: array
      validFor:
        example: 8760h
        type: string
    required:
    - commonName
    - validFor
    type: object
  handler.CreateIdentityRequest:
    properties:
      certValidFor:
        description: |-
          Optional: Certificate validity (Go duration format, e.g., "8760h" for 1 year)
          If not provided, defaults to 1 year
        type: string
      description:
        description: 'Optional: Description for the identity'
        type: string
      name:
        description: 'Optional: Custom name for the identity (defaults to type-based
          name)'
        type: string
      type:
        description: 'Type of identity to create: "admin", "client", or "peer"'
        enum:
        - admin
        - client
        - peer
        type: string
    required:
    - type
    type: object
  handler.CreateKeyHandlerRequest:
    properties:
      algorithm:
        example: RSA
        type: string
      certificate:
        $ref: '#/definitions/handler.CertificateHandlerRequest'
      curve:
        example: P-256
        type: string
      description:
        example: Key for signing certificates
        type: string
      isCA:
        example: 0
        type: integer
      keySize:
        example: 2048
        type: integer
      name:
        example: my-key
        type: string
      providerId:
        example: 1
        type: integer
    required:
    - algorithm
    - name
    type: object
  handler.CreateKeyRequest:
    properties:
      description:
        example: New admin key for organization
        type: string
      dnsNames:
        example:
        - admin.example.com
        items:
          type: string
        type: array
      ipAddresses:
        example:
        - 192.168.1.100
        items:
          type: string
        type: array
      name:
        example: new-admin-key
        type: string
      role:
        example: admin
        type: string
    required:
    - name
    - role
    type: object
  handler.CreateOrganizationRequest:
    properties:
      caCertValidFor:
        description: Certificate validity configuration (Go duration format)
        type: string
      certValidFor:
        description: 'Validity for admin/client/peer certificates (e.g., "8760h" for
          1 year). Default: 8760h (1 year)'
        type: string
      country:
        description: CA certificate properties
        items:
          type: string
        type: array
      description:
        type: string
      locality:
        items:
          type: string
        type: array
      mspId:
        type: string
      name:
        type: string
      postalCode:
        items:
          type: string
        type: array
      providerId:
        type: integer
      province:
        items:
          type: string
        type: array
      streetAddress:
        items:
          type: string
        type: array
    required:
    - mspId
    - name
    type: object
  handler.CreateProviderHandlerRequest:
    properties:
      config:
        $ref: '#/definitions/handler.ProviderConfigHandler'
      isDefault:
        example: 0
        type: integer
      name:
        example: my-vault-provider
        type: string
      type:
        example: VAULT
        type: string
    required:
    - name
    - type
    type: object
  handler.DeleteRevokedCertificateRequest:
    properties:
      serialNumber:
        description: Hex string of the serial number
        type: string
    type: object
  handler.IdentityResponse:
    properties:
      createdAt:
        description: Creation timestamp
        type: string
      signCertificate:
        description: Certificates (PEM-encoded)
        type: string
      signKeyId:
        description: The created key IDs
        type: integer
      signPublicKey:
        description: Public keys (PEM-encoded)
        type: string
      tlsCertificate:
        type: string
      tlsKeyId:
        type: integer
      tlsPublicKey:
        type: string
      type:
        description: The identity type
        type: string
    type: object
  handler.ImportOrganizationRequest:
    properties:
      awsKmsImport:
        allOf:
        - $ref: '#/definitions/handler.AWSKMSImportData'
        description: 'For SourceType="aws_kms": AWS KMS configuration'
      description:
        type: string
      mspId:
        type: string
      name:
        type: string
      providerId:
        type: integer
      rawImport:
        allOf:
        - $ref: '#/definitions/handler.RawImportData'
        description: 'For SourceType="raw": Direct PEM-encoded certificates and keys'
      sourceType:
        description: 'Source type for the import: "raw", "vault", or "aws_kms"'
        enum:
        - raw
        - vault
        - aws_kms
        type: string
      vaultImport:
        allOf:
        - $ref: '#/definitions/handler.VaultImportData'
        description: 'For SourceType="vault": Vault paths to retrieve certificates/keys'
    required:
    - mspId
    - name
    - providerId
    - sourceType
    type: object
  handler.KeyResponse:
    properties:
      algorithm:
        type: string
      certificate:
        type: string
      createdAt:
        type: string
      description:
        type: string
      ethereumAddress:
        type: string
      expiresAt:
        type: string
      id:
        type: integer
      lastRotatedAt:
        type: string
      name:
        type: string
      provider:
        properties:
          id:
            type: integer
          name:
            type: string
        type: object
      publicKey:
        type: string
      sha1Fingerprint:
        type: string
      sha256Fingerprint:
        type: string
      signingKeyId:
        type: integer
      status:
        type: string
    type: object
  handler.OrganizationResponse:
    properties:
      adminSignKeyId:
        type: integer
      adminTlsKeyId:
        type: integer
      clientSignKeyId:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      mspId:
        type: string
      providerId:
        type: integer
      providerName:
        type: string
      signCertificate:
        type: string
      signPublicKey:
        type: string
      tlsCertificate:
        type: string
      tlsPublicKey:
        type: string
      updatedAt:
        type: string
    type: object
  handler.PaginatedOrganizationsResponse:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/handler.OrganizationResponse'
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  handler.ProviderConfigHandler:
    properties:
      awsKms:
        $ref: '#/definitions/handler.AWSKMSConfigHandler'
      vault:
        $ref: '#/definitions/handler.VaultConfigHandler'
    type: object
  handler.RawImportData:
    properties:
      signCaCert:
        description: 'Required: CA certificates'
        type: string
      signCaPrivateKey:
        description: 'Optional: CA private keys (if available, allows generating new
          identities)'
        type: string
      tlsCaCert:
        description: PEM-encoded TLS CA certificate
        type: string
      tlsCaPrivateKey:
        description: PEM-encoded TLS CA private key
        type: string
    required:
    - signCaCert
    - tlsCaCert
    type: object
  handler.RenewCertificateRequest:
    properties:
      caType:
        example: sign
        type: string
      dnsNames:
        example:
        - admin.example.com
        items:
          type: string
        type: array
      ipAddresses:
        example:
        - 192.168.1.100
        items:
          type: string
        type: array
      keyId:
        example: 123
        type: integer
      role:
        example: admin
        type: string
      validFor:
        description: Duration in Go format (e.g., "8760h" for 1 year)
        example: 8760h
        type: string
    required:
    - caType
    - keyId
    - role
    type: object
  handler.RevokeCertificateByPEMRequest:
    properties:
      certificate:
        description: PEM encoded certificate
        type: string
      revocationReason:
        type: integer
    type: object
  handler.RevokeCertificateBySerialRequest:
    properties:
      revocationReason:
        type: integer
      serialNumber:
        description: Hex string of the serial number
        type: string
    type: object
  handler.RevokedCertificateResponse:
    properties:
      reason:
        type: integer
      revocationTime:
        type: string
      serialNumber:
        type: string
    type: object
  handler.SignCertificateHandlerRequest:
    properties:
      caKeyId:
        example: 1
        minimum: 1
        type: integer
      certificate:
        $ref: '#/definitions/handler.CertificateSigningRequest'
    required:
    - caKeyId
    - certificate
    type: object
  handler.SignCertificateResponse:
    properties:
      algorithm:
        $ref: '#/definitions/models.KeyAlgorithm'
      canUseInNodes:
        description: Can be used in Fabric nodes (exportable + was_exported)
        type: boolean
      certificate:
        type: string
      createdAt:
        type: string
      curve:
        $ref: '#/definitions/models.ECCurve'
      description:
        type: string
      ethereumAddress:
        type: string
      expiresAt:
        type: string
      format:
        type: string
      generatedLocally:
        description: Was key generated locally
        type: boolean
      id:
        type: integer
      importedToProvider:
        description: Was key imported to provider
        type: boolean
      isExportable:
        description: Can private key be exported/accessed locally
        type: boolean
      keySize:
        type: integer
      kmsKeyId:
        description: KMS key ID/ARN if applicable (AWS KMS)
        type: string
      lastRotatedAt:
        type: string
      name:
        type: string
      provider:
        $ref: '#/definitions/models.KeyProviderInfo'
      providerMetadata:
        additionalProperties: true
        description: Provider-specific metadata (Vault path, KMS ARN, etc.)
        type: object
      publicKey:
        type: string
      sha1Fingerprint:
        type: string
      sha256Fingerprint:
        type: string
      signingKeyID:
        type: integer
      status:
        type: string
      wasExported:
        description: Was private key exported (or generated locally)
        type: boolean
    type: object
  handler.TunePKIMountRequest:
    properties:
      defaultCaCertTtl:
        description: 10 years default for CA certs
        example: 87600h
        type: string
      defaultCertTtl:
        description: 1 year default for regular certs
        example: 8760h
        type: string
      defaultLeaseTtl:
        description: 'Deprecated: use DefaultCertTtl'
        example: 8760h
        type: string
      maxCaCertTtl:
        description: 10 years max for CA certs
        example: 87600h
        type: string
      maxCertTtl:
        description: 1 year max for regular certs
        example: 8760h
        type: string
      maxLeaseTtl:
        description: 'Deprecated: use MaxCaCertTtl'
        example: 87600h
        type: string
    type: object
  handler.UpdateOrganizationRequest:
    properties:
      description:
        type: string
    type: object
  handler.VaultConfigHandler:
    properties:
      address:
        example: http://vault:8200
        type: string
      caCert:
        type: string
      defaultCACertTTL:
        example: 87600h
        type: string
      defaultCertTTL:
        example: 8760h
        type: string
      kvMount:
        example: secret
        type: string
      maxCACertTTL:
        example: 175200h
        type: string
      maxCertTTL:
        example: 87600h
        type: string
      mode:
        example: docker
        type: string
      namespace:
        example: admin
        type: string
      network:
        example: bridge
        type: string
      operation:
        example: CREATE
        type: string
      pkiMount:
        example: pki
        type: string
      port:
        example: 8200
        type: integer
      shares:
        example: 5
        type: integer
      threshold:
        example: 3
        type: integer
      token:
        example: hvs.token
        type: string
      transitMount:
        example: transit
        type: string
      version:
        example: 1.15.6
        type: string
    required:
    - operation
    type: object
  handler.VaultImportData:
    properties:
      signCaPath:
        description: Vault paths for CA certificates and keys
        type: string
      tlsCaPath:
        description: Vault path for TLS CA
        type: string
    required:
    - signCaPath
    - tlsCaPath
    type: object
  handler.VaultOperationResponse:
    properties:
      error:
        example: ""
        type: string
      message:
        example: Vault instance started successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  handler.VaultStatusResponse:
    properties:
      address:
        example: http://localhost:8200
        type: string
      cluster_id:
        example: abc123
        type: string
      cluster_name:
        example: vault-cluster-1
        type: string
      container_created:
        example: "2024-01-01T00:00:00Z"
        type: string
      container_error:
        example: ""
        type: string
      container_exists:
        example: true
        type: boolean
      container_finished_at:
        example: ""
        type: string
      container_full_id:
        example: a1b2c3d4e5f6789...
        type: string
      container_id:
        example: a1b2c3d4e5f6
        type: string
      container_image:
        example: hashicorp/vault:1.15.6
        type: string
      container_name:
        example: chainlaunch-vault-1
        type: string
      container_ports:
        additionalProperties: true
        type: object
      container_restart_count:
        example: 0
        type: integer
      container_running:
        example: true
        type: boolean
      container_started_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      container_status:
        example: running
        type: string
      data_directory:
        example: /data/vaults/my-vault-provider
        type: string
      data_exists:
        example: true
        type: boolean
      default_ca_cert_ttl:
        example: 87600h
        type: string
      default_cert_ttl:
        example: 8760h
        type: string
      docker_available:
        example: true
        type: boolean
      has_unseal_keys:
        example: true
        type: boolean
      max_ca_cert_ttl:
        example: 175200h
        type: string
      max_cert_ttl:
        example: 87600h
        type: string
      port:
        example: "8200"
        type: string
      provider_id:
        example: 1
        type: integer
      provider_name:
        example: my-vault-provider
        type: string
      sealed:
        example: false
        type: boolean
      vault_health_details:
        additionalProperties: true
        type: object
      vault_initialized:
        example: true
        type: boolean
      vault_reachable:
        example: true
        type: boolean
      vault_status:
        example: active
        type: string
      vault_status_code:
        example: 200
        type: integer
      vault_version:
        example: 1.15.6
        type: string
    type: object
  http.AddConsenterPayload:
    properties:
      client_tls_cert:
        type: string
      host:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      server_tls_cert:
        type: string
    required:
    - client_tls_cert
    - host
    - port
    - server_tls_cert
    type: object
  http.AddNodeToNetworkRequest:
    properties:
      nodeId:
        type: integer
      role:
        type: string
    required:
    - nodeId
    - role
    type: object
  http.AddOrdererOrgPayload:
    properties:
      msp_id:
        type: string
      orderer_endpoints:
        items:
          type: string
        minItems: 1
        type: array
      root_certs:
        items:
          type: string
        minItems: 1
        type: array
      tls_root_certs:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - msp_id
    - orderer_endpoints
    - root_certs
    - tls_root_certs
    type: object
  http.AddOrgPayload:
    properties:
      msp_id:
        type: string
      root_certs:
        items:
          type: string
        minItems: 1
        type: array
      tls_root_certs:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - msp_id
    - root_certs
    - tls_root_certs
    type: object
  http.AnchorPeer:
    properties:
      host:
        type: string
      port:
        type: integer
    required:
    - host
    - port
    type: object
  http.BackupResponse:
    properties:
      completedAt:
        type: string
      createdAt:
        type: string
      errorMessage:
        type: string
      id:
        type: integer
      metadata: {}
      scheduleId:
        type: integer
      sizeBytes:
        type: integer
      startedAt:
        type: string
      status:
        type: string
      targetId:
        type: integer
    type: object
  http.BackupScheduleResponse:
    properties:
      createdAt:
        type: string
      cronExpression:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      id:
        type: integer
      lastRunAt:
        type: string
      name:
        type: string
      nextRunAt:
        type: string
      retentionDays:
        type: integer
      targetId:
        type: integer
      updatedAt:
        type: string
    type: object
  http.BackupTargetResponse:
    properties:
      accessKeyId:
        type: string
      bucketName:
        type: string
      bucketPath:
        type: string
      createdAt:
        type: string
      endpoint:
        type: string
      forcePathStyle:
        type: boolean
      id:
        type: integer
      name:
        type: string
      region:
        type: string
      resticPassword:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  http.BatchSize:
    properties:
      absoluteMaxBytes:
        type: integer
      maxMessageCount:
        type: integer
      preferredMaxBytes:
        type: integer
    type: object
  http.BesuNetworkResponse:
    properties:
      chainId:
        type: integer
      config:
        items:
          type: integer
        type: array
      createdAt:
        type: string
      description:
        type: string
      genesisConfig:
        type: string
      id:
        type: integer
      name:
        type: string
      platform:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      validators:
        items:
          type: string
        type: array
    type: object
  http.BesuNodeDefaultsResponse:
    properties:
      defaults:
        items:
          $ref: '#/definitions/service.BesuNodeDefaults'
        type: array
      nodeCount:
        type: integer
    type: object
  http.BlockListResponse:
    properties:
      blocks:
        items:
          $ref: '#/definitions/block.Block'
        type: array
      total:
        type: integer
    type: object
  http.BlockTransactionsResponse:
    properties:
      block:
        $ref: '#/definitions/block.Block'
    type: object
  http.ChainInfoResponse:
    properties:
      currentBlockHash:
        type: string
      height:
        type: integer
      previousBlockHash:
        type: string
    type: object
  http.ChaincodeResponse:
    properties:
      endorsementPlugin:
        type: string
      endorsementPolicy:
        type: string
      initRequired:
        type: boolean
      name:
        type: string
      sequence:
        type: integer
      validationPlugin:
        type: string
      version:
        type: string
    type: object
  http.ChannelConfigResponse:
    properties:
      config:
        additionalProperties: true
        type: object
      name:
        type: string
    type: object
  http.ChannelResponse:
    properties:
      blockNum:
        type: integer
      createdAt:
        type: string
      name:
        type: string
    type: object
  http.ConfigUpdateOperationRequest:
    description: A single configuration update operation
    properties:
      payload:
        description: |-
          Payload contains the operation-specific data
          The structure depends on the operation type:
          - add_org: AddOrgPayload
          - remove_org: RemoveOrgPayload
          - update_org_msp: UpdateOrgMSPPayload
          - set_anchor_peers: SetAnchorPeersPayload
          - add_consenter: AddConsenterPayload
          - remove_consenter: RemoveConsenterPayload
          - update_consenter: UpdateConsenterPayload
          - update_etcd_raft_options: UpdateEtcdRaftOptionsPayload
          - update_batch_size: UpdateBatchSizePayload
          - update_batch_timeout: UpdateBatchTimeoutPayload
          - update_application_policy: UpdateApplicationPolicyPayload
          - update_orderer_policy: UpdateOrdererPolicyPayload
          - update_channel_policy: UpdateChannelPolicyPayload
          - update_channel_capability: UpdateChannelCapabilityOperation
          - update_orderer_capability: UpdateOrdererCapabilityOperation
          - update_application_capability: UpdateApplicationCapabilityOperation
          @Description The payload for the configuration update operation
          @Description Can be one of:
          @Description - AddOrgPayload when type is "add_org"
          @Description - RemoveOrgPayload when type is "remove_org"
          @Description - UpdateOrgMSPPayload when type is "update_org_msp"
          @Description - SetAnchorPeersPayload when type is "set_anchor_peers"
          @Description - AddConsenterPayload when type is "add_consenter"
          @Description - RemoveConsenterPayload when type is "remove_consenter"
          @Description - UpdateConsenterPayload when type is "update_consenter"
          @Description - UpdateEtcdRaftOptionsPayload when type is "update_etcd_raft_options"
          @Description - UpdateBatchSizePayload when type is "update_batch_size"
          @Description - UpdateBatchTimeoutPayload when type is "update_batch_timeout"
          @Description - UpdateApplicationPolicyPayload when type is "update_application_policy"
          @Description - UpdateOrdererPolicyPayload when type is "update_orderer_policy"
          @Description - UpdateChannelPolicyPayload when type is "update_channel_policy"
          @Description - UpdateChannelCapabilityPayload when type is "update_channel_capability"
          @Description - UpdateOrdererCapabilityPayload when type is "update_orderer_capability"
          @Description - UpdateApplicationCapabilityPayload when type is "update_application_capability"
          @Description - AddOrdererOrgPayload when type is "add_orderer_org"
          @Description - RemoveOrdererOrgPayload when type is "remove_orderer_org"
          @Description - UpdateOrdererOrgMSPPayload when type is "update_orderer_org_msp"
          @Description - UpdateApplicationACLPayload when type is "update_application_acl"
        items:
          type: integer
        type: array
      type:
        description: |-
          Type is the type of configuration update operation
          enum: add_org,remove_org,update_org_msp,set_anchor_peers,add_consenter,remove_consenter,update_consenter,update_etcd_raft_options,update_batch_size,update_batch_timeout,update_application_policy,update_orderer_policy,update_channel_policy,update_channel_capability,update_orderer_capability,update_application_capability,add_orderer_org,remove_orderer_org,update_orderer_org_msp,update_application_acl
        type: string
    required:
    - payload
    - type
    type: object
  http.ConfigUpdateResponse:
    properties:
      channel_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      network_id:
        type: integer
      operations:
        items:
          $ref: '#/definitions/http.ConfigUpdateOperationRequest'
        type: array
      preview_json:
        type: string
      status:
        type: string
    type: object
  http.ConsenterConfig:
    properties:
      host:
        type: string
      port:
        type: integer
      tlsCert:
        type: string
    required:
    - host
    - port
    - tlsCert
    type: object
  http.CreateBackupRequest:
    properties:
      metadata: {}
      scheduleId:
        type: integer
      targetId:
        type: integer
    required:
    - targetId
    type: object
  http.CreateBackupScheduleRequest:
    description: Request body for creating a new backup schedule
    properties:
      cronExpression:
        description: |-
          Cron expression for schedule
          @Example "0 0 * * *"
        type: string
      description:
        description: |-
          Optional description
          @Example "Daily backup at midnight"
        type: string
      enabled:
        description: |-
          Whether the schedule is enabled
          @Example true
        type: boolean
      name:
        description: |-
          Name of the backup schedule
          @Example "daily-backup"
        type: string
      retentionDays:
        description: |-
          Number of days to retain backups
          @Example 30
        minimum: 1
        type: integer
      targetId:
        description: |-
          ID of the backup target to use
          @Example 1
        type: integer
    required:
    - cronExpression
    - name
    - retentionDays
    - targetId
    type: object
  http.CreateBackupTargetRequest:
    description: Request body for creating a new backup target
    properties:
      accessKeyId:
        description: |-
          AWS access key ID (required for S3 type)
          @Example "AKIAXXXXXXXXXXXXXXXX"
        type: string
      bucketName:
        description: |-
          S3 bucket name (required for S3 type)
          @Example "my-backup-bucket"
        type: string
      bucketPath:
        description: |-
          Path within the bucket (required for S3 type)
          @Example "backups/app1"
        type: string
      endpoint:
        description: |-
          Custom S3 endpoint (optional)
          @Example "https://s3.custom-domain.com"
        type: string
      forcePathStyle:
        description: |-
          Use path-style S3 URLs
          @Example false
        type: boolean
      name:
        description: |-
          Name of the backup target
          @Example "daily-backup-s3"
        type: string
      region:
        description: |-
          AWS region (required for S3 type)
          @Example "us-east-1"
        type: string
      resticPassword:
        description: |-
          Restic repository password (optional - will be auto-generated if not provided)
          @Example "my-secure-password-123"
        type: string
      secretKey:
        description: AWS secret key (required for S3 type)
        type: string
      type:
        description: |-
          Type of backup target (S3 or LOCAL)
          @Example "S3"
        type: string
    required:
    - name
    - type
    type: object
  http.CreateBesuNetworkRequest:
    description: Request body for creating a new Besu network
    properties:
      config:
        description: '@Description Network configuration'
        properties:
          alloc:
            additionalProperties:
              properties:
                balance:
                  description: '@Description Initial balance for the account in hex
                    format (e.g. "0x100000000000000000000000000000000000000000000000000000000000000")'
                  type: string
              required:
              - balance
              type: object
            description: '@Description Optional initial account balances'
            type: object
          blockPeriod:
            description: |-
              @Description Block period in seconds
              @Default 5
              @Required
            example: 5
            type: integer
          chainId:
            description: |-
              @Description Chain ID for the network
              @Default 1337
              @Required
            example: 1337
            type: integer
          coinbase:
            description: '@Description Optional coinbase address'
            type: string
          consensus:
            description: |-
              @Description Consensus algorithm (e.g. "qbft")
              @Required
            type: string
          difficulty:
            description: '@Description Optional difficulty value'
            type: string
          epochLength:
            description: |-
              @Description Epoch length in blocks
              @Default 30000
              @Required
            example: 30000
            type: integer
          externalValidatorKeys:
            description: '@Description Optional list of external validator keys (shared/received
              from other peers)'
            items:
              properties:
                ethereumAddress:
                  description: '@Description Ethereum address derived from the public
                    key'
                  type: string
                publicKey:
                  description: '@Description Public key data'
                  type: string
              required:
              - ethereumAddress
              - publicKey
              type: object
            type: array
          gasLimit:
            description: '@Description Optional gas limit value'
            type: string
          initialValidatorsKeyIds:
            description: |-
              @Description List of initial validator key IDs (minimum 4 required for QBFT consensus and Byzantine Fault Tolerance)
              @Required
              @MinItems 4
            items:
              type: integer
            minItems: 4
            type: array
          mixHash:
            description: '@Description Optional mix hash value'
            type: string
          nonce:
            description: '@Description Optional nonce value'
            type: string
          requestTimeout:
            description: |-
              @Description Request timeout in seconds
              @Required
            type: integer
          timestamp:
            description: '@Description Optional timestamp value'
            type: string
        required:
        - blockPeriod
        - chainId
        - consensus
        - epochLength
        - initialValidatorsKeyIds
        - requestTimeout
        type: object
      description:
        description: '@Description Optional description of the network'
        type: string
      name:
        description: '@Description Name of the network'
        type: string
    required:
    - config
    - name
    type: object
  http.CreateFabricNetworkRequest:
    properties:
      config:
        $ref: '#/definitions/http.FabricNetworkConfig'
      description:
        type: string
      name:
        type: string
    required:
    - config
    - name
    type: object
  http.CreateNodeRequest:
    description: Request payload for creating a new node
    properties:
      besuNode:
        allOf:
        - $ref: '#/definitions/types.BesuNodeConfig'
        description: '@Description Besu node configuration, required when creating
          a Besu node'
      blockchainPlatform:
        allOf:
        - $ref: '#/definitions/types.BlockchainPlatform'
        description: '@Description Blockchain platform (fabric or besu)'
        example: fabric
      fabricOrderer:
        allOf:
        - $ref: '#/definitions/types.FabricOrdererConfig'
        description: '@Description Fabric orderer configuration, required when creating
          a Fabric orderer node'
      fabricPeer:
        allOf:
        - $ref: '#/definitions/types.FabricPeerConfig'
        description: '@Description Fabric peer configuration, required when creating
          a Fabric peer node'
      name:
        description: '@Description Name of the node'
        example: peer0-org1
        type: string
    required:
    - blockchainPlatform
    - name
    type: object
  http.CreateProviderRequest:
    properties:
      config: {}
      isDefault:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
      notifyBackupFailure:
        type: boolean
      notifyBackupSuccess:
        type: boolean
      notifyNodeDowntime:
        type: boolean
      notifyS3ConnIssue:
        type: boolean
      type:
        $ref: '#/definitions/notifications.ProviderType'
    required:
    - config
    - name
    - type
    type: object
  http.CronPreviewRequest:
    description: Request body for previewing cron schedule execution times
    properties:
      count:
        description: |-
          Number of next executions to return (default: 5, max: 10)
          @Example 5
        type: integer
      cronExpression:
        description: |-
          Cron expression to preview
          @Example "0 */6 * * *"
        type: string
    required:
    - cronExpression
    type: object
  http.CronPreviewResponse:
    description: Response containing the next scheduled execution times
    properties:
      error:
        description: |-
          Error message if the expression is invalid
          @Example ""
        type: string
      nextExecutions:
        description: |-
          Next scheduled execution times
          @Example ["2024-01-01T00:00:00Z", "2024-01-01T06:00:00Z", "2024-01-01T12:00:00Z", "2024-01-01T18:00:00Z", "2024-01-02T00:00:00Z"]
        items:
          type: string
        type: array
      valid:
        description: |-
          Valid indicates if the cron expression is valid
          @Example true
        type: boolean
    type: object
  http.EtcdRaftOptions:
    properties:
      electionTick:
        type: integer
      heartbeatTick:
        type: integer
      maxInflightBlocks:
        type: integer
      snapshotIntervalSize:
        type: integer
      tickInterval:
        type: string
    type: object
  http.ExternalNodesResponse:
    properties:
      besu_nodes:
        items:
          $ref: '#/definitions/service.ExternalBesuNodeDTO'
        type: array
      fabric_orderers:
        items:
          $ref: '#/definitions/service.ExternalFabricOrdererDTO'
        type: array
      fabric_peers:
        items:
          $ref: '#/definitions/service.ExternalFabricPeerDTO'
        type: array
    type: object
  http.ExternalOrgConfig:
    properties:
      consenters:
        items:
          $ref: '#/definitions/http.ConsenterConfig'
        type: array
      mspid:
        type: string
      signCACert:
        type: string
      tlsCACert:
        type: string
    required:
    - mspid
    - signCACert
    - tlsCACert
    type: object
  http.FabricNetworkConfig:
    properties:
      applicationCapabilities:
        items:
          type: string
        type: array
      applicationPolicies:
        additionalProperties:
          $ref: '#/definitions/http.FabricPolicy'
        description: Optional policies
        type: object
      batchSize:
        allOf:
        - $ref: '#/definitions/http.BatchSize'
        description: Batch configuration
      batchTimeout:
        description: e.g., "2s"
        type: string
      channelCapabilities:
        description: Capabilities configuration
        items:
          type: string
        type: array
      channelPolicies:
        additionalProperties:
          $ref: '#/definitions/http.FabricPolicy'
        type: object
      consensusType:
        description: Consensus configuration
        type: string
      etcdRaftOptions:
        $ref: '#/definitions/http.EtcdRaftOptions'
      externalOrdererOrgs:
        items:
          $ref: '#/definitions/http.ExternalOrgConfig'
        type: array
      externalPeerOrgs:
        items:
          $ref: '#/definitions/http.ExternalOrgConfig'
        type: array
      ordererCapabilities:
        items:
          type: string
        type: array
      ordererOrganizations:
        items:
          $ref: '#/definitions/http.OrganizationConfig'
        type: array
      ordererPolicies:
        additionalProperties:
          $ref: '#/definitions/http.FabricPolicy'
        type: object
      peerOrganizations:
        items:
          $ref: '#/definitions/http.OrganizationConfig'
        type: array
      smartBFTConsenters:
        items:
          $ref: '#/definitions/http.SmartBFTConsenter'
        type: array
      smartBFTOptions:
        $ref: '#/definitions/http.SmartBFTOptions'
    type: object
  http.FabricPolicy:
    properties:
      rule:
        type: string
      type:
        type: string
    type: object
  http.GetNetworkNodesResponse:
    properties:
      nodes:
        items:
          $ref: '#/definitions/service.NetworkNode'
        type: array
    type: object
  http.HostPort:
    properties:
      host:
        type: string
      port:
        type: integer
    type: object
  http.ImportBesuNetworkRequest:
    properties:
      chainId:
        type: integer
      description:
        type: string
      genesisFile:
        type: string
      name:
        type: string
    required:
    - chainId
    - genesisFile
    - name
    type: object
  http.ImportFabricNetworkRequest:
    properties:
      description:
        type: string
      genesisFile:
        type: string
    required:
    - genesisFile
    type: object
  http.ImportFabricNetworkWithOrgRequest:
    properties:
      channelId:
        type: string
      description:
        type: string
      ordererTlsCert:
        type: string
      ordererUrl:
        type: string
      organizationId:
        type: integer
    required:
    - channelId
    - ordererTlsCert
    - ordererUrl
    - organizationId
    type: object
  http.ImportNetworkResponse:
    properties:
      message:
        type: string
      networkId:
        type: integer
    type: object
  http.ListBesuNetworksResponse:
    properties:
      networks:
        items:
          $ref: '#/definitions/http.BesuNetworkResponse'
        type: array
      total:
        type: integer
    type: object
  http.ListNetworksResponse:
    properties:
      networks:
        items:
          $ref: '#/definitions/http.NetworkResponse'
        type: array
      total:
        type: integer
    type: object
  http.NetworkResponse:
    properties:
      config:
        items:
          type: integer
        type: array
      createdAt:
        type: string
      createdBy:
        type: integer
      currentConfigBlock:
        type: string
      deploymentConfig:
        items:
          type: integer
        type: array
      description:
        type: string
      domain:
        type: string
      exposedPorts:
        items:
          type: integer
        type: array
      genesisBlock:
        type: string
      id:
        type: integer
      name:
        type: string
      platform:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  http.NodeChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/definitions/http.ChannelResponse'
        type: array
      nodeId:
        type: integer
    type: object
  http.NodeEventResponse:
    properties:
      created_at:
        type: string
      data: {}
      id:
        type: integer
      node_id:
        type: integer
      type:
        type: string
    type: object
  http.NodeResponse:
    properties:
      besuNode:
        $ref: '#/definitions/service.BesuNodeProperties'
      createdAt:
        type: string
      endpoint:
        type: string
      errorMessage:
        type: string
      fabricOrderer:
        $ref: '#/definitions/service.FabricOrdererProperties'
      fabricPeer:
        $ref: '#/definitions/service.FabricPeerProperties'
      id:
        type: integer
      name:
        type: string
      nodeType:
        type: string
      platform:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  http.OrganizationConfig:
    properties:
      id:
        type: integer
      nodeIds:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - id
    - nodeIds
    type: object
  http.PaginatedNodeEventsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/http.NodeEventResponse'
        type: array
      page:
        type: integer
      total:
        type: integer
    type: object
  http.PaginatedNodesResponse:
    properties:
      hasNextPage:
        type: boolean
      items:
        items:
          $ref: '#/definitions/http.NodeResponse'
        type: array
      page:
        type: integer
      pageCount:
        type: integer
      total:
        type: integer
    type: object
  http.ProviderResponse:
    properties:
      config: {}
      createdAt:
        type: string
      id:
        type: integer
      isDefault:
        type: boolean
      lastTestAt:
        type: string
      lastTestMessage:
        type: string
      lastTestStatus:
        type: string
      name:
        type: string
      notifyBackupFailure:
        type: boolean
      notifyBackupSuccess:
        type: boolean
      notifyNodeDowntime:
        type: boolean
      notifyS3ConnIssue:
        type: boolean
      type:
        $ref: '#/definitions/notifications.ProviderType'
      updatedAt:
        type: string
    type: object
  http.QbftDiscardValidatorVoteRequest:
    properties:
      validatorAddress:
        type: string
    required:
    - validatorAddress
    type: object
  http.QbftProposeValidatorVoteRequest:
    properties:
      validatorAddress:
        type: string
      vote:
        type: boolean
    required:
    - validatorAddress
    type: object
  http.RemoveConsenterPayload:
    properties:
      host:
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
    required:
    - host
    - port
    type: object
  http.RemoveOrdererOrgPayload:
    properties:
      msp_id:
        type: string
    required:
    - msp_id
    type: object
  http.RemoveOrgPayload:
    properties:
      msp_id:
        type: string
    required:
    - msp_id
    type: object
  http.SetAnchorPeersPayload:
    properties:
      anchor_peers:
        items:
          properties:
            host:
              type: string
            port:
              maximum: 65535
              minimum: 1
              type: integer
          required:
          - host
          - port
          type: object
        minItems: 1
        type: array
      msp_id:
        type: string
    required:
    - anchor_peers
    - msp_id
    type: object
  http.SetAnchorPeersRequest:
    properties:
      anchorPeers:
        items:
          $ref: '#/definitions/http.AnchorPeer'
        type: array
      organizationId:
        type: integer
    required:
    - anchorPeers
    - organizationId
    type: object
  http.SetAnchorPeersResponse:
    properties:
      transactionId:
        type: string
    type: object
  http.SmartBFTConsenter:
    properties:
      address:
        $ref: '#/definitions/http.HostPort'
      clientTLSCert:
        type: string
      id:
        type: integer
      identity:
        type: string
      mspId:
        type: string
      serverTLSCert:
        type: string
    type: object
  http.SmartBFTOptions:
    properties:
      collectTimeout:
        type: string
      decisionsPerLeader:
        type: integer
      incomingMessageBufferSize:
        type: integer
      leaderHeartbeatCount:
        type: integer
      leaderHeartbeatTimeout:
        type: string
      leaderRotation:
        type: string
      requestAutoRemoveTimeout:
        type: string
      requestBatchMaxBytes:
        type: integer
      requestBatchMaxCount:
        type: integer
      requestBatchMaxInterval:
        type: string
      requestComplainTimeout:
        type: string
      requestForwardTimeout:
        type: string
      requestMaxBytes:
        type: integer
      requestPoolSize:
        type: integer
      speedUpViewChange:
        type: boolean
      syncOnStart:
        type: boolean
      viewChangeResendInterval:
        type: string
      viewChangeTimeout:
        type: string
    type: object
  http.TestProviderRequest:
    properties:
      testEmail:
        type: string
    required:
    - testEmail
    type: object
  http.TestProviderResponse:
    properties:
      message:
        type: string
      status:
        type: string
      testedAt:
        type: string
    type: object
  http.TransactionResponse:
    properties:
      block:
        $ref: '#/definitions/block.Block'
    type: object
  http.UpdateApplicationCapabilityOperation:
    properties:
      capability:
        items:
          type: string
        minItems: 1
        type: array
    type: object
  http.UpdateApplicationPolicyPayload:
    properties:
      policy:
        $ref: '#/definitions/http.FabricPolicy'
      policy_name:
        type: string
    required:
    - policy
    - policy_name
    type: object
  http.UpdateBackupScheduleRequest:
    properties:
      cronExpression:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      name:
        type: string
      retentionDays:
        minimum: 1
        type: integer
      targetId:
        type: integer
    required:
    - cronExpression
    - name
    - retentionDays
    - targetId
    type: object
  http.UpdateBackupTargetRequest:
    properties:
      accessKeyId:
        type: string
      bucketName:
        type: string
      bucketPath:
        type: string
      endpoint:
        type: string
      forcePathStyle:
        type: boolean
      name:
        type: string
      region:
        type: string
      resticPassword:
        type: string
      secretKey:
        type: string
      type:
        type: string
    required:
    - name
    - type
    type: object
  http.UpdateBatchSizePayload:
    properties:
      absolute_max_bytes:
        minimum: 1
        type: integer
      max_message_count:
        minimum: 1
        type: integer
      preferred_max_bytes:
        minimum: 1
        type: integer
    required:
    - absolute_max_bytes
    - max_message_count
    - preferred_max_bytes
    type: object
  http.UpdateBatchTimeoutPayload:
    properties:
      timeout:
        description: e.g., "2s"
        type: string
    required:
    - timeout
    type: object
  http.UpdateBesuNodeRequest:
    properties:
      accountsAllowList:
        description: Permissions configuration
        items:
          type: string
        type: array
      bootnodes:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      externalIp:
        type: string
      hostAllowList:
        type: string
      internalIp:
        type: string
      jwtAuthenticationAlgorithm:
        type: string
      jwtEnabled:
        description: JWT Authentication configuration
        type: boolean
      jwtPublicKeyContent:
        type: string
      metricsEnabled:
        type: boolean
      metricsPort:
        type: integer
      minGasPrice:
        description: Gas and access control configuration
        type: integer
      mode:
        type: string
      networkId:
        type: integer
      nodesAllowList:
        items:
          type: string
        type: array
      p2pHost:
        type: string
      p2pPort:
        type: integer
      rpcHost:
        type: string
      rpcPort:
        type: integer
      version:
        type: string
    required:
    - networkId
    - p2pHost
    - p2pPort
    - rpcHost
    - rpcPort
    type: object
  http.UpdateChannelCapabilityOperation:
    properties:
      capability:
        items:
          type: string
        minItems: 1
        type: array
    type: object
  http.UpdateChannelPolicyPayload:
    properties:
      policy:
        $ref: '#/definitions/http.FabricPolicy'
      policy_name:
        type: string
    required:
    - policy
    - policy_name
    type: object
  http.UpdateConsenterPayload:
    properties:
      client_tls_cert:
        type: string
      host:
        type: string
      new_host:
        type: string
      new_port:
        maximum: 65535
        minimum: 1
        type: integer
      port:
        maximum: 65535
        minimum: 1
        type: integer
      server_tls_cert:
        type: string
    required:
    - client_tls_cert
    - host
    - new_host
    - new_port
    - port
    - server_tls_cert
    type: object
  http.UpdateEtcdRaftOptionsPayload:
    properties:
      election_tick:
        minimum: 1
        type: integer
      heartbeat_tick:
        minimum: 1
        type: integer
      max_inflight_blocks:
        minimum: 1
        type: integer
      snapshot_interval_size:
        minimum: 1
        type: integer
      tick_interval:
        type: string
    required:
    - election_tick
    - heartbeat_tick
    - max_inflight_blocks
    - snapshot_interval_size
    - tick_interval
    type: object
  http.UpdateFabricNetworkRequest:
    properties:
      operations:
        items:
          $ref: '#/definitions/http.ConfigUpdateOperationRequest'
        minItems: 1
        type: array
      signing_org_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - operations
    - signing_org_ids
    type: object
  http.UpdateFabricOrdererRequest:
    properties:
      adminAddress:
        type: string
      domainNames:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      externalEndpoint:
        type: string
      listenAddress:
        type: string
      mode:
        type: string
      operationsListenAddress:
        type: string
      version:
        type: string
    type: object
  http.UpdateFabricPeerRequest:
    properties:
      addressOverrides:
        items:
          $ref: '#/definitions/types.AddressOverride'
        type: array
      chaincodeAddress:
        type: string
      domainNames:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      eventsAddress:
        type: string
      externalEndpoint:
        type: string
      listenAddress:
        type: string
      mode:
        type: string
      operationsListenAddress:
        type: string
      version:
        type: string
    type: object
  http.UpdateNodeRequest:
    properties:
      besuNode:
        $ref: '#/definitions/http.UpdateBesuNodeRequest'
      blockchainPlatform:
        $ref: '#/definitions/types.BlockchainPlatform'
      fabricOrderer:
        $ref: '#/definitions/http.UpdateFabricOrdererRequest'
      fabricPeer:
        allOf:
        - $ref: '#/definitions/http.UpdateFabricPeerRequest'
        description: Platform-specific configurations
      name:
        description: Common fields
        type: string
    type: object
  http.UpdateOrdererCapabilityOperation:
    properties:
      capability:
        items:
          type: string
        minItems: 1
        type: array
    type: object
  http.UpdateOrdererOrgMSPPayload:
    properties:
      msp_id:
        type: string
      root_certs:
        items:
          type: string
        minItems: 1
        type: array
      tls_root_certs:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - msp_id
    - root_certs
    - tls_root_certs
    type: object
  http.UpdateOrdererPolicyPayload:
    properties:
      policy:
        $ref: '#/definitions/http.FabricPolicy'
      policy_name:
        type: string
    required:
    - policy
    - policy_name
    type: object
  http.UpdateOrgMSPPayload:
    properties:
      msp_id:
        type: string
      root_certs:
        items:
          type: string
        minItems: 1
        type: array
      tls_root_certs:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - msp_id
    - root_certs
    - tls_root_certs
    type: object
  http.UpdateOrganizationCRLRequest:
    properties:
      organizationId:
        type: integer
    required:
    - organizationId
    type: object
  http.UpdateOrganizationCRLResponse:
    properties:
      transactionId:
        type: string
    type: object
  http.UpdateProviderRequest:
    properties:
      config: {}
      isDefault:
        type: boolean
      name:
        maxLength: 255
        minLength: 1
        type: string
      notifyBackupFailure:
        type: boolean
      notifyBackupSuccess:
        type: boolean
      notifyNodeDowntime:
        type: boolean
      notifyS3ConnIssue:
        type: boolean
      type:
        $ref: '#/definitions/notifications.ProviderType'
    required:
    - config
    - name
    - type
    type: object
  log.LogResponse:
    properties:
      data: {}
      error:
        type: string
      success:
        type: boolean
    type: object
  models.AWSKMSConfigPayload:
    properties:
      assumeRoleArn:
        description: IAM role assumption (optional, for cross-account access)
        type: string
      awsAccessKeyId:
        description: Static credentials (optional - can use IAM roles instead)
        type: string
      awsRegion:
        description: AWS Region (required)
        type: string
      awsSecretAccessKey:
        type: string
      awsSessionToken:
        type: string
      endpointUrl:
        description: |-
          Custom endpoint URL (optional, for LocalStack or custom AWS endpoints)
          If not provided, defaults to standard AWS KMS endpoints
        type: string
      externalId:
        type: string
      kmsKeyAliasPrefix:
        description: KMS key alias prefix (defaults to "chainlaunch/")
        type: string
      operation:
        description: 'Operation type: only "IMPORT" is supported (linking existing
          AWS account)'
        type: string
    required:
    - awsRegion
    - operation
    type: object
  models.ECCurve:
    enum:
    - P-256
    - P-384
    - P-521
    - secp256k1
    type: string
    x-enum-varnames:
    - ECCurveP256
    - ECCurveP384
    - ECCurveP521
    - ECCurveSECP256K1
  models.KeyAlgorithm:
    enum:
    - RSA
    - EC
    - ED25519
    type: string
    x-enum-varnames:
    - KeyAlgorithmRSA
    - KeyAlgorithmEC
    - KeyAlgorithmED25519
  models.KeyProviderInfo:
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.KeyProviderType'
        description: Added to know which provider is being used
    type: object
  models.KeyProviderType:
    enum:
    - DATABASE
    - VAULT
    - HSM
    - AWS_KMS
    type: string
    x-enum-varnames:
    - KeyProviderTypeDatabase
    - KeyProviderTypeVault
    - KeyProviderTypeHSM
    - KeyProviderTypeAWSKMS
  models.KeyResponse:
    properties:
      algorithm:
        $ref: '#/definitions/models.KeyAlgorithm'
      canUseInNodes:
        description: Can be used in Fabric nodes (exportable + was_exported)
        type: boolean
      certificate:
        type: string
      createdAt:
        type: string
      curve:
        $ref: '#/definitions/models.ECCurve'
      description:
        type: string
      ethereumAddress:
        type: string
      expiresAt:
        type: string
      format:
        type: string
      generatedLocally:
        description: Was key generated locally
        type: boolean
      id:
        type: integer
      importedToProvider:
        description: Was key imported to provider
        type: boolean
      isExportable:
        description: Can private key be exported/accessed locally
        type: boolean
      keySize:
        type: integer
      kmsKeyId:
        description: KMS key ID/ARN if applicable (AWS KMS)
        type: string
      lastRotatedAt:
        type: string
      name:
        type: string
      provider:
        $ref: '#/definitions/models.KeyProviderInfo'
      providerMetadata:
        additionalProperties: true
        description: Provider-specific metadata (Vault path, KMS ARN, etc.)
        type: object
      publicKey:
        type: string
      sha1Fingerprint:
        type: string
      sha256Fingerprint:
        type: string
      signingKeyID:
        type: integer
      status:
        type: string
      wasExported:
        description: Was private key exported (or generated locally)
        type: boolean
    type: object
  models.PaginatedResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/models.KeyResponse'
        type: array
      page:
        type: integer
      pageSize:
        type: integer
      totalItems:
        type: integer
    type: object
  models.ProviderConfig:
    properties:
      awsKms:
        $ref: '#/definitions/models.AWSKMSConfigPayload'
      vault:
        $ref: '#/definitions/models.VaultConfigPayload'
    type: object
  models.ProviderResponse:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/models.ProviderConfig'
        description: Properly typed configuration
      createdAt:
        type: string
      id:
        type: integer
      isDefault:
        type: integer
      name:
        type: string
      type:
        $ref: '#/definitions/models.KeyProviderType'
    type: object
  models.VaultConfigPayload:
    properties:
      address:
        description: Fields for IMPORT operation (linking existing Vault)
        type: string
      caCert:
        description: optional for IMPORT
        type: string
      defaultCACertTTL:
        description: Default TTL for CA certificates (e.g., "87600h" for 10 years)
        type: string
      defaultCertTTL:
        description: Certificate expiration configuration (for PKI engine)
        type: string
      kvMount:
        description: defaults to "secret"
        type: string
      maxCACertTTL:
        description: Maximum TTL for CA certificates (e.g., "175200h" for 20 years)
        type: string
      maxCertTTL:
        description: Maximum TTL for certificates (e.g., "87600h" for 10 years)
        type: string
      mode:
        description: Fields for CREATE operation (deploying new Vault)
        type: string
      namespace:
        description: optional Vault namespace
        type: string
      network:
        description: '"host" or "bridge" for CREATE'
        type: string
      operation:
        description: 'Operation type: "IMPORT" to link existing Vault, "CREATE" to
          deploy new Vault'
        type: string
      pkiMount:
        description: defaults to "pki"
        type: string
      port:
        description: port for CREATE (nullable)
        type: integer
      shares:
        description: unseal shares for CREATE (nullable)
        type: integer
      threshold:
        description: unseal threshold for CREATE (nullable)
        type: integer
      token:
        description: optional for IMPORT
        type: string
      transitMount:
        description: Common fields for both operations
        type: string
      version:
        description: Vault version for CREATE
        type: string
    required:
    - operation
    type: object
  monitoring.HealthStatus:
    enum:
    - healthy
    - unhealthy
    - unreachable
    type: string
    x-enum-varnames:
    - HealthStatusHealthy
    - HealthStatusUnhealthy
    - HealthStatusUnreachable
  monitoring.HealthcheckHistoryResponse:
    properties:
      healthchecks:
        items:
          $ref: '#/definitions/monitoring.HealthcheckRecord'
        type: array
      interval:
        type: string
      nodeId:
        type: integer
      nodeName:
        type: string
      platform:
        type: string
      summary:
        $ref: '#/definitions/monitoring.HealthcheckSummary'
      timeRange:
        $ref: '#/definitions/monitoring.TimeRange'
    type: object
  monitoring.HealthcheckRecord:
    properties:
      checkedAt:
        type: string
      errorMessage:
        type: string
      metadata:
        additionalProperties: true
        type: object
      responseTimeMs:
        type: integer
      status:
        $ref: '#/definitions/monitoring.HealthStatus'
    type: object
  monitoring.HealthcheckSummary:
    properties:
      avgResponseMs:
        type: number
      healthyCount:
        type: integer
      totalChecks:
        type: integer
      unhealthyCount:
        type: integer
      uptime:
        type: number
    type: object
  monitoring.NodeHealthStatusResponse:
    properties:
      endpoint:
        type: string
      errorMessage:
        type: string
      lastChecked:
        type: string
      metadata:
        additionalProperties: true
        type: object
      nodeId:
        type: integer
      nodeName:
        type: string
      platform:
        type: string
      responseTimeMs:
        type: integer
      status:
        $ref: '#/definitions/monitoring.HealthStatus'
    type: object
  monitoring.TimeRange:
    properties:
      endTime:
        type: string
      startTime:
        type: string
    type: object
  notifications.ProviderType:
    enum:
    - SMTP
    type: string
    x-enum-varnames:
    - ProviderTypeSMTP
  plugin.AvailablePluginsResponse:
    properties:
      last_updated:
        type: string
      plugins:
        items:
          $ref: '#/definitions/registry.PluginMetadata'
        type: array
    type: object
  plugin.ServiceStatus:
    properties:
      config:
        additionalProperties: true
        type: object
      containers:
        items:
          type: string
        type: array
      created_at:
        type: string
      depends_on:
        items:
          type: string
        type: array
      environment:
        additionalProperties:
          type: string
        type: object
      health:
        type: string
      image:
        type: string
      last_error:
        type: string
      name:
        type: string
      ports:
        items:
          type: string
        type: array
      running:
        type: boolean
      started_at:
        type: string
      state:
        type: string
      volumes:
        items:
          type: string
        type: array
    type: object
  pro.AcceptSharedNetworkResponse:
    properties:
      networkId:
        type: integer
      status:
        type: string
    type: object
  pro.ChaincodeDefinitionWithChaincode:
    properties:
      chaincode:
        $ref: '#/definitions/pro.FabricChaincode'
      definition:
        $ref: '#/definitions/pro.FabricChaincodeDefinition'
      proposal:
        $ref: '#/definitions/pro.ChaincodeProposal'
    type: object
  pro.ChaincodeProposal:
    properties:
      chaincodeAddress:
        type: string
      chaincodeDefId:
        description: Unique slug
        type: string
      channelName:
        type: string
      connectionId:
        description: ID of the connection used for this share
        type: integer
      createdAt:
        type: string
      dockerImage:
        type: string
      endorsementPolicy:
        type: string
      id:
        description: DB PK
        type: integer
      name:
        type: string
      networkId:
        type: integer
      sequence:
        type: integer
      sharedBy:
        description: Node ID and text of who shared this
        type: string
      sharedByNodeId:
        description: Node ID of who shared this
        type: string
      status:
        type: string
      updatedAt:
        type: string
      version:
        type: string
    type: object
  pro.ChaincodeShareRequest:
    description: Request to share a chaincode definition (sequence, version, docker
      image, etc)
    properties:
      chaincodeId:
        type: string
      dockerImage:
        type: string
      expiresAt:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      recipients:
        items:
          type: integer
        type: array
      sequence:
        type: integer
      version:
        type: string
    type: object
  pro.ChaincodeShareResponse:
    description: Response after sharing a chaincode definition
    properties:
      chaincodeId:
        type: string
      dockerImage:
        type: string
      expiresAt:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      recipients:
        items:
          type: integer
        type: array
      sequence:
        type: integer
      shareId:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  pro.ConfigProposalShareRequest:
    description: Request to share a config update proposal (channel name, config update
      bytes, etc)
    properties:
      channelName:
        type: string
      configUpdate:
        items:
          type: integer
        type: array
      expiresAt:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      proposalId:
        type: string
      recipients:
        items:
          type: integer
        type: array
    type: object
  pro.ConfigProposalShareResponse:
    description: Response after sharing a config update proposal
    properties:
      channelName:
        type: string
      configUpdate:
        items:
          type: integer
        type: array
      expiresAt:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      proposalId:
        type: string
      recipients:
        items:
          type: integer
        type: array
      shareId:
        type: string
      status:
        type: string
    type: object
  pro.CreateChaincodeProposalRequest:
    description: Request to create a new chaincode proposal
    properties:
      chaincode_address:
        type: string
      channel_name:
        type: string
      docker_image:
        type: string
      endorsement_policy:
        type: string
      name:
        type: string
      network_id:
        type: integer
      sequence:
        type: integer
      version:
        type: string
    type: object
  pro.FabricChaincode:
    properties:
      id:
        type: integer
      name:
        type: string
      networkId:
        type: integer
    type: object
  pro.FabricChaincodeDefinition:
    properties:
      chaincodeId:
        type: integer
      dockerImage:
        type: string
      endorsementPolicy:
        type: string
      id:
        type: integer
      proposalId:
        type: integer
      sequence:
        type: integer
      version:
        type: string
    type: object
  pro.GetKeysSharedWithMeResponse:
    properties:
      keys:
        items:
          $ref: '#/definitions/pro.SharedKeyInfo'
        type: array
      total:
        type: integer
    type: object
  pro.GovernanceEvent:
    properties:
      created_at:
        type: string
      data:
        type: string
      event_type:
        type: string
      id:
        type: string
      proposal_id:
        type: string
    type: object
  pro.KeyShareRequest:
    properties:
      expires_at:
        type: string
      key_id:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      peer_id:
        type: integer
    required:
    - key_id
    - peer_id
    type: object
  pro.KeyShareResponse:
    properties:
      expires_at:
        type: string
      key_id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      peer_id:
        type: integer
      share_id:
        type: string
      shared_at:
        type: string
      status:
        type: string
    type: object
  pro.ListProposalsResponse:
    properties:
      proposals:
        items:
          $ref: '#/definitions/pro.ProposalResponse'
        type: array
      total:
        type: integer
    type: object
  pro.ListSignaturesResponse:
    properties:
      signatures:
        items:
          $ref: '#/definitions/pro.SignatureResponse'
        type: array
      total:
        type: integer
    type: object
  pro.NetworkShareRequest:
    description: Request to share a network (genesis block, etc)
    properties:
      metadata:
        additionalProperties:
          type: string
        type: object
      networkId:
        type: integer
      recipients:
        items:
          type: integer
        type: array
    type: object
  pro.NetworkShareResponse:
    description: Response after sharing a network
    properties:
      genesisBlock:
        items:
          type: integer
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      networkId:
        type: integer
      recipients:
        items:
          type: integer
        type: array
      shareId:
        type: string
      status:
        type: string
    type: object
  pro.PrepareConfigUpdateRequest:
    properties:
      network_id:
        type: integer
      operations:
        items:
          $ref: '#/definitions/fabric.ConfigUpdateOperation'
        minItems: 1
        type: array
      proposal_type:
        type: string
    required:
    - network_id
    - operations
    - proposal_type
    type: object
  pro.PrepareConfigUpdateResponse:
    properties:
      channel_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      network_id:
        type: integer
      operations:
        items:
          $ref: '#/definitions/fabric.ConfigUpdateOperation'
        type: array
      preview_json:
        type: string
      status:
        type: string
    type: object
  pro.ProposalResponse:
    properties:
      channel_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      network_id:
        type: integer
      operations:
        items:
          $ref: '#/definitions/fabric.ConfigUpdateOperation'
        type: array
      preview_json:
        type: string
      signatures:
        items:
          $ref: '#/definitions/pro.SignatureResponse'
        type: array
      status:
        type: string
    type: object
  pro.ReceiveKeyRequest:
    properties:
      algorithm:
        type: string
      curve:
        type: string
      ethereum_address:
        description: Ethereum address derived from the public key
        type: string
      format:
        type: string
      key_size:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      public_key:
        type: string
      share_id:
        type: string
      shared_by:
        type: integer
      status:
        type: string
    type: object
  pro.ReceiveKeyResponse:
    properties:
      error:
        type: string
      key_id:
        type: string
      success:
        type: boolean
    type: object
  pro.RejectSharedNetworkResponse:
    properties:
      status:
        type: string
    type: object
  pro.ShareChaincodeProposalRequest:
    properties:
      recipients:
        items:
          type: integer
        type: array
    type: object
  pro.ShareChaincodeProposalResponse:
    properties:
      error:
        type: string
      success:
        type: boolean
    type: object
  pro.ShareProposalRequest:
    properties:
      connection_id:
        type: integer
    required:
    - connection_id
    type: object
  pro.ShareSignatureRequest:
    properties:
      connection_id:
        type: integer
      signature_id:
        type: integer
    required:
    - connection_id
    - signature_id
    type: object
  pro.SharedChaincodeDetailResponse:
    description: Detail response for a shared chaincode
    properties:
      chaincode:
        $ref: '#/definitions/pro.SharedChaincodeResponse'
    type: object
  pro.SharedChaincodeListResponse:
    description: List response for shared chaincodes
    properties:
      chaincodes:
        items:
          $ref: '#/definitions/pro.SharedChaincodeResponse'
        type: array
    type: object
  pro.SharedChaincodeResponse:
    description: Shared chaincode record
    properties:
      connectionId:
        description: ID of the connection used for this share
        type: integer
      createdAt:
        type: string
      dataJson: {}
      id:
        type: string
      recipients:
        items:
          type: integer
        type: array
      resourceId:
        type: string
      resourceType:
        type: string
      sharedBy:
        description: Node ID and text of who shared this
        type: string
      sharedByNodeId:
        description: Node ID of who shared this
        type: string
      status:
        type: string
    type: object
  pro.SharedKeyInfo:
    properties:
      algorithm:
        type: string
      curve:
        type: string
      ethereum_address:
        description: Ethereum address derived from the public key
        type: string
      expires_at:
        type: string
      format:
        type: string
      key_id:
        type: string
      key_size:
        type: integer
      metadata:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      public_key:
        type: string
      share_id:
        type: string
      shared_at:
        type: string
      shared_by:
        type: integer
      status:
        type: string
    type: object
  pro.SharedNetworkDetailResponse:
    description: Detail response for a shared network
    properties:
      network:
        $ref: '#/definitions/pro.SharedNetworkResponse'
    type: object
  pro.SharedNetworkListResponse:
    description: List response for shared networks
    properties:
      networks:
        items:
          $ref: '#/definitions/pro.SharedNetworkResponse'
        type: array
    type: object
  pro.SharedNetworkResponse:
    description: Shared network record (can be Fabric or Besu)
    properties:
      connectionId:
        description: ID of the connection used for this share
        type: integer
      createdAt:
        type: string
      dataJson: {}
      id:
        type: string
      recipients:
        items:
          type: integer
        type: array
      resourceId:
        type: string
      resourceType:
        type: string
      sharedBy:
        description: Node ID and text of who shared this
        type: string
      sharedByNodeId:
        description: Node ID of who shared this
        type: string
      status:
        type: string
    type: object
  pro.SignConfigUpdateRequest:
    properties:
      msp_id:
        type: string
    required:
    - msp_id
    type: object
  pro.SignConfigUpdateResponse:
    properties:
      id:
        type: integer
      msp_id:
        type: string
      proposal_id:
        type: string
      signed_at:
        type: string
      signed_by:
        type: integer
    type: object
  pro.SignatureResponse:
    properties:
      id:
        type: integer
      msp_id:
        type: string
      proposal_id:
        type: string
      signed_at:
        type: string
      signed_by:
        type: string
    type: object
  pro.SubmitConfigUpdateResponse:
    properties:
      proposal_id:
        type: string
      tx_id:
        type: string
    type: object
  projects.CommitDetailAPI:
    properties:
      added:
        items:
          type: string
        type: array
      author:
        type: string
      hash:
        type: string
      message:
        type: string
      modified:
        items:
          type: string
        type: array
      parent:
        type: string
      removed:
        items:
          type: string
        type: array
      timestamp:
        type: string
    type: object
  projects.CommitWithFileChangesAPI:
    properties:
      added:
        items:
          type: string
        type: array
      author:
        type: string
      hash:
        type: string
      message:
        type: string
      modified:
        items:
          type: string
        type: array
      parent:
        type: string
      removed:
        items:
          type: string
        type: array
      timestamp:
        type: string
    type: object
  projects.CommitsListResponse:
    properties:
      commits:
        items:
          $ref: '#/definitions/projects.CommitWithFileChangesAPI'
        type: array
    type: object
  projects.CreateProjectRequest:
    properties:
      boilerplate:
        example: go-basic
        type: string
      description:
        example: A sample project
        type: string
      endorsementPolicy:
        example: OR('Org1MSP.member','Org2MSP.member')
        type: string
      name:
        example: myproject
        type: string
      networkId:
        example: 1
        type: integer
    required:
    - name
    type: object
  projects.CreateProjectResponse:
    properties:
      boilerplate:
        example: go-basic
        type: string
      containerPort:
        type: integer
      description:
        example: A sample project
        type: string
      endorsementPolicy:
        example: OR('Org1MSP.member','Org2MSP.member')
        type: string
      id:
        example: 1
        type: integer
      name:
        example: myproject
        type: string
      networkId:
        type: integer
      slug:
        example: myproject-abc12
        type: string
    type: object
  projects.HandlerRequest:
    properties:
      args:
        example:
        - '["asset1"'
        - '"100"]'
        items:
          type: string
        type: array
      function:
        example: createAsset
        type: string
      keyId:
        example: 1
        type: integer
      orgId:
        example: 1
        type: integer
    type: object
  projects.HandlerResponse:
    properties:
      args:
        items:
          type: string
        type: array
      blockNumber:
        type: integer
      chaincode:
        type: string
      channel:
        type: string
      code:
        type: integer
      function:
        type: string
      message:
        type: string
      project:
        type: string
      result: {}
      status:
        type: string
      transactionId:
        type: string
    type: object
  projects.ListProjectsResponse:
    properties:
      projects:
        items:
          $ref: '#/definitions/projects.Project'
        type: array
    type: object
  projects.Project:
    properties:
      boilerplate:
        example: go-basic
        type: string
      containerPort:
        type: integer
      description:
        example: A sample project
        type: string
      endorsementPolicy:
        example: OR('Org1MSP.member','Org2MSP.member')
        type: string
      id:
        example: 1
        type: integer
      lastStartedAt:
        type: string
      lastStoppedAt:
        type: string
      name:
        example: myproject
        type: string
      networkId:
        type: integer
      networkName:
        type: string
      networkPlatform:
        type: string
      slug:
        example: myproject-abc12
        type: string
      status:
        example: running
        type: string
    type: object
  projects.UpdateProjectEndorsementPolicyRequest:
    properties:
      endorsementPolicy:
        example: OR('Org1MSP.member','Org2MSP.member')
        type: string
    required:
    - endorsementPolicy
    type: object
  registry.PluginMetadata:
    properties:
      author:
        type: string
      created:
        type: string
      description:
        type: string
      downloads:
        type: integer
      hash:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      license:
        type: string
      name:
        type: string
      rating:
        type: number
      raw_yaml:
        type: string
      source:
        type: string
      tags:
        items:
          type: string
        type: array
      updated:
        type: string
      version:
        type: string
    type: object
  response.DetailedErrorResponse:
    properties:
      details:
        additionalProperties: true
        type: object
      error:
        type: string
      message:
        type: string
    type: object
  response.DetailedResponse:
    additionalProperties: true
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.NodeCreationErrorDetails:
    properties:
      node:
        description: |-
          Node contains the partial node data (only set if NodeCreated is true)
          This can be of type interface{} to accept any node type (FabricPeer, FabricOrderer, BesuNode)
      node_created:
        description: NodeCreated indicates whether the node was created in the database
        type: boolean
      node_id:
        description: NodeID is the database ID of the node (only set if NodeCreated
          is true)
        type: integer
      stage:
        description: Stage indicates at which stage the failure occurred (validation,
          db_insert, initialization, deployment_config, startup, connectivity)
        type: string
    type: object
  response.NodeCreationErrorResponse:
    properties:
      details:
        $ref: '#/definitions/response.NodeCreationErrorDetails'
      error:
        type: string
      message:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  service.BesuNodeDefaults:
    properties:
      accountsAllowList:
        description: Permissions configuration
        items:
          type: string
        type: array
      environmentVariables:
        additionalProperties:
          type: string
        type: object
      externalIp:
        type: string
      hostAllowList:
        type: string
      internalIp:
        type: string
      jwtAuthenticationAlgorithm:
        type: string
      jwtEnabled:
        description: JWT Authentication configuration
        type: boolean
      jwtPublicKeyContent:
        type: string
      metricsEnabled:
        description: Metrics configuration
        type: boolean
      metricsHost:
        type: string
      metricsPort:
        type: integer
      metricsProtocol:
        type: string
      minGasPrice:
        description: Gas and access control configuration
        type: integer
      mode:
        $ref: '#/definitions/service.Mode'
      nodesAllowList:
        items:
          type: string
        type: array
      p2pHost:
        type: string
      p2pPort:
        type: integer
      rpcHost:
        type: string
      rpcPort:
        type: integer
    type: object
  service.BesuNodeProperties:
    properties:
      accountsAllowList:
        description: Permissions configuration
        items:
          type: string
        type: array
      bootNodes:
        items:
          type: string
        type: array
      enodeUrl:
        type: string
      externalIp:
        type: string
      externalNodeId:
        type: integer
      hostAllowList:
        type: string
      internalIp:
        type: string
      jwtAuthenticationAlgorithm:
        type: string
      jwtEnabled:
        description: JWT Authentication configuration
        type: boolean
      jwtPublicKeyContent:
        type: string
      keyId:
        type: integer
      metricsEnabled:
        description: Metrics configuration
        type: boolean
      metricsHost:
        type: string
      metricsPort:
        type: integer
      metricsProtocol:
        type: string
      minGasPrice:
        description: Gas and access control configuration
        type: integer
      mode:
        type: string
      networkId:
        type: integer
      nodesAllowList:
        items:
          type: string
        type: array
      p2pHost:
        description: Add deployment config fields
        type: string
      p2pPort:
        type: integer
      rpcHost:
        type: string
      rpcPort:
        type: integer
      version:
        type: string
    type: object
  service.BesuReadinessInfo:
    properties:
      error:
        type: string
      installed:
        type: boolean
      path:
        type: string
      version:
        type: string
    type: object
  service.BesuReadinessResponse:
    properties:
      arch:
        type: string
      besu:
        $ref: '#/definitions/service.BesuReadinessInfo'
      errors:
        items:
          type: string
        type: array
      java:
        $ref: '#/definitions/service.JavaReadinessInfo'
      platform:
        type: string
      ready:
        type: boolean
      warnings:
        items:
          type: string
        type: array
    type: object
  service.BesuVersionVerificationRequest:
    properties:
      version:
        type: string
    type: object
  service.BesuVersionVerificationResponse:
    properties:
      actualVersion:
        type: string
      binaryPath:
        type: string
      downloaded:
        type: boolean
      error:
        type: string
      success:
        type: boolean
      version:
        type: string
    type: object
  service.ChannelHeightResponse:
    properties:
      channelId:
        type: string
      height:
        type: integer
      nodeType:
        type: string
    type: object
  service.CreateSettingParams:
    properties:
      config:
        $ref: '#/definitions/service.SettingConfig'
    type: object
  service.ExternalBesuNodeDTO:
    properties:
      enodeUrl:
        type: string
      externalNodeId:
        type: integer
      id:
        type: integer
      metricsEnabled:
        type: boolean
      metricsPort:
        type: integer
      name:
        type: string
      p2pHost:
        type: string
      p2pPort:
        type: integer
      version:
        type: string
    type: object
  service.ExternalFabricOrdererDTO:
    properties:
      externalEndpoint:
        type: string
      externalNodeId:
        type: integer
      id:
        type: integer
      mspId:
        type: string
      name:
        type: string
      signCertificate:
        type: string
      tlsCertificate:
        type: string
      version:
        type: string
    type: object
  service.ExternalFabricPeerDTO:
    properties:
      externalEndpoint:
        type: string
      externalNodeId:
        type: integer
      id:
        type: integer
      mspId:
        type: string
      name:
        type: string
      signCertificate:
        type: string
      tlsCertificate:
        type: string
      version:
        type: string
    type: object
  service.ExternalOrganizationDTO:
    properties:
      id:
        type: integer
      mspId:
        type: string
      signCertificate:
        type: string
      tlsCertificate:
        type: string
    type: object
  service.FabricOrdererProperties:
    properties:
      adminAddress:
        type: string
      domainNames:
        items:
          type: string
        type: array
      externalEndpoint:
        type: string
      externalNodeId:
        type: integer
      listenAddress:
        type: string
      mode:
        type: string
      mspId:
        type: string
      operationsAddress:
        type: string
      organizationId:
        type: integer
      signCaCert:
        type: string
      signCert:
        description: Add certificate information
        type: string
      signKeyId:
        description: Add deployment config fields
        type: integer
      tlsCaCert:
        type: string
      tlsCert:
        type: string
      tlsKeyId:
        type: integer
      version:
        type: string
    type: object
  service.FabricPeerProperties:
    properties:
      addressOverrides:
        items:
          $ref: '#/definitions/types.AddressOverride'
        type: array
      chaincodeAddress:
        type: string
      domainNames:
        items:
          type: string
        type: array
      eventsAddress:
        type: string
      externalEndpoint:
        type: string
      externalNodeId:
        type: integer
      listenAddress:
        type: string
      mode:
        type: string
      mspId:
        type: string
      operationsAddress:
        type: string
      organizationId:
        type: integer
      signCaCert:
        type: string
      signCert:
        description: Add certificate information
        type: string
      signKeyId:
        description: Add deployment config fields
        type: integer
      tlsCaCert:
        type: string
      tlsCert:
        type: string
      tlsKeyId:
        type: integer
      version:
        type: string
    type: object
  service.JavaReadinessInfo:
    properties:
      error:
        type: string
      installed:
        type: boolean
      path:
        type: string
      version:
        type: string
    type: object
  service.Mode:
    enum:
    - service
    - docker
    type: string
    x-enum-varnames:
    - ModeService
    - ModeDocker
  service.NetworkMap:
    properties:
      networkId:
        type: integer
      nodes:
        items:
          $ref: '#/definitions/service.NodeMapInfo'
        type: array
      platform:
        type: string
    type: object
  service.NetworkNode:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      networkId:
        type: integer
      node:
        $ref: '#/definitions/service.NodeResponse'
      nodeId:
        type: integer
      role:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  service.NodeDefaults:
    properties:
      adminAddress:
        type: string
      chaincodeAddress:
        type: string
      containerName:
        type: string
      errorLogPath:
        type: string
      eventsAddress:
        type: string
      externalEndpoint:
        type: string
      listenAddress:
        type: string
      logPath:
        type: string
      mode:
        $ref: '#/definitions/service.Mode'
      operationsListenAddress:
        type: string
      serviceName:
        type: string
    type: object
  service.NodeMapInfo:
    properties:
      error:
        type: string
      healthy:
        type: boolean
      host:
        type: string
      id:
        description: host:port by default
        type: string
      latency:
        description: e.g., "1.2ms"
        type: string
      latencyNs:
        description: e.g., 1
        type: integer
      mine:
        type: boolean
      mspId:
        description: Only for fabric and if mine
        type: string
      nodeId:
        description: Only if mine
        type: integer
      port:
        type: integer
      role:
        description: peer, orderer, validator, etc.
        type: string
    type: object
  service.NodeResponse:
    properties:
      besuNode:
        $ref: '#/definitions/service.BesuNodeProperties'
      createdAt:
        type: string
      endpoint:
        type: string
      errorMessage:
        type: string
      fabricOrderer:
        $ref: '#/definitions/service.FabricOrdererProperties'
      fabricPeer:
        allOf:
        - $ref: '#/definitions/service.FabricPeerProperties'
        description: Type-specific fields
      id:
        type: integer
      name:
        type: string
      nodeType:
        $ref: '#/definitions/types.NodeType'
      platform:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  service.NodesDefaultsResult:
    properties:
      availableAddresses:
        items:
          type: string
        type: array
      orderers:
        items:
          $ref: '#/definitions/service.NodeDefaults'
        type: array
      peers:
        items:
          $ref: '#/definitions/service.NodeDefaults'
        type: array
    type: object
  service.NotificationRecord:
    properties:
      created_at:
        type: string
      event_data:
        description: JSON data as stored in DB
        items:
          type: integer
        type: array
      event_type:
        type: string
      id:
        type: string
      is_read:
        type: boolean
      node_id:
        type: string
      read_at:
        type: string
    type: object
  service.OrganizationKeyDTO:
    properties:
      certificate:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      identityType:
        type: string
      keyAlgorithm:
        type: string
      keyExpiresAt:
        type: string
      keyId:
        type: integer
      keyName:
        type: string
      keyPurpose:
        type: string
      keyStatus:
        type: string
      organizationId:
        type: integer
      publicKey:
        type: string
    type: object
  service.QbftPendingVotes:
    additionalProperties:
      type: boolean
    type: object
  service.QbftSignerMetric:
    properties:
      address:
        type: string
      lastProposedBlockNumber:
        type: string
      proposedBlockCount:
        type: string
    type: object
  service.Setting:
    properties:
      config:
        $ref: '#/definitions/service.SettingConfig'
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  service.SettingConfig:
    properties:
      besuTemplateCMD:
        type: string
      defaultNodeExposeIP:
        type: string
      demoMode:
        description: Enable demo mode with anonymous read-only access
        type: boolean
      healthCheckInterval:
        description: Duration string (e.g., "1m", "30s")
        type: string
      healthCheckRetention:
        description: Days to keep healthcheck records
        type: integer
      healthCheckTimeout:
        description: Timeout for individual checks
        type: string
      ordererTemplateCMD:
        type: string
      peerTemplateCMD:
        type: string
    type: object
  templates.ApplyTemplateRequest:
    properties:
      context:
        additionalProperties: true
        description: Additional context like networkID, orgID, etc.
        type: object
      override_config:
        $ref: '#/definitions/templates.TemplateConfig'
      template_id:
        type: integer
      variables:
        additionalProperties: true
        type: object
    required:
    - template_id
    type: object
  templates.CreateTemplateRequest:
    properties:
      config:
        $ref: '#/definitions/templates.TemplateConfig'
      description:
        maxLength: 500
        type: string
      is_default:
        type: boolean
      name:
        maxLength: 100
        minLength: 1
        type: string
      node_type:
        $ref: '#/definitions/templates.NodeType'
      platform:
        $ref: '#/definitions/templates.Platform'
      tags:
        items:
          type: string
        type: array
      variables:
        items:
          $ref: '#/definitions/templates.TemplateVariable'
        type: array
      version:
        type: string
    required:
    - config
    - name
    - node_type
    - platform
    - version
    type: object
  templates.NodeType:
    enum:
    - peer
    - orderer
    - fabric_network
    - fullnode
    - validator
    - archive
    - besu_network
    - bootstrap
    - relay
    - collator
    - sentry
    type: string
    x-enum-comments:
      NodeTypeBesuNetwork: Network orchestration template
      NodeTypeFabricNetwork: Network orchestration template
    x-enum-descriptions:
    - ""
    - ""
    - Network orchestration template
    - ""
    - ""
    - ""
    - Network orchestration template
    - ""
    - ""
    - ""
    - ""
    x-enum-varnames:
    - NodeTypeFabricPeer
    - NodeTypeFabricOrderer
    - NodeTypeFabricNetwork
    - NodeTypeBesuFullNode
    - NodeTypeBesuValidator
    - NodeTypeBesuArchive
    - NodeTypeBesuNetwork
    - NodeTypeBootstrap
    - NodeTypeRelay
    - NodeTypeCollator
    - NodeTypeSentry
  templates.Platform:
    enum:
    - FABRIC
    - BESU
    - ETHEREUM
    - BITCOIN
    - POLKADOT
    - COSMOS
    type: string
    x-enum-varnames:
    - PlatformFabric
    - PlatformBesu
    - PlatformEthereum
    - PlatformBitcoin
    - PlatformPolkadot
    - PlatformCosmos
  templates.Template:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/templates.TemplateConfig'
        description: Configuration (stored as JSON in the database)
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_default:
        type: boolean
      name:
        type: string
      node_type:
        $ref: '#/definitions/templates.NodeType'
      platform:
        $ref: '#/definitions/templates.Platform'
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
      usage_count:
        type: integer
      variables:
        items:
          $ref: '#/definitions/templates.TemplateVariable'
        type: array
      version:
        type: string
    type: object
  templates.TemplateConfig:
    additionalProperties: true
    type: object
  templates.TemplateExportData:
    properties:
      export_version:
        type: string
      exported_at:
        type: string
      template:
        $ref: '#/definitions/templates.Template'
    type: object
  templates.TemplateVariable:
    properties:
      default: {}
      description:
        type: string
      name:
        type: string
      required:
        type: boolean
      type:
        description: '"string", "number", "boolean", "array", "object"'
        type: string
      validation:
        $ref: '#/definitions/templates.Validation'
    type: object
  templates.UpdateTemplateRequest:
    properties:
      config:
        $ref: '#/definitions/templates.TemplateConfig'
      description:
        maxLength: 500
        type: string
      is_default:
        type: boolean
      name:
        maxLength: 100
        minLength: 1
        type: string
      tags:
        items:
          type: string
        type: array
      variables:
        items:
          $ref: '#/definitions/templates.TemplateVariable'
        type: array
      version:
        type: string
    required:
    - config
    - name
    - version
    type: object
  templates.Validation:
    properties:
      enum:
        items:
          type: string
        type: array
      max:
        type: number
      max_length:
        type: integer
      min:
        type: number
      min_length:
        type: integer
      pattern:
        type: string
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    format: int64
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
  troubleshooting.CertificateValidationRequest:
    properties:
      certificate:
        description: PEM encoded certificate
        type: string
      dns_names:
        description: Optional DNS names to verify
        items:
          type: string
        type: array
      root_ca:
        description: Optional root CA to validate against
        type: string
    type: object
  troubleshooting.CertificateValidationResponse:
    properties:
      dns_names:
        items:
          type: string
        type: array
      errors:
        items:
          type: string
        type: array
      ip_addresses:
        items:
          type: string
        type: array
      is_ca:
        type: boolean
      issuer:
        type: string
      key_usage:
        items:
          type: string
        type: array
      not_after:
        type: string
      not_before:
        type: string
      serial_number:
        type: string
      subject:
        type: string
      valid:
        type: boolean
      warnings:
        items:
          type: string
        type: array
    type: object
  troubleshooting.ConnectionTestRequest:
    properties:
      endpoint:
        type: string
      headers:
        additionalProperties:
          type: string
        type: object
      protocol:
        description: tcp, http, https, grpc, grpcs
        type: string
      timeout:
        description: seconds, default 10
        type: integer
    type: object
  troubleshooting.ConnectionTestResponse:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      endpoint:
        type: string
      error:
        type: string
      protocol:
        type: string
      response_time_ms:
        type: integer
      status_code:
        type: integer
      success:
        type: boolean
      tls_info:
        $ref: '#/definitions/troubleshooting.TLSInfo'
    type: object
  troubleshooting.PingRequest:
    properties:
      count:
        description: Number of pings, default 4
        type: integer
      host:
        type: string
      timeout:
        description: seconds per ping, default 5
        type: integer
    type: object
  troubleshooting.PingResponse:
    properties:
      avg_rtt_ms:
        type: integer
      error:
        type: string
      host:
        type: string
      max_rtt_ms:
        type: integer
      min_rtt_ms:
        type: integer
      packet_loss:
        type: number
      packets_recv:
        type: integer
      packets_sent:
        type: integer
      reachable:
        type: boolean
      resolved_ip:
        type: string
    type: object
  troubleshooting.PortCheckRequest:
    properties:
      host:
        type: string
      port:
        type: integer
      timeout:
        description: seconds, default 5
        type: integer
    type: object
  troubleshooting.PortCheckResponse:
    properties:
      error:
        type: string
      host:
        type: string
      open:
        type: boolean
      port:
        type: integer
      reachable:
        type: boolean
    type: object
  troubleshooting.TLSInfo:
    properties:
      cert_expiry:
        type: string
      certificate_valid:
        type: boolean
      cipher_suite:
        type: string
      issuer:
        type: string
      server_name:
        type: string
      version:
        type: string
    type: object
  types.AddJobRequest:
    properties:
      job_name:
        type: string
      metrics_path:
        type: string
      scrape_interval:
        type: string
      targets:
        items:
          type: string
        type: array
    required:
    - job_name
    - targets
    type: object
  types.AddressOverride:
    properties:
      from:
        type: string
      tlsCACert:
        type: string
      to:
        type: string
    type: object
  types.BesuNodeConfig:
    properties:
      accountsAllowList:
        description: Permissions configuration
        items:
          type: string
        type: array
      bootNodes:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      externalIp:
        type: string
      hostAllowList:
        type: string
      internalIp:
        type: string
      jwtAuthenticationAlgorithm:
        type: string
      jwtEnabled:
        description: JWT Authentication configuration
        type: boolean
      jwtPublicKeyContent:
        type: string
      keyId:
        type: integer
      metricsEnabled:
        type: boolean
      metricsPort:
        type: integer
      metricsProtocol:
        type: string
      minGasPrice:
        description: Gas and access control configuration
        type: integer
      mode:
        description: '@Description The deployment mode (service or docker)'
        example: service
        type: string
      networkId:
        type: integer
      nodesAllowList:
        items:
          type: string
        type: array
      p2pHost:
        type: string
      p2pPort:
        type: integer
      rpcHost:
        type: string
      rpcPort:
        type: integer
      type:
        description: '@Description The type of node (fabric-peer, fabric-orderer,
          besu)'
        example: fabric-peer
        type: string
      version:
        type: string
    required:
    - externalIp
    - internalIp
    - keyId
    - networkId
    - p2pHost
    - p2pPort
    - rpcHost
    - rpcPort
    type: object
  types.BlockchainPlatform:
    enum:
    - FABRIC
    - BESU
    type: string
    x-enum-varnames:
    - PlatformFabric
    - PlatformBesu
  types.CustomQueryRequest:
    properties:
      end:
        type: string
      query:
        type: string
      start:
        type: string
      step:
        type: string
    required:
    - query
    type: object
  types.Dashboard:
    properties:
      description:
        description: Description provides a description of what the dashboard shows
        type: string
      name:
        description: Name is the display name of the dashboard
        type: string
      panels:
        description: Panels defines the individual metric panels in this dashboard
        items:
          $ref: '#/definitions/types.Panel'
        type: array
      refresh_interval:
        description: RefreshInterval defines how often the dashboard should refresh
          (e.g., "30s", "1m")
        type: string
    type: object
  types.DeployPrometheusRequest:
    properties:
      deployment_mode:
        $ref: '#/definitions/common.DeploymentMode'
      docker_config:
        $ref: '#/definitions/types.DockerDeployConfig'
      prometheus_port:
        type: integer
      prometheus_version:
        type: string
      scrape_interval:
        type: integer
    required:
    - prometheus_port
    - prometheus_version
    - scrape_interval
    type: object
  types.DeploymentModeInfo:
    properties:
      available:
        type: boolean
      description:
        type: string
      mode:
        type: string
    type: object
  types.DeploymentModesResponse:
    properties:
      modes:
        items:
          $ref: '#/definitions/types.DeploymentModeInfo'
        type: array
      runningInDocker:
        type: boolean
    type: object
  types.DeploymentStatus:
    properties:
      error:
        type: string
      parameters:
        additionalProperties: true
        type: object
      projectName:
        type: string
      services:
        items:
          $ref: '#/definitions/types.Service'
        type: array
      startedAt:
        type: string
      status:
        type: string
      stoppedAt:
        type: string
    type: object
  types.DockerCompose:
    properties:
      contents:
        type: string
    type: object
  types.DockerDeployConfig:
    properties:
      network_mode:
        $ref: '#/definitions/common.NetworkMode'
    type: object
  types.Documentation:
    properties:
      examples:
        description: Examples contains example configurations and usage
        items:
          $ref: '#/definitions/types.Example'
        type: array
      readme:
        description: README contains the main documentation for the plugin
        type: string
      troubleshooting:
        description: Troubleshooting contains common issues and their solutions
        items:
          $ref: '#/definitions/types.TroubleshootingItem'
        type: array
    type: object
  types.Example:
    properties:
      description:
        type: string
      name:
        type: string
      parameters:
        additionalProperties: true
        type: object
    type: object
  types.FabricOrdererConfig:
    properties:
      addressOverrides:
        description: '@Description Address overrides for the orderer'
        items:
          $ref: '#/definitions/types.AddressOverride'
        type: array
      adminAddress:
        type: string
      autoRenewalDays:
        description: '@Description Days before expiration to trigger auto-renewal
          (default: 30)'
        type: integer
      autoRenewalEnabled:
        description: '@Description Enable automatic certificate renewal before expiration'
        type: boolean
      certificateExpiration:
        description: '@Description Certificate expiration in days (default: 365)'
        type: integer
      domainNames:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      externalEndpoint:
        type: string
      listenAddress:
        type: string
      mode:
        description: '@Description The deployment mode (service or docker)'
        example: service
        type: string
      mspId:
        type: string
      name:
        type: string
      operationsListenAddress:
        type: string
      organizationId:
        type: integer
      type:
        description: '@Description The type of node (fabric-peer, fabric-orderer,
          besu)'
        example: fabric-peer
        type: string
      version:
        description: Fabric version to use
        type: string
    required:
    - mspId
    - name
    - organizationId
    type: object
  types.FabricPeerConfig:
    description: Configuration for creating a new Fabric peer node
    properties:
      addressOverrides:
        description: '@Description Address overrides for the peer'
        items:
          $ref: '#/definitions/types.AddressOverride'
        type: array
      autoRenewalDays:
        description: '@Description Days before expiration to trigger auto-renewal
          (default: 30)'
        example: 30
        type: integer
      autoRenewalEnabled:
        description: '@Description Enable automatic certificate renewal before expiration'
        example: false
        type: boolean
      certificateExpiration:
        description: '@Description Certificate expiration in days (default: 365)'
        example: 365
        type: integer
      chaincodeAddress:
        description: '@Description Chaincode listen address'
        example: 0.0.0.0:7052
        type: string
      domainNames:
        description: '@Description Domain names for the peer'
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        description: '@Description Environment variables for the peer'
        type: object
      eventsAddress:
        description: '@Description Events listen address'
        example: 0.0.0.0:7053
        type: string
      externalEndpoint:
        description: '@Description External endpoint for the peer'
        example: peer0.org1.example.com:7051
        type: string
      listenAddress:
        description: '@Description Listen address for the peer'
        example: 0.0.0.0:7051
        type: string
      mode:
        description: '@Description The deployment mode (service or docker)'
        example: service
        type: string
      mspId:
        description: '@Description MSP ID for the organization'
        example: Org1MSP
        type: string
      name:
        description: '@Description Name of the peer node'
        example: peer0-org1
        type: string
      operationsListenAddress:
        description: '@Description Operations listen address'
        example: 0.0.0.0:9443
        type: string
      ordererAddressOverrides:
        description: '@Description Orderer address overrides for the peer'
        items:
          $ref: '#/definitions/types.OrdererAddressOverride'
        type: array
      organizationId:
        description: '@Description Organization ID that owns this peer'
        example: 1
        type: integer
      type:
        description: '@Description The type of node (fabric-peer, fabric-orderer,
          besu)'
        example: fabric-peer
        type: string
      version:
        description: '@Description Fabric version to use'
        example: 2.2.0
        type: string
    required:
    - mspId
    - name
    - organizationId
    type: object
  types.FilterOperator:
    enum:
    - eq
    - ne
    - contains
    - not_contains
    - starts_with
    - ends_with
    - regex
    - not_regex
    - gt
    - lt
    - gte
    - lte
    - in
    - not_in
    type: string
    x-enum-comments:
      FilterOperatorEquals: equals
      FilterOperatorGreaterEqual: greater than or equal
      FilterOperatorGreaterThan: greater than
      FilterOperatorIn: in list
      FilterOperatorLessEqual: less than or equal
      FilterOperatorLessThan: less than
      FilterOperatorNotEquals: not equals
      FilterOperatorNotIn: not in list
    x-enum-descriptions:
    - equals
    - not equals
    - ""
    - ""
    - ""
    - ""
    - ""
    - ""
    - greater than
    - less than
    - greater than or equal
    - less than or equal
    - in list
    - not in list
    x-enum-varnames:
    - FilterOperatorEquals
    - FilterOperatorNotEquals
    - FilterOperatorContains
    - FilterOperatorNotContains
    - FilterOperatorStartsWith
    - FilterOperatorEndsWith
    - FilterOperatorRegex
    - FilterOperatorNotRegex
    - FilterOperatorGreaterThan
    - FilterOperatorLessThan
    - FilterOperatorGreaterEqual
    - FilterOperatorLessEqual
    - FilterOperatorIn
    - FilterOperatorNotIn
  types.FilteredMetricsResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/types.MetricFilter'
        type: array
      data: {}
      metadata:
        additionalProperties: true
        type: object
      pagination:
        $ref: '#/definitions/types.PaginationInfo'
      status:
        type: string
    type: object
  types.FilteredQueryRequest:
    properties:
      end:
        type: string
      filters:
        items:
          $ref: '#/definitions/types.MetricFilter'
        type: array
      limit:
        description: Limit results
        type: integer
      offset:
        description: Offset for pagination
        type: integer
      query:
        type: string
      start:
        type: string
      step:
        type: string
    required:
    - query
    type: object
  types.LabelValuesResponse:
    properties:
      data:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  types.MessageResponse:
    properties:
      message:
        type: string
    type: object
  types.Metadata:
    properties:
      author:
        type: string
      description:
        type: string
      license:
        type: string
      name:
        type: string
      repository:
        type: string
      tags:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  types.MetricFilter:
    properties:
      operator:
        allOf:
        - $ref: '#/definitions/types.FilterOperator'
        description: e.g., "eq", "ne", "contains", "regex"
      property:
        description: e.g., "status", "job", "instance", "__name__"
        type: string
      value:
        description: The value to filter by
    required:
    - operator
    - property
    - value
    type: object
  types.Metrics:
    properties:
      dashboard:
        description: Dashboard defines the dashboard configuration for visualizing
          metrics
        items:
          $ref: '#/definitions/types.Dashboard'
        type: array
      endpoints:
        description: Endpoints defines the metrics endpoints exposed by the plugin
        items:
          $ref: '#/definitions/types.MetricsEndpoint'
        type: array
    type: object
  types.MetricsDataResponse:
    properties:
      data: {}
      status:
        type: string
    type: object
  types.MetricsEndpoint:
    properties:
      interval:
        description: Interval is the scrape interval for this endpoint (optional,
          uses global if not set)
        type: string
      jobName:
        description: JobName is the Prometheus job name (optional, auto-generated
          if not set)
        type: string
      path:
        description: 'Path is the HTTP path where metrics are served (default: /metrics)'
        type: string
      port:
        description: Port is the port number where metrics are exposed (supports templating)
        type: string
      service:
        description: Service is the name of the docker-compose service that exposes
          metrics
        type: string
    type: object
  types.NodeType:
    enum:
    - FABRIC_PEER
    - FABRIC_ORDERER
    - BESU_FULLNODE
    type: string
    x-enum-varnames:
    - NodeTypeFabricPeer
    - NodeTypeFabricOrderer
    - NodeTypeBesuFullnode
  types.OrdererAddressOverride:
    properties:
      from:
        description: '@Description Original orderer address'
        type: string
      tlsCACert:
        description: '@Description TLS CA certificate in PEM format'
        type: string
      to:
        description: '@Description New orderer address to use'
        type: string
    required:
    - from
    - tlsCACert
    - to
    type: object
  types.PaginationInfo:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  types.Panel:
    properties:
      chart_type:
        description: ChartType defines the visualization type (line, histogram, gauge,
          etc.)
        type: string
      metric:
        description: Metric is the metric name/query to display
        type: string
      refresh_interval:
        description: RefreshInterval defines how often this panel should refresh
        type: string
      show_rate:
        description: ShowRate defines whether to show the rate of the metric
        type: boolean
      time_range:
        description: TimeRange defines the time range for the panel (e.g., "1h", "24h")
        type: string
      title:
        description: Title is the display title of the panel
        type: string
    type: object
  types.ParameterSpec:
    properties:
      default:
        type: string
      description:
        type: string
      enum:
        items:
          type: string
        type: array
      type:
        type: string
      x-source:
        $ref: '#/definitions/types.XSourceType'
    type: object
  types.PrometheusDefaultsResponse:
    properties:
      available_ports:
        items:
          type: integer
        type: array
      deployment_mode:
        $ref: '#/definitions/common.DeploymentMode'
      docker_config:
        $ref: '#/definitions/types.DockerDeployConfig'
      prometheus_port:
        type: integer
      prometheus_version:
        type: string
      scrape_interval:
        type: integer
    type: object
  types.RefreshPrometheusRequest:
    properties:
      deployment_mode:
        $ref: '#/definitions/common.DeploymentMode'
      docker_config:
        $ref: '#/definitions/types.DockerDeployConfig'
      prometheus_port:
        type: integer
      prometheus_version:
        type: string
      scrape_interval:
        type: integer
    type: object
  types.Service:
    properties:
      createdAt:
        type: string
      image:
        type: string
      name:
        type: string
      ports:
        items:
          $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Port'
        type: array
      status:
        type: string
    type: object
  types.Spec:
    properties:
      dockerCompose:
        $ref: '#/definitions/types.DockerCompose'
      documentation:
        $ref: '#/definitions/types.Documentation'
      metrics:
        $ref: '#/definitions/types.Metrics'
      parameters:
        $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Parameters'
    type: object
  types.TroubleshootingItem:
    properties:
      description:
        type: string
      problem:
        type: string
      solution:
        type: string
    type: object
  types.XSourceType:
    enum:
    - fabric-peer
    - key
    - fabric-org
    - fabric-network
    - fabric-key
    type: string
    x-enum-varnames:
    - XSourceFabricPeer
    - XSourceKey
    - XSourceFabricOrg
    - XSourceFabricNetwork
    - XSourceFabricKey
info:
  contact:
    email: support@chainlaunch.dev
    name: API Support
    url: http://chainlaunch.dev/support
  description: ChainLaunch API provides services for managing blockchain networks
    and cryptographic keys
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ChainLaunch API
  version: "1.0"
paths:
  /.well-known/node_jwk.json:
    get:
      description: Serves the node's public key in JWK (JSON Web Key) format according
        to RFC 7517
      operationId: getNodePublicKeyJWK
      produces:
      - application/json
      responses:
        "200":
          description: JWK containing the public key
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get node's public key as JWK
      tags:
      - NodeSharing
  /ai/{projectId}/chat:
    post:
      consumes:
      - application/json
      description: Stream a conversation with the AI assistant using Server-Sent Events
        (SSE)
      operationId: chatWithAIChatAssistant
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Chat request containing project ID and messages
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ai.ChatRequest'
      produces:
      - text/event-stream
      responses:
        "200":
          description: SSE stream of chat responses
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Chat with AI assistant
      tags:
      - ai
  /ai/{projectId}/conversations:
    get:
      description: Returns a list of all chat conversations associated with a specific
        project
      operationId: getAIConversations
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ai.ConversationResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get all conversations for a project
      tags:
      - ai
    post:
      consumes:
      - application/json
      description: Creates a new empty conversation for the specified project
      operationId: createAIChatConversation
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Optional conversation title
        in: body
        name: request
        schema:
          $ref: '#/definitions/ai.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ai.ConversationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new conversation for a project
      tags:
      - ai
  /ai/{projectId}/conversations/{conversationId}:
    get:
      description: Get all messages in a conversation
      operationId: getAIMessages
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ai.Message'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get conversation messages
      tags:
      - ai
  /ai/{projectId}/conversations/{conversationId}/export:
    get:
      description: Get detailed information about a conversation including all messages
        and metadata
      operationId: getAIChatConversationDetail
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ai.ConversationDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get conversation detail
      tags:
      - ai
  /ai/{projectId}/conversations/{conversationId}/summarize:
    post:
      consumes:
      - application/json
      description: Summarizes an existing conversation and starts a new one with a
        summary message
      operationId: summarizeAIChatConversation
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Conversation ID
        in: path
        name: conversationId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.DetailedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.DetailedErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.DetailedErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.DetailedErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new conversation from an existing one with a summary
      tags:
      - ai
  /ai/boilerplates:
    get:
      description: Returns a list of available boilerplates filtered by network platform
      operationId: getAIBoilerplates
      parameters:
      - description: Network ID to filter boilerplates by platform
        in: query
        name: network_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/boilerplates.BoilerplateConfig'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get available boilerplates
      tags:
      - ai
  /ai/models:
    get:
      description: Returns a list of available AI models for code generation
      operationId: getAIModels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ai.Model'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get available AI models
      tags:
      - ai
  /api-keys:
    get:
      consumes:
      - application/json
      description: List all API keys for the authenticated user
      operationId: listAPIKeys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/auth.APIKey'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - CookieAuth: []
      - BasicAuth: []
      - BearerAuth: []
      summary: List API keys
      tags:
      - API Keys
    post:
      consumes:
      - application/json
      description: Create a new API key for the authenticated user
      operationId: createAPIKey
      parameters:
      - description: API Key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.CreateAPIKeyResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - CookieAuth: []
      - BasicAuth: []
      summary: Create a new API key
      tags:
      - API Keys
  /api-keys/{id}:
    delete:
      consumes:
      - application/json
      description: Deactivate an API key by ID
      operationId: deactivateAPIKey
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: API key not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - CookieAuth: []
      - BasicAuth: []
      summary: Deactivate an API key
      tags:
      - API Keys
    get:
      consumes:
      - application/json
      description: Get details of a specific API key by ID
      operationId: getAPIKey
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.APIKey'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: API key not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - CookieAuth: []
      - BasicAuth: []
      - BearerAuth: []
      summary: Get API key details
      tags:
      - API Keys
  /api-keys/{id}/logs:
    get:
      consumes:
      - application/json
      description: Get audit logs for an API key
      operationId: getAPIKeyLogs
      parameters:
      - description: API Key ID
        in: path
        name: id
        required: true
        type: integer
      - default: 100
        description: Limit number of logs
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/auth.APIKeyLogEntry'
            type: array
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - CookieAuth: []
      - BasicAuth: []
      summary: Get API key logs
      tags:
      - API Keys
  /audit/logs:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of audit logs with optional filters
      operationId: listAuditLogs
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10)'
        in: query
        name: page_size
        type: integer
      - description: Start time (RFC3339 format)
        in: query
        name: start
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end
        type: string
      - description: Filter by event type
        in: query
        name: event_type
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by event source
        in: query
        name: event_source
        type: string
      - description: Filter by event outcome (success, failure)
        in: query
        name: event_outcome
        type: string
      - description: Filter by severity (info, warning, error, critical)
        in: query
        name: severity
        type: string
      - description: Filter by source IP address
        in: query
        name: source_ip
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/audit.ListLogsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List audit logs
      tags:
      - Audit
  /audit/logs/{id}:
    get:
      description: Retrieves a specific audit log by ID
      operationId: getAuditLog
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/audit.Event'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get audit log
      tags:
      - Audit
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Allows a user to change their own password
      operationId: changePassword
      parameters:
      - description: Password change request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Invalid current password
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Change own password
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a session cookie
      operationId: loginUser
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.Response'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Invalidates the current session and clears the session cookie
      operationId: logoutUser
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/auth.LogoutResponse'
        "405":
          description: Method not allowed
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - CookieAuth: []
      summary: Logout user
      tags:
      - Authentication
  /auth/me:
    get:
      description: Returns information about the currently authenticated user
      operationId: getCurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get current user
      tags:
      - Authentication
  /backups:
    get:
      consumes:
      - application/json
      description: Get a list of all backups
      operationId: listBackups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.BackupResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all backups
      tags:
      - Backups
    post:
      consumes:
      - application/json
      description: Create a new backup with the specified configuration
      operationId: createBackup
      parameters:
      - description: Backup creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateBackupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.BackupResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new backup
      tags:
      - Backups
  /backups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a backup and its associated files
      operationId: deleteBackup
      parameters:
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Backup not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a backup
      tags:
      - Backups
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific backup
      operationId: getBackup
      parameters:
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Backup not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a backup by ID
      tags:
      - Backups
  /backups/cron/preview:
    post:
      consumes:
      - application/json
      description: Get the next N execution times for a cron expression
      operationId: previewCronSchedule
      parameters:
      - description: Cron preview request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CronPreviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.CronPreviewResponse'
        "400":
          description: Invalid cron expression
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Preview cron schedule execution times
      tags:
      - Backup Utilities
  /backups/schedules:
    get:
      consumes:
      - application/json
      description: Get a list of all backup schedules
      operationId: listBackupSchedules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.BackupScheduleResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all backup schedules
      tags:
      - Backup Schedules
    post:
      consumes:
      - application/json
      description: Create a new backup schedule with the specified configuration
      operationId: createBackupSchedule
      parameters:
      - description: Backup schedule creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateBackupScheduleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.BackupScheduleResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new backup schedule
      tags:
      - Backup Schedules
  /backups/schedules/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a backup schedule and stop its execution
      operationId: deleteBackupSchedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a backup schedule
      tags:
      - Backup Schedules
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific backup schedule
      operationId: getBackupSchedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupScheduleResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a backup schedule by ID
      tags:
      - Backup Schedules
    put:
      consumes:
      - application/json
      description: Update an existing backup schedule with new configuration
      operationId: updateBackupSchedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Backup schedule update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateBackupScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupScheduleResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a backup schedule
      tags:
      - Backup Schedules
  /backups/schedules/{id}/disable:
    put:
      consumes:
      - application/json
      description: Disable a backup schedule to stop it from running
      operationId: disableBackupSchedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupScheduleResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Disable a backup schedule
      tags:
      - Backup Schedules
  /backups/schedules/{id}/enable:
    put:
      consumes:
      - application/json
      description: Enable a backup schedule to start running
      operationId: enableBackupSchedule
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupScheduleResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Enable a backup schedule
      tags:
      - Backup Schedules
  /backups/targets:
    get:
      consumes:
      - application/json
      description: Get a list of all backup targets
      operationId: listBackupTargets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.BackupTargetResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all backup targets
      tags:
      - Backup Targets
    post:
      consumes:
      - application/json
      description: Create a new backup target with the specified configuration
      operationId: createBackupTarget
      parameters:
      - description: Backup target creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateBackupTargetRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.BackupTargetResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new backup target
      tags:
      - Backup Targets
  /backups/targets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a backup target and all associated backups
      operationId: deleteBackupTarget
      parameters:
      - description: Backup Target ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Target not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a backup target
      tags:
      - Backup Targets
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific backup target
      operationId: getBackupTarget
      parameters:
      - description: Backup Target ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupTargetResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Target not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a backup target by ID
      tags:
      - Backup Targets
    put:
      consumes:
      - application/json
      description: Update an existing backup target with new configuration
      operationId: updateBackupTarget
      parameters:
      - description: Backup Target ID
        in: path
        name: id
        required: true
        type: integer
      - description: Backup target update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateBackupTargetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BackupTargetResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Target not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a backup target
      tags:
      - Backup Targets
  /chaincode-projects:
    get:
      description: Get a list of all projects
      operationId: listProjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.ListProjectsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all projects
      tags:
      - Chaincode Projects
    post:
      consumes:
      - application/json
      description: Create a new project, scaffold its directory, and store it in the
        DB
      operationId: createProject
      parameters:
      - description: Project info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/projects.CreateProjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a project
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}:
    delete:
      description: Delete a project and its associated files from the system
      operationId: deleteProject
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a project
      tags:
      - Chaincode Projects
    get:
      description: Get details of a project by its ID
      operationId: getProject
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a project by ID
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/commits:
    get:
      description: Get a paginated list of commits for a project, including added/removed/modified
        files
      operationId: getProjectCommits
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 20)
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.CommitsListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List project commits with file changes
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/commits/{commitHash}:
    get:
      description: Get details for a single commit, including file changes
      operationId: getProjectCommitDetail
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Commit hash
        in: path
        name: commitHash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.CommitDetailAPI'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get commit details
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/diff:
    get:
      description: Get the diff of a file between two commits
      operationId: getProjectFileDiff
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: File path (relative to project root)
        in: query
        name: file
        required: true
        type: string
      - description: From commit hash
        in: query
        name: from
        required: true
        type: string
      - description: To commit hash
        in: query
        name: to
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Diff
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get file diff between two commits
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/download:
    get:
      description: Download a project and its associated files as a zip file, excluding
        common folders like node_modules, .vscode, etc.
      operationId: downloadProject
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/zip
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Download a project as a zip file
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/endorsement-policy:
    put:
      consumes:
      - application/json
      description: Update the endorsement policy of an existing project
      operationId: updateProjectEndorsementPolicy
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update project endorsement policy request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.UpdateProjectEndorsementPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/projects.Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a project's endorsement policy
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/file_at_commit:
    get:
      description: Get the contents of a file at a specific commit hash
      operationId: getProjectFileAtCommit
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: File path (relative to project root)
        in: query
        name: file
        required: true
        type: string
      - description: Commit hash
        in: query
        name: commit
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: File contents
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get file contents at a specific commit
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/invoke:
    post:
      consumes:
      - application/json
      description: Invokes a transaction on the specified chaincode project
      operationId: invokeChaincodeTransaction
      parameters:
      - description: Chaincode Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.HandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Transaction result
          schema:
            $ref: '#/definitions/projects.HandlerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - CookieAuth: []
      summary: Invoke a chaincode transaction
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/logs:
    get:
      description: Stream or return the logs for the project's running container
      operationId: getProjectLogs
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Logs
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get logs for a project server
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/logs/stream:
    get:
      description: Stream logs for the project's running container using SSE
      operationId: streamProjectLogs
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: SSE stream of logs
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stream real-time logs for a project server
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/metadata:
    get:
      consumes:
      - application/json
      description: Retrieves metadata for the specified chaincode project
      operationId: getChaincodeProjectMetadata
      parameters:
      - description: Chaincode Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project metadata
          schema:
            $ref: '#/definitions/projects.HandlerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - CookieAuth: []
      summary: Get project metadata
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/query:
    post:
      consumes:
      - application/json
      description: Queries the state of the specified chaincode project
      operationId: queryChaincodeTransaction
      parameters:
      - description: Chaincode Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/projects.HandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Query result
          schema:
            $ref: '#/definitions/projects.HandlerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - CookieAuth: []
      summary: Query a chaincode transaction
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/shell/cleanup:
    post:
      consumes:
      - application/json
      description: Manually triggers cleanup of inactive sessions based on timeout
      operationId: cleanupInactiveSessions
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Timeout in minutes for inactive sessions (default 30)
        in: query
        minimum: 1
        name: timeout
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cleanup results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid timeout value
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Cleanup inactive sessions
      tags:
      - Shell
  /chaincode-projects/{id}/shell/config:
    get:
      consumes:
      - application/json
      description: Returns the current terminal configuration settings
      operationId: getConfig
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Terminal configuration
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get terminal configuration
      tags:
      - Shell
  /chaincode-projects/{id}/shell/sessions:
    get:
      consumes:
      - application/json
      description: Returns a list of all currently active shell sessions for the specified
        project
      operationId: listSessions
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of sessions with count
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all active shell sessions for a project
      tags:
      - Shell
  /chaincode-projects/{id}/shell/sessions/{sessionID}:
    delete:
      consumes:
      - application/json
      description: Terminates and removes a specific shell session
      operationId: deleteSession
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Unique identifier of the session to terminate
        in: path
        name: sessionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Termination confirmation
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Terminate a specific session
      tags:
      - Shell
    get:
      consumes:
      - application/json
      description: Returns detailed information about a specific shell session
      operationId: getSession
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Unique identifier of the session
        in: path
        name: sessionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get information about a specific session
      tags:
      - Shell
  /chaincode-projects/{id}/shell/ws:
    get:
      consumes:
      - application/json
      description: Creates a WebSocket connection to interact with terminal sessions
      operationId: handleWebSocket
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "101":
          description: WebSocket connection established
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Establish WebSocket connection for terminal sessions
      tags:
      - Shell
  /chaincode-projects/{id}/start:
    post:
      description: Start the server process for a given project using its boilerplate
      operationId: startProjectServer
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Start the server for a project
      tags:
      - Chaincode Projects
  /chaincode-projects/{id}/stop:
    post:
      description: Stop the server process for a given project
      operationId: stopProjectServer
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stop the server for a project
      tags:
      - Chaincode Projects
  /dummy:
    post:
      consumes:
      - application/json
      description: Submit a signed config update proposal for execution
      operationId: dummyHandler
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.RemoveOrgPayload'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.UpdateOrgMSPPayload'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/http.SetAnchorPeersPayload'
        "203":
          description: Non-Authoritative Information
          schema:
            $ref: '#/definitions/http.AddConsenterPayload'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/http.RemoveConsenterPayload'
        "205":
          description: Reset Content
          schema:
            $ref: '#/definitions/http.UpdateConsenterPayload'
        "206":
          description: Partial Content
          schema:
            $ref: '#/definitions/http.UpdateEtcdRaftOptionsPayload'
        "207":
          description: Multi-Status
          schema:
            $ref: '#/definitions/http.UpdateBatchSizePayload'
        "208":
          description: Already Reported
          schema:
            $ref: '#/definitions/http.UpdateBatchTimeoutPayload'
        "209":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateApplicationPolicyPayload'
        "210":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateOrdererPolicyPayload'
        "211":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateChannelPolicyPayload'
        "212":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateChannelCapabilityOperation'
        "213":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateOrdererCapabilityOperation'
        "214":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateApplicationCapabilityOperation'
        "215":
          description: ""
          schema:
            $ref: '#/definitions/http.AddOrdererOrgPayload'
        "216":
          description: ""
          schema:
            $ref: '#/definitions/http.RemoveOrdererOrgPayload'
        "217":
          description: ""
          schema:
            $ref: '#/definitions/http.UpdateOrdererOrgMSPPayload'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Submit config update proposal
      tags:
      - Fabric Networks
  /external-nodes:
    get:
      operationId: listAllExternalNodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ExternalNodesResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all external nodes (all types)
      tags:
      - ExternalNodes
  /external-nodes/besu-nodes:
    get:
      operationId: listExternalBesuNodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ExternalBesuNodeDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all external Besu nodes
      tags:
      - ExternalNodes
  /external-nodes/besu-nodes/{id}:
    delete:
      operationId: deleteExternalBesuNode
      parameters:
      - description: External Besu Node ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete an external Besu node
      tags:
      - ExternalNodes
  /external-nodes/fabric-orderers:
    get:
      operationId: listExternalFabricOrderers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ExternalFabricOrdererDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all external Fabric orderers
      tags:
      - ExternalNodes
  /external-nodes/fabric-orderers/{id}:
    delete:
      operationId: deleteExternalFabricOrderer
      parameters:
      - description: External Fabric Orderer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete an external Fabric orderer
      tags:
      - ExternalNodes
  /external-nodes/fabric-organizations:
    get:
      operationId: listExternalFabricOrganizations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ExternalOrganizationDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all external Fabric organizations
      tags:
      - ExternalNodes
  /external-nodes/fabric-organizations/{id}:
    delete:
      operationId: deleteExternalFabricOrganization
      parameters:
      - description: External Fabric Organization ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete an external Fabric organization
      tags:
      - ExternalNodes
  /external-nodes/fabric-peers:
    get:
      operationId: listExternalFabricPeers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ExternalFabricPeerDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all external Fabric peers
      tags:
      - ExternalNodes
  /external-nodes/fabric-peers/{id}:
    delete:
      operationId: deleteExternalFabricPeer
      parameters:
      - description: External Fabric Peer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete an external Fabric peer
      tags:
      - ExternalNodes
  /key-providers:
    get:
      consumes:
      - application/json
      description: Get a list of all configured key providers
      operationId: listKeyProviders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProviderResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all key providers
      tags:
      - Providers
    post:
      consumes:
      - application/json
      description: Create a new key provider with the specified configuration
      operationId: createKeyProvider
      parameters:
      - description: Provider configuration
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProviderHandlerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProviderResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new key provider
      tags:
      - Providers
  /key-providers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific key provider
      operationId: deleteKeyProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Provider not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Provider has existing keys
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a provider
      tags:
      - Providers
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific key provider
      operationId: getKeyProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProviderResponse'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Provider not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a specific provider
      tags:
      - Providers
  /key-providers/{id}/awskms/status:
    get:
      consumes:
      - application/json
      description: Get the status of an AWS KMS provider including connection status
        and key statistics
      operationId: getAWSKMSStatus
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AWSKMSStatusResponse'
        "400":
          description: Invalid provider ID
          schema:
            $ref: '#/definitions/handler.AWSKMSStatusResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.AWSKMSStatusResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.AWSKMSStatusResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get AWS KMS status
      tags:
      - key-providers
  /key-providers/{id}/vault/start:
    post:
      consumes:
      - application/json
      description: Start a previously deployed HashiCorp Vault instance
      operationId: startVault
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "409":
          description: Conflict - already running
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Start Vault instance
      tags:
      - Key Providers
  /key-providers/{id}/vault/status:
    get:
      consumes:
      - application/json
      description: Get the status of a HashiCorp Vault instance including container
        details
      operationId: getVaultStatus
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vault status information
          schema:
            $ref: '#/definitions/handler.VaultStatusResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Vault status
      tags:
      - Key Providers
  /key-providers/{id}/vault/stop:
    post:
      consumes:
      - application/json
      description: Stop a running HashiCorp Vault instance
      operationId: stopVault
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "409":
          description: Conflict - not running
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stop Vault instance
      tags:
      - Key Providers
  /key-providers/{id}/vault/tune-pki:
    post:
      consumes:
      - application/json
      description: Configure the PKI mount TTL settings for a Vault provider
      operationId: tunePKIMount
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      - description: PKI mount tuning parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.TunePKIMountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: PKI mount tuned successfully
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "500":
          description: Failed to tune PKI mount
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Tune PKI Mount
      tags:
      - Key Providers
  /key-providers/{id}/vault/unseal:
    post:
      consumes:
      - application/json
      description: Manually unseal a HashiCorp Vault instance
      operationId: unsealVault
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Vault successfully unsealed
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "404":
          description: Provider not found
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
        "500":
          description: Failed to unseal
          schema:
            $ref: '#/definitions/handler.VaultOperationResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Unseal Vault
      tags:
      - Key Providers
  /keys:
    get:
      consumes:
      - application/json
      description: Get a paginated list of keys
      operationId: getPaginatedKeys
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      - description: Filter by provider ID
        in: query
        name: provider_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get paginated keys
      tags:
      - Keys
    post:
      consumes:
      - application/json
      description: Create a new key pair with specified algorithm and parameters
      operationId: createKey
      parameters:
      - description: Key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateKeyHandlerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.KeyResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new key
      tags:
      - Keys
  /keys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific key by ID
      operationId: deleteKey
      parameters:
      - description: Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Key not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a key
      tags:
      - Keys
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific key
      operationId: getKeyById
      parameters:
      - description: Key ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KeyResponse'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Key not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a specific key by ID
      tags:
      - Keys
  /keys/{keyID}/sign:
    post:
      consumes:
      - application/json
      description: Sign a certificate for a key using a CA key
      operationId: signCertificate
      parameters:
      - description: Key ID to sign
        in: path
        name: keyID
        required: true
        type: integer
      - description: Certificate signing request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SignCertificateHandlerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.SignCertificateResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Key not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Sign a certificate
      tags:
      - Keys
  /keys/all:
    get:
      consumes:
      - application/json
      description: Get all keys with their certificates and metadata
      operationId: getAllKeys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.KeyResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get all keys
      tags:
      - Keys
  /keys/filter:
    get:
      consumes:
      - application/json
      description: Get keys filtered by algorithm type and/or curve type
      operationId: filterKeys
      parameters:
      - description: Algorithm type (e.g., RSA, ECDSA)
        in: query
        name: algorithm
        type: string
      - description: Curve type (e.g., P256, P384, P521)
        in: query
        name: curve
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Filter keys by algorithm and curve
      tags:
      - Keys
  /mcp/info:
    get:
      description: Retrieve information about the Model Context Protocol server capabilities
        and metadata
      operationId: getMCPInfo
      produces:
      - application/json
      responses:
        "200":
          description: Server information including capabilities and metadata
          schema:
            additionalProperties: true
            type: object
      summary: Get MCP server information
      tags:
      - MCP
  /metrics/connection/{id}/filtered:
    get:
      description: Retrieves metrics for a specific connection with dynamic filtering
        support
      operationId: getConnectionMetricsFiltered
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      - description: Comma-separated filters in format 'property:operator:value'
        in: query
        name: filters
        type: string
      - collectionFormat: multi
        description: Individual filters using filter[property][operator]=value format
        in: query
        items:
          type: string
        name: filter
        type: array
      - description: Base PromQL query
        in: query
        name: query
        type: string
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get filtered metrics for a specific connection
      tags:
      - Metrics
  /metrics/connection/{id}/label/{label}/values:
    get:
      consumes:
      - application/json
      description: Retrieves all values for a specific label, optionally filtered
        by metric matches and connection ID
      operationId: getConnectionLabelValues
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      - description: Label name
        in: path
        name: label
        required: true
        type: string
      - collectionFormat: multi
        description: Metric matches (e.g. {__name__=\
        in: query
        items:
          type: string
        name: match
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Label values
          schema:
            $ref: '#/definitions/types.LabelValuesResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get label values for a specific connection
      tags:
      - Metrics
  /metrics/connection/{id}/metrics:
    get:
      description: Retrieves all metrics for a specific connection ID using federated
        metrics query
      operationId: getConnectionMetrics
      parameters:
      - description: Connection ID from database
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get all metrics for a connection ID
      tags:
      - Metrics
  /metrics/connection/{id}/query:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with optional time range for
        a specific connection
      operationId: connectionCustomQuery
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CustomQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.QueryResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom Prometheus query for a connection
      tags:
      - Metrics
  /metrics/connection/{id}/query/filtered:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with dynamic filtering for a
        specific connection
      operationId: connectionCustomQueryFiltered
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      - description: Filtered query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.FilteredQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom filtered Prometheus query for a connection
      tags:
      - Metrics
  /metrics/connection/{id}/range:
    get:
      consumes:
      - application/json
      description: Retrieves metrics for a specific connection within a specified
        time range
      operationId: getConnectionMetricsRange
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        type: string
      - description: PromQL query
        in: query
        name: query
        required: true
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: start
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end
        required: true
        type: string
      - description: Step duration (e.g. 1m, 5m, 1h)
        in: query
        name: step
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Metrics data
          schema:
            $ref: '#/definitions/types.MetricsDataResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get metrics for a specific connection with time range
      tags:
      - Metrics
  /metrics/defaults:
    get:
      description: Returns default configuration values including available ports
        for Prometheus deployment
      operationId: getDefaults
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PrometheusDefaultsResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get default values for Prometheus deployment
      tags:
      - Metrics
  /metrics/deploy:
    post:
      consumes:
      - application/json
      description: Deploys a new Prometheus instance with the specified configuration
      operationId: deployPrometheus
      parameters:
      - description: Prometheus deployment configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.DeployPrometheusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Deploy a new Prometheus instance
      tags:
      - Metrics
  /metrics/job/{jobName}:
    delete:
      description: Removes a generic job from Prometheus configuration
      operationId: removeGenericJob
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Remove a generic job
      tags:
      - Metrics
    get:
      description: Retrieves metrics for a specific job by name and optional PromQL
        query
      operationId: getJobMetrics
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: PromQL query to filter metrics
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get metrics for a specific job
      tags:
      - Metrics
  /metrics/job/{jobName}/filtered:
    get:
      description: Retrieves metrics for a specific job with dynamic filtering support
      operationId: getJobMetricsFiltered
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: Comma-separated filters in format 'property:operator:value'
        in: query
        name: filters
        type: string
      - collectionFormat: multi
        description: Individual filters using filter[property][operator]=value format
        in: query
        items:
          type: string
        name: filter
        type: array
      - description: Base PromQL query
        in: query
        name: query
        type: string
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get filtered metrics for a specific job
      tags:
      - Metrics
  /metrics/job/{jobName}/label/{label}/values:
    get:
      description: Retrieves all values for a specific label, optionally filtered
        by metric matches and job name
      operationId: getJobLabelValues
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: Label name
        in: path
        name: label
        required: true
        type: string
      - collectionFormat: multi
        description: Metric matches (e.g. {__name__=\
        in: query
        items:
          type: string
        name: match
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Label values
          schema:
            $ref: '#/definitions/types.LabelValuesResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get label values for a specific job
      tags:
      - Metrics
  /metrics/job/{jobName}/query:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with optional time range for
        a specific job
      operationId: jobCustomQuery
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CustomQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.QueryResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom Prometheus query for a job
      tags:
      - Metrics
  /metrics/job/{jobName}/query/filtered:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with dynamic filtering for a
        specific job
      operationId: jobCustomQueryFiltered
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: Filtered query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.FilteredQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom filtered Prometheus query for a job
      tags:
      - Metrics
  /metrics/job/{jobName}/range:
    get:
      description: Retrieves metrics for a specific job within a specified time range
      operationId: getJobMetricsRange
      parameters:
      - description: Job name
        in: path
        name: jobName
        required: true
        type: string
      - description: PromQL query
        in: query
        name: query
        required: true
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: start
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end
        required: true
        type: string
      - description: Step duration (e.g. 1m, 5m, 1h)
        in: query
        name: step
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Metrics data
          schema:
            $ref: '#/definitions/types.MetricsDataResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get metrics for a specific job with time range
      tags:
      - Metrics
  /metrics/job/add:
    post:
      consumes:
      - application/json
      description: Adds a new generic job target to Prometheus configuration
      operationId: addGenericJob
      parameters:
      - description: Job configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.AddJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Add a new generic job target
      tags:
      - Metrics
  /metrics/jobs:
    get:
      description: Lists all available jobs in Prometheus with their targets and status
      operationId: listJobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all jobs
      tags:
      - Metrics
  /metrics/logs:
    get:
      description: Streams Prometheus logs with optional tail and follow functionality
      operationId: tailMetricsLogs
      parameters:
      - description: 'Follow logs in real-time (default: false)'
        in: query
        name: follow
        type: boolean
      - description: 'Number of lines to show from the end (default: 100)'
        in: query
        name: tail
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: Log stream
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Tail Prometheus logs
      tags:
      - Metrics
  /metrics/metadata:
    get:
      description: Retrieves metadata about all available metrics in Prometheus
      operationId: getMetadata
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Prometheus metadata
      tags:
      - Metrics
  /metrics/node/{id}:
    get:
      description: Retrieves metrics for a specific node by ID and optional PromQL
        query
      operationId: getNodeMetrics
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: PromQL query to filter metrics
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get metrics for a specific node
      tags:
      - Metrics
  /metrics/node/{id}/filtered:
    get:
      description: Retrieves metrics for a specific node with dynamic filtering support
      operationId: getNodeMetricsFiltered
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Comma-separated filters in format 'property:operator:value'
        in: query
        name: filters
        type: string
      - collectionFormat: multi
        description: Individual filters using filter[property][operator]=value format
        in: query
        items:
          type: string
        name: filter
        type: array
      - description: Base PromQL query
        in: query
        name: query
        type: string
      - description: Limit number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get filtered metrics for a specific node
      tags:
      - Metrics
  /metrics/node/{id}/label/{label}/values:
    get:
      consumes:
      - application/json
      description: Retrieves all values for a specific label, optionally filtered
        by metric matches and node ID
      operationId: getLabelValues
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Label name
        in: path
        name: label
        required: true
        type: string
      - collectionFormat: multi
        description: Metric matches (e.g. {__name__=\
        in: query
        items:
          type: string
        name: match
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Label values
          schema:
            $ref: '#/definitions/types.LabelValuesResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get label values for a specific label
      tags:
      - Metrics
  /metrics/node/{id}/query:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with optional time range
      operationId: customQuery
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.CustomQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.QueryResult'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom Prometheus query
      tags:
      - Metrics
  /metrics/node/{id}/query/filtered:
    post:
      consumes:
      - application/json
      description: Execute a custom Prometheus query with dynamic filtering for a
        specific node
      operationId: customQueryFiltered
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: Filtered query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.FilteredQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute custom filtered Prometheus query for a node
      tags:
      - Metrics
  /metrics/node/{id}/range:
    get:
      consumes:
      - application/json
      description: Retrieves metrics for a specific node within a specified time range
      operationId: getNodeMetricsRange
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: string
      - description: PromQL query
        in: query
        name: query
        required: true
        type: string
      - description: Start time (RFC3339 format)
        in: query
        name: start
        required: true
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end
        required: true
        type: string
      - description: Step duration (e.g. 1m, 5m, 1h)
        in: query
        name: step
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Metrics data
          schema:
            $ref: '#/definitions/types.MetricsDataResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get metrics for a specific node with time range
      tags:
      - Metrics
  /metrics/port/{port}/check:
    get:
      description: Checks if a specific port is available for Prometheus deployment
      operationId: checkPortAvailability
      parameters:
      - description: Port number to check
        in: path
        name: port
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Check port availability
      tags:
      - Metrics
  /metrics/query/filtered:
    post:
      consumes:
      - application/json
      description: Execute a Prometheus query with dynamic filtering across all available
        metrics
      operationId: globalFilteredQuery
      parameters:
      - description: Filtered query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.FilteredQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Execute global filtered Prometheus query
      tags:
      - Metrics
  /metrics/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the Prometheus deployment with new configuration parameters
      operationId: refreshPrometheus
      parameters:
      - description: Prometheus refresh configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.RefreshPrometheusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Refresh Prometheus deployment
      tags:
      - Metrics
  /metrics/reload:
    post:
      description: Triggers a reload of the Prometheus configuration to pick up any
        changes
      operationId: reloadConfiguration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Reload Prometheus configuration
      tags:
      - Metrics
  /metrics/search:
    get:
      description: Search for metrics using various filtering criteria and search
        terms
      operationId: searchMetrics
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Comma-separated filters in format 'property:operator:value'
        in: query
        name: filters
        type: string
      - collectionFormat: multi
        description: Individual filters using filter[property][operator]=value format
        in: query
        items:
          type: string
        name: filter
        type: array
      - default: 100
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FilteredMetricsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Search metrics with dynamic filtering
      tags:
      - Metrics
  /metrics/start:
    post:
      description: Starts the Prometheus instance if it's currently stopped
      operationId: startPrometheus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Start Prometheus instance
      tags:
      - Metrics
  /metrics/status:
    get:
      description: Returns the current status of the Prometheus instance including
        version, port, and configuration
      operationId: getStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_metrics_common.Status'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Prometheus status
      tags:
      - Metrics
  /metrics/stop:
    post:
      description: Stops the Prometheus instance if it's currently running
      operationId: stopPrometheus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stop Prometheus instance
      tags:
      - Metrics
  /metrics/targets:
    get:
      description: Retrieves the list of targets and their status from Prometheus
      operationId: getTargets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Prometheus targets
      tags:
      - Metrics
  /metrics/undeploy:
    post:
      description: Stops and removes the Prometheus instance
      operationId: undeployPrometheus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Undeploy Prometheus instance
      tags:
      - Metrics
  /monitoring/health/check-all:
    post:
      description: Trigger an immediate health check for all monitored nodes
      operationId: triggerAllNodesCheck
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Trigger immediate health check for all nodes
      tags:
      - Monitoring
  /monitoring/health/ping:
    get:
      description: Get the current health status of all nodes being monitored
      operationId: pingAllNodes
      produces:
      - application/json
      responses:
        "200":
          description: Health status of all nodes
          schema:
            additionalProperties: true
            type: object
      summary: Ping all monitored nodes
      tags:
      - Monitoring
  /monitoring/nodes/{id}/check:
    post:
      description: Trigger an immediate health check for a specific node
      operationId: triggerNodeCheck
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Trigger immediate health check for a node
      tags:
      - Monitoring
  /monitoring/nodes/{id}/health:
    get:
      description: Retrieve the current health status of a node from the monitoring
        service
      operationId: getNodeHealth
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Node health status
          schema:
            $ref: '#/definitions/monitoring.NodeHealthStatusResponse'
      summary: Get health status of a specific node
      tags:
      - Monitoring
  /networks/besu:
    get:
      description: Get a paginated list of Besu networks
      operationId: listBesuNetworks
      parameters:
      - description: 'Number of items to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: Filter by network name (partial match)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ListBesuNetworksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List Besu networks
      tags:
      - Besu Networks
    post:
      consumes:
      - application/json
      description: Create a new Besu network with the specified configuration
      operationId: createBesuNetwork
      parameters:
      - description: Network creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateBesuNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BesuNetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new Besu network
      tags:
      - Besu Networks
  /networks/besu/{id}:
    delete:
      description: Delete an existing Besu network and all its resources
      operationId: deleteBesuNetwork
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a Besu network
      tags:
      - Besu Networks
    get:
      description: Get details of a specific Besu network
      operationId: getBesuNetwork
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BesuNetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a Besu network by ID
      tags:
      - Besu Networks
  /networks/besu/import:
    post:
      consumes:
      - application/json
      description: Import an existing Besu network using its genesis file
      operationId: importBesuNetwork
      parameters:
      - description: Import network request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.ImportBesuNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ImportNetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Import a Besu network
      tags:
      - Besu Networks
  /networks/fabric:
    get:
      description: Get a paginated list of Fabric networks
      operationId: listFabricNetworks
      parameters:
      - description: 'Number of items to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Number of items to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: Filter by network name (partial match)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ListNetworksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List Fabric networks
      tags:
      - Fabric Networks
    post:
      consumes:
      - application/json
      description: Create a new Hyperledger Fabric network with the specified configuration
      operationId: createFabricNetwork
      parameters:
      - description: Network creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateFabricNetworkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}:
    delete:
      description: Delete an existing Fabric network and all its resources
      operationId: deleteFabricNetwork
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a Fabric network
      tags:
      - Fabric Networks
    get:
      description: Get details of a specific Fabric network
      operationId: getFabricNetwork
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a Fabric network by ID
      tags:
      - Fabric Networks
  /networks/fabric/{id}/anchor-peers:
    post:
      consumes:
      - application/json
      description: Set the anchor peers for an organization in a Fabric network
      operationId: setFabricAnchorPeers
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Anchor peers configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.SetAnchorPeersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SetAnchorPeersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Set anchor peers for an organization
      tags:
      - Fabric Networks
  /networks/fabric/{id}/blocks:
    get:
      description: Get a paginated list of blocks from a Fabric network
      operationId: getFabricBlocks
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Number of blocks to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Number of blocks to skip (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Get blocks in reverse order (default: false)'
        in: query
        name: reverse
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BlockListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get list of blocks from Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/blocks/{blockNum}:
    get:
      description: Get all transactions from a specific block in a Fabric network
      operationId: getFabricBlock
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block Number
        in: path
        name: blockNum
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BlockTransactionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transactions from a specific block
      tags:
      - Fabric Networks
  /networks/fabric/{id}/channel-config:
    get:
      description: Retrieve the channel configuration for a Fabric network
      operationId: getFabricChannelConfig
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ChannelConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric network channel configuration
      tags:
      - Fabric Networks
  /networks/fabric/{id}/current-channel-config:
    get:
      description: Retrieve the current channel configuration for a Fabric network
      operationId: getFabricCurrentChannelConfig
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ChannelConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric network current channel configuration
      tags:
      - Fabric Networks
  /networks/fabric/{id}/info:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about the Fabric blockchain including
        height and block hashes
      operationId: getChainInfo
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ChainInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric chain information
      tags:
      - Fabric Networks
  /networks/fabric/{id}/map:
    get:
      description: Get a map of all nodes (peers/orderers/validators) for a network,
        including endpoints and optionally health status.
      operationId: getNetworkMap
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Check node health (default: false)'
        in: query
        name: checkHealth
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.NetworkMap'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get network map
      tags:
      - Fabric Networks
      - Besu Networks
  /networks/fabric/{id}/nodes:
    get:
      description: Get all nodes associated with a network
      operationId: getFabricNetworkNodes
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GetNetworkNodesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get network nodes
      tags:
      - Fabric Networks
    post:
      consumes:
      - application/json
      description: Add a node (peer or orderer) to an existing network
      operationId: addFabricNetworkNode
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Node addition request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.AddNodeToNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Add node to network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/orderers/{ordererId}:
    delete:
      consumes:
      - application/json
      description: Remove an orderer node from an existing Fabric network
      operationId: removeFabricOrderer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Orderer ID
        in: path
        name: ordererId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Remove orderer from Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/orderers/{ordererId}/join:
    post:
      consumes:
      - application/json
      description: Join an orderer node to an existing Fabric network
      operationId: joinFabricOrderer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Orderer ID
        in: path
        name: ordererId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Join orderer to Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/orderers/{ordererId}/unjoin:
    post:
      consumes:
      - application/json
      description: Remove an orderer node from a channel but keep it in the network
      operationId: unjoinFabricOrderer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Orderer ID
        in: path
        name: ordererId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Unjoin orderer from Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/organization-crl:
    post:
      consumes:
      - application/json
      description: Update the Certificate Revocation List (CRL) for an organization
        in the network
      operationId: updateOrgCRL
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Organization CRL update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateOrganizationCRLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.UpdateOrganizationCRLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update organization CRL
      tags:
      - Fabric Networks
  /networks/fabric/{id}/organizations/{orgId}/config:
    get:
      description: Get the network configuration as YAML
      operationId: getFabricOrgConfig
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: integer
      produces:
      - text/yaml
      responses:
        "200":
          description: Network configuration YAML
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get network configuration
      tags:
      - Fabric Networks
  /networks/fabric/{id}/peers/{peerId}:
    delete:
      consumes:
      - application/json
      description: Remove a peer node from an existing Fabric network
      operationId: removeFabricPeer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Remove peer from Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/peers/{peerId}/join:
    post:
      consumes:
      - application/json
      description: Join a peer node to an existing Fabric network
      operationId: joinFabricPeer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Join peer to Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/peers/{peerId}/unjoin:
    post:
      consumes:
      - application/json
      description: Remove a peer node from a channel but keep it in the network
      operationId: unjoinFabricPeer
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Unjoin peer from Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/{id}/reload-block:
    post:
      consumes:
      - application/json
      description: Reloads the current config block for a network
      operationId: reloadNetworkBlock
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Reload network config block
      tags:
      - Fabric Networks
  /networks/fabric/{id}/transactions/{txId}:
    get:
      description: Get detailed information about a specific transaction in a Fabric
        network
      operationId: getFabricTransaction
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction details by transaction ID
      tags:
      - Fabric Networks
  /networks/fabric/{id}/update-config:
    post:
      consumes:
      - application/json
      description: |-
        Prepare a config update proposal for a Fabric network using the provided operations and signing organization IDs.
        The signing_org_ids field specifies which organizations should be used to sign the config update.
        The following operation types are supported:
        - add_org: Add a new organization to the channel
        - remove_org: Remove an organization from the channel
        - update_org_msp: Update an organization's MSP configuration
        - set_anchor_peers: Set anchor peers for an organization
        - add_consenter: Add a new consenter to the orderer (etcdraft)
        - remove_consenter: Remove a consenter from the orderer (etcdraft)
        - update_consenter: Update a consenter in the orderer (etcdraft)
        - add_bft_consenter: Add a new BFT consenter to the orderer
        - remove_bft_consenter: Remove a BFT consenter from the orderer
        - update_bft_consenter: Update a BFT consenter in the orderer
        - update_bft_options: Update BFT consensus options
        - update_etcd_raft_options: Update etcd raft options for the orderer
        - update_batch_size: Update batch size for the orderer
        - update_batch_timeout: Update batch timeout for the orderer
      operationId: updateFabricChannelConfig
      parameters:
      - description: Network ID
        in: path
        name: id
        required: true
        type: integer
      - description: Config update operations and signing organization IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateFabricNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ConfigUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Prepare a config update for a Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/by-name/{name}:
    get:
      description: Get details of a specific Fabric network using its slug
      operationId: getFabricNetworkByName
      parameters:
      - description: Network Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a Fabric network by slug
      tags:
      - Fabric Networks
  /networks/fabric/import:
    post:
      consumes:
      - application/json
      description: Import an existing Fabric network using its genesis block
      operationId: importFabricNetwork
      parameters:
      - description: Import network request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.ImportFabricNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ImportNetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Import a Fabric network
      tags:
      - Fabric Networks
  /networks/fabric/import-with-org:
    post:
      consumes:
      - application/json
      description: Import an existing Fabric network using organization details
      operationId: importFabricNetworkWithOrg
      parameters:
      - description: Import network with org request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.ImportFabricNetworkWithOrgRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ImportNetworkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Import a Fabric network with organization
      tags:
      - Fabric Networks
  /node/accept-invitation:
    post:
      consumes:
      - application/json
      description: Accepts a node invitation by validating the JWT and establishing
        the connection
      operationId: acceptNodeInvitation
      parameters:
      - description: Accept invitation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.NodeAcceptInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.NodeAcceptInvitationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Accept a node invitation using a JWT
      tags:
      - NodeSharing
  /node/connected-peers:
    get:
      description: Returns a list of node IDs this node is currently connected with
      operationId: listConnectedPeers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.ConnectedPeersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List connected peer nodes
      tags:
      - NodeSharing
  /node/connected-peers/{node_id}:
    delete:
      consumes:
      - application/json
      description: Removes a peer from the connected peers list
      operationId: removeConnectedPeer
      parameters:
      - description: ID of the peer node to remove
        in: path
        name: node_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            $ref: '#/definitions/communication.RemoveConnectedPeerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Remove a connected peer
      tags:
      - NodeSharing
  /node/connected-peers/{peer_id}/nodes:
    get:
      description: Retrieve external nodes information for a specific connected peer
      operationId: getExternalNodesForConnectedPeer
      parameters:
      - description: ID of the connected peer
        in: path
        name: peer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.ExternalNodesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get external nodes for a specific connected peer
      tags:
      - NodeSharing
  /node/external-nodes:
    post:
      consumes:
      - application/json
      description: Retrieve external nodes information with authentication
      operationId: getExternalNodes
      parameters:
      - description: Signed request for external node info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ExternalNodesAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.ExternalNodesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get external nodes info
      tags:
      - NodeSharing
  /node/forward-metrics:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Forwards metrics to the federated Prometheus instance. Returns
        400 if no instance is deployed.
      operationId: forwardMetrics
      parameters:
      - description: Prometheus match[] parameters
        in: query
        name: match[]
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Raw Prometheus federate response
          schema:
            type: string
        "400":
          description: No Prometheus instance deployed
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Forward metrics to federated Prometheus
      tags:
      - NodeSharing
  /node/generate-invitation:
    post:
      consumes:
      - application/json
      description: Generate a JWT invitation for node sharing
      operationId: generateNodeInvitation
      parameters:
      - description: Invitation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.NodeInvitationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.NodeInvitationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Generate node invitation
      tags:
      - NodeSharing
  /node/metrics-enabled:
    post:
      consumes:
      - application/json
      description: Returns whether the node has any nodes with metrics enabled
      operationId: checkMetricsEnabled
      parameters:
      - description: Authentication request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ExternalNodesAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Metrics status response
          schema:
            $ref: '#/definitions/communication.MetricsEnabledResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Check if node has metrics enabled
      tags:
      - NodeSharing
  /node/metrics-federation:
    post:
      consumes:
      - application/json
      description: Enables or disables metrics federation for a connected peer
      operationId: metricsFederation
      parameters:
      - description: Metrics federation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.MetricsFederationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Enable/disable metrics federation for a peer
      tags:
      - NodeSharing
  /node/register-peer:
    post:
      consumes:
      - application/json
      description: Register a peer node for bidirectional communication
      operationId: registerPeerNode
      parameters:
      - description: Peer registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.RegisterPeerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration response
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Register peer node
      tags:
      - NodeSharing
  /node/sync-external-nodes:
    post:
      consumes:
      - application/json
      description: Calls the remote peer's external-nodes endpoint and stores results
        locally
      operationId: syncExternalNodes
      parameters:
      - description: Sync request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.SyncExternalNodesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/communication.SyncExternalNodesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/communication.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Sync external nodes from remote peer
      tags:
      - NodeSharing
  /nodes:
    get:
      consumes:
      - application/json
      description: Get a paginated list of nodes with optional filtering by name,
        slug, status, platform, type, network, or organization
      operationId: listNodes
      parameters:
      - description: Filter by node name (partial match, case-insensitive)
        in: query
        name: name
        type: string
      - description: Filter by node slug (exact match)
        in: query
        name: slug
        type: string
      - description: Filter by node status
        enum:
        - PENDING
        - STARTING
        - RUNNING
        - STOPPED
        - STOPPING
        - UPDATING
        - ERROR
        in: query
        name: status
        type: string
      - description: Filter by blockchain platform
        enum:
        - fabric
        - besu
        in: query
        name: platform
        type: string
      - description: Filter by node type
        enum:
        - fabric-peer
        - fabric-orderer
        - besu
        in: query
        name: nodeType
        type: string
      - description: Filter by network ID
        in: query
        name: networkId
        type: integer
      - description: Filter by organization ID (Fabric nodes only)
        in: query
        name: organizationId
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.PaginatedNodesResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all nodes
      tags:
      - Nodes
    post:
      consumes:
      - application/json
      description: Create a new node with the specified configuration
      operationId: createNode
      parameters:
      - description: Node creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateNodeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Node creation failed (may include partial success details with
            node_id and stage)
          schema:
            $ref: '#/definitions/response.NodeCreationErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new node
      tags:
      - Nodes
  /nodes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a node by ID
      operationId: deleteNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a node
      tags:
      - Nodes
    get:
      consumes:
      - application/json
      description: Get a node by ID
      operationId: getNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a node
      tags:
      - Nodes
    put:
      consumes:
      - application/json
      description: Update a node configuration
      operationId: updateNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Node update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateNodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a node
      tags:
      - Nodes
  /nodes/{id}/certificates/renew:
    post:
      consumes:
      - application/json
      description: Renew certificates for a node
      operationId: renewNodeCertificates
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Renew node certificates
      tags:
      - Nodes
  /nodes/{id}/channels:
    get:
      description: Get channels for a Fabric node
      operationId: getNodeChannels
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeChannelsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get node channels
      tags:
      - Nodes
  /nodes/{id}/channels/{channelID}/chaincodes:
    get:
      description: Get installed chaincodes for a Fabric node
      operationId: getNodeChaincodes
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Channel ID
        in: path
        name: channelID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.ChaincodeResponse'
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get node chaincodes
      tags:
      - Nodes
  /nodes/{id}/channels/{channelID}/height:
    get:
      description: Get the block height for a specific channel on a Fabric node
      operationId: getNodeChannelHeight
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Channel ID
        in: path
        name: channelID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.ChannelHeightResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found or channel not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get node channel height
      tags:
      - Nodes
  /nodes/{id}/events:
    get:
      description: Get events for a specific node
      operationId: getNodeEvents
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.PaginatedNodeEventsResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get node events
      tags:
      - Nodes
  /nodes/{id}/health:
    get:
      description: Retrieve the latest health check result for a specific node
      operationId: getNodeHealthStatus
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Node health status
          schema:
            $ref: '#/definitions/monitoring.NodeHealthStatusResponse'
      summary: Get current health status of a node
      tags:
      - Nodes
  /nodes/{id}/health/history:
    get:
      description: Retrieve health check history for a specific node within a time
        range
      operationId: getNodeHealthHistory
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start time (RFC3339 format)
        in: query
        name: start_time
        type: string
      - description: End time (RFC3339 format)
        in: query
        name: end_time
        type: string
      - description: Hours from now (alternative to start_time/end_time)
        in: query
        name: hours
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Health check history
          schema:
            $ref: '#/definitions/monitoring.HealthcheckHistoryResponse'
      summary: Get health check history for a node
      tags:
      - Nodes
  /nodes/{id}/logs:
    get:
      consumes:
      - application/json
      description: Stream logs from a specific node
      operationId: tailNodesLogs
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Follow logs
        in: query
        name: follow
        type: boolean
      - default: 100
        description: Number of lines to show from the end
        in: query
        name: tail
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: Log stream
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Tail node logs
      tags:
      - Nodes
  /nodes/{id}/logs/filter:
    get:
      consumes:
      - application/json
      description: Filter logs based on pattern and optional range
      operationId: filterLogs
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter pattern
        in: query
        name: pattern
        type: string
      - description: Ignore case in pattern matching
        in: query
        name: ignoreCase
        type: boolean
      - description: Start line number
        in: query
        name: start
        type: integer
      - description: End line number
        in: query
        name: end
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Filtered log entries
          schema:
            $ref: '#/definitions/log.LogResponse'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/log.LogResponse'
        "404":
          description: Node or log file not found
          schema:
            $ref: '#/definitions/log.LogResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/log.LogResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Filter logs
      tags:
      - Logs
  /nodes/{id}/logs/range:
    get:
      consumes:
      - application/json
      description: Retrieve a specific range of log lines for a node
      operationId: getLogRange
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start line number
        in: query
        name: start
        required: true
        type: integer
      - description: End line number
        in: query
        name: end
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Log range content
          schema:
            $ref: '#/definitions/log.LogResponse'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/log.LogResponse'
        "404":
          description: Node or log file not found
          schema:
            $ref: '#/definitions/log.LogResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/log.LogResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get log range
      tags:
      - Logs
  /nodes/{id}/logs/stats:
    get:
      consumes:
      - application/json
      description: Retrieve statistics about a node's log file
      operationId: getLogStats
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Log statistics
          schema:
            $ref: '#/definitions/log.LogResponse'
        "400":
          description: Invalid node ID
          schema:
            $ref: '#/definitions/log.LogResponse'
        "404":
          description: Node or log file not found
          schema:
            $ref: '#/definitions/log.LogResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/log.LogResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get log statistics
      tags:
      - Logs
  /nodes/{id}/logs/tail:
    get:
      consumes:
      - application/json
      description: Retrieve the last n lines of logs for a node
      operationId: tailLogs
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Number of lines to retrieve (1-1000)
        in: query
        name: lines
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tail log entries
          schema:
            $ref: '#/definitions/log.LogResponse'
        "400":
          description: Invalid number of lines
          schema:
            $ref: '#/definitions/log.LogResponse'
        "404":
          description: Node or log file not found
          schema:
            $ref: '#/definitions/log.LogResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/log.LogResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Tail logs
      tags:
      - Logs
  /nodes/{id}/restart:
    post:
      consumes:
      - application/json
      description: Restart a node by ID (stops and starts the node)
      operationId: restartNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Restart a node
      tags:
      - Nodes
  /nodes/{id}/rpc/accounts:
    get:
      consumes:
      - application/json
      description: Lists accounts managed by the node
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Array of account addresses
          schema:
            items:
              type: string
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get accounts managed by the Besu node
      tags:
      - Nodes
  /nodes/{id}/rpc/balance:
    get:
      consumes:
      - application/json
      description: Gets balance of an address in Wei
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Account address
        in: query
        name: address
        required: true
        type: string
      - description: 'Block tag (default: latest)'
        in: query
        name: blockTag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Balance in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get balance of an address
      tags:
      - Nodes
  /nodes/{id}/rpc/block-by-hash:
    get:
      consumes:
      - application/json
      description: Gets block details by hash
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block hash
        in: query
        name: hash
        required: true
        type: string
      - default: false
        description: Include full transaction objects
        in: query
        name: fullTx
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Block object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get block by hash
      tags:
      - Nodes
  /nodes/{id}/rpc/block-by-number:
    get:
      consumes:
      - application/json
      description: Gets block by number or tag
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block number
        in: query
        name: number
        type: string
      - description: Block tag (latest, earliest, pending)
        in: query
        name: tag
        type: string
      - default: false
        description: Include full transaction objects
        in: query
        name: fullTx
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Block object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get block by number
      tags:
      - Nodes
  /nodes/{id}/rpc/block-number:
    get:
      consumes:
      - application/json
      description: Gets the latest block number
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Block number in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get latest block number
      tags:
      - Nodes
  /nodes/{id}/rpc/block-transaction-count-by-hash:
    get:
      consumes:
      - application/json
      description: Gets transaction count in a block by hash
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block hash
        in: query
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction count in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction count in block by hash
      tags:
      - Nodes
  /nodes/{id}/rpc/block-transaction-count-by-number:
    get:
      consumes:
      - application/json
      description: Gets transaction count by block number
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block number
        in: query
        name: number
        type: string
      - description: Block tag (latest, earliest, pending)
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction count in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction count in block by number
      tags:
      - Nodes
  /nodes/{id}/rpc/chain-id:
    get:
      consumes:
      - application/json
      description: Gets the chain ID
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chain ID in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get chain ID
      tags:
      - Nodes
  /nodes/{id}/rpc/code:
    get:
      consumes:
      - application/json
      description: Gets bytecode at an address (e.g., contract code)
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Contract address
        in: query
        name: address
        required: true
        type: string
      - description: 'Block tag (default: latest)'
        in: query
        name: blockTag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Bytecode in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get bytecode at an address
      tags:
      - Nodes
  /nodes/{id}/rpc/decode-input:
    get:
      consumes:
      - application/json
      description: Decodes transaction input data using function signatures from 4byte.directory
        and extracts parameter values
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction input data (hex)
        in: query
        name: input
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Decoded input data with parameter values
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found or signature not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Decode transaction input data
      tags:
      - Nodes
  /nodes/{id}/rpc/fee-history:
    get:
      consumes:
      - application/json
      description: Gets historical gas fees
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Number of blocks
        in: query
        name: blockCount
        required: true
        type: string
      - description: Newest block
        in: query
        name: newestBlock
        required: true
        type: string
      - description: Reward percentiles
        in: query
        name: rewardPercentiles
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Fee history object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get fee history
      tags:
      - Nodes
  /nodes/{id}/rpc/logs:
    post:
      consumes:
      - application/json
      description: Gets event logs based on filter criteria
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Log filter object
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Array of log objects
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get event logs
      tags:
      - Nodes
  /nodes/{id}/rpc/pending-transactions:
    get:
      consumes:
      - application/json
      description: Gets pending transactions in the mempool
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Array of transaction objects
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get pending transactions
      tags:
      - Nodes
  /nodes/{id}/rpc/protocol-version:
    get:
      consumes:
      - application/json
      description: Gets Ethereum protocol version
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Protocol version in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get protocol version
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-discard-validator-vote:
    post:
      consumes:
      - application/json
      description: Discards a pending vote for a validator proposal
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Discard vote request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.QbftDiscardValidatorVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success status
          schema:
            type: boolean
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Discard QBFT validator vote
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-pending-votes:
    get:
      consumes:
      - application/json
      description: Retrieves a map of pending validator proposals where keys are validator
        addresses and values are boolean (true indicates pending vote)
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Map of validator addresses to boolean values indicating pending
            votes
          schema:
            $ref: '#/definitions/service.QbftPendingVotes'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get QBFT pending votes
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-propose-validator-vote:
    post:
      consumes:
      - application/json
      description: Proposes a vote to add (true) or remove (false) a validator
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Propose vote request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.QbftProposeValidatorVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success status
          schema:
            type: boolean
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Propose QBFT validator vote
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-request-timeout:
    get:
      consumes:
      - application/json
      description: Gets QBFT request timeout in seconds
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request timeout in seconds
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get QBFT request timeout
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-signer-metrics:
    get:
      consumes:
      - application/json
      description: Gets QBFT signer metrics
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: QBFT signer metrics
          schema:
            items:
              $ref: '#/definitions/service.QbftSignerMetric'
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get QBFT signer metrics
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-validators-by-block-hash:
    get:
      consumes:
      - application/json
      description: Retrieves the list of validators for a specific block by its hash
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block hash
        in: query
        name: blockHash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of validator addresses
          schema:
            items:
              type: string
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get QBFT validators by block hash
      tags:
      - Nodes
  /nodes/{id}/rpc/qbft-validators-by-block-number:
    get:
      consumes:
      - application/json
      description: Retrieves the list of validators for a specific block by its number
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block number (hex string, 'latest', 'earliest', or 'pending')
        in: query
        name: blockNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of validator addresses
          schema:
            items:
              type: string
            type: array
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get QBFT validators by block number
      tags:
      - Nodes
  /nodes/{id}/rpc/storage:
    get:
      consumes:
      - application/json
      description: Gets storage value at a position for an address
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Contract address
        in: query
        name: address
        required: true
        type: string
      - description: Storage position
        in: query
        name: position
        required: true
        type: string
      - description: 'Block tag (default: latest)'
        in: query
        name: blockTag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Storage value in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get storage value at a position
      tags:
      - Nodes
  /nodes/{id}/rpc/syncing:
    get:
      consumes:
      - application/json
      description: Gets sync status
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sync object or false
          schema: {}
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get sync status
      tags:
      - Nodes
  /nodes/{id}/rpc/transaction-by-block-hash-and-index:
    get:
      consumes:
      - application/json
      description: Gets transaction by block hash and index
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block hash
        in: query
        name: hash
        required: true
        type: string
      - description: Transaction index
        in: query
        name: index
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction by block hash and index
      tags:
      - Nodes
  /nodes/{id}/rpc/transaction-by-block-number-and-index:
    get:
      consumes:
      - application/json
      description: Gets transaction by block number and index
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Block number
        in: query
        name: number
        type: string
      - description: Block tag (latest, earliest, pending)
        in: query
        name: tag
        type: string
      - description: Transaction index
        in: query
        name: index
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction by block number and index
      tags:
      - Nodes
  /nodes/{id}/rpc/transaction-by-hash:
    get:
      consumes:
      - application/json
      description: Gets transaction details by hash
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction hash
        in: query
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction object
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction by hash
      tags:
      - Nodes
  /nodes/{id}/rpc/transaction-count:
    get:
      consumes:
      - application/json
      description: Gets nonce (tx count) for an address
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Account address
        in: query
        name: address
        required: true
        type: string
      - description: 'Block tag (default: latest)'
        in: query
        name: blockTag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction count in hex
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction count for an address
      tags:
      - Nodes
  /nodes/{id}/rpc/transaction-receipt:
    get:
      consumes:
      - application/json
      description: Gets receipt for a transaction
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction hash
        in: query
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction receipt
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get transaction receipt
      tags:
      - Nodes
  /nodes/{id}/start:
    post:
      consumes:
      - application/json
      description: Start a node by ID
      operationId: startNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Start a node
      tags:
      - Nodes
  /nodes/{id}/stop:
    post:
      consumes:
      - application/json
      description: Stop a node by ID
      operationId: stopNode
      parameters:
      - description: Node ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stop a node
      tags:
      - Nodes
  /nodes/defaults/besu-node:
    get:
      description: Get default configuration for Besu nodes
      operationId: getBesuNodeDefaults
      parameters:
      - default: 1
        description: Number of Besu nodes
        in: query
        name: besuNodes
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.BesuNodeDefaultsResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Besu node defaults
      tags:
      - Nodes
  /nodes/defaults/fabric:
    get:
      description: Get default configuration for Fabric nodes
      operationId: getFabricNodesDefaults
      parameters:
      - default: 1
        description: Number of peer nodes
        in: query
        name: peerCount
        type: integer
      - default: 1
        description: Number of orderer nodes
        in: query
        name: ordererCount
        type: integer
      - default: service
        description: Mode (service/docker)
        enum:
        - service
        - docker
        in: query
        name: mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.NodesDefaultsResult'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric nodes defaults
      tags:
      - Nodes
  /nodes/defaults/fabric-orderer:
    get:
      description: Get default configuration for Fabric orderer nodes
      operationId: getFabricOrdererDefaults
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.NodeDefaults'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric orderer defaults
      tags:
      - Nodes
  /nodes/defaults/fabric-peer:
    get:
      description: Get default configuration for Fabric peer nodes
      operationId: getFabricPeerDefaults
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.NodeDefaults'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric peer defaults
      tags:
      - Nodes
  /nodes/deployment-modes:
    get:
      description: Returns the list of deployment modes available in the current environment
      operationId: getAvailableDeploymentModes
      produces:
      - application/json
      responses:
        "200":
          description: Available deployment modes
          schema:
            $ref: '#/definitions/types.DeploymentModesResponse'
      summary: Get available deployment modes
      tags:
      - Nodes
  /nodes/platform/{platform}:
    get:
      consumes:
      - application/json
      description: Get a paginated list of nodes filtered by blockchain platform
      operationId: listNodesByPlatform
      parameters:
      - description: Blockchain platform (FABRIC/BESU)
        enum:
        - FABRIC
        - BESU
        in: path
        name: platform
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.PaginatedNodesResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List nodes by platform
      tags:
      - Nodes
  /nodes/readiness/besu:
    get:
      consumes:
      - application/json
      description: Check if Java and Besu are installed and ready for deployment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.BesuReadinessResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Check Besu readiness
      tags:
      - Nodes
  /nodes/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Get a node by its unique slug identifier
      operationId: getNodeBySlug
      parameters:
      - description: Node Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.NodeResponse'
        "404":
          description: Node not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a node by slug
      tags:
      - Nodes
  /nodes/verify/besu:
    post:
      consumes:
      - application/json
      description: Verifies that a Besu binary can be executed for the specified version,
        downloading it if necessary
      operationId: verifyBesuVersion
      parameters:
      - description: Besu version verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.BesuVersionVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.BesuVersionVerificationResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Verify Besu binary version
      tags:
      - Nodes
  /notifications/providers:
    get:
      consumes:
      - application/json
      description: Get a list of all notification providers
      operationId: listNotificationProviders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/http.ProviderResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List notification providers
      tags:
      - Notifications
    post:
      consumes:
      - application/json
      description: Create a new notification provider with the specified configuration
      operationId: createNotificationProvider
      parameters:
      - description: Provider creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateProviderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/http.ProviderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new notification provider
      tags:
      - Notifications
  /notifications/providers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a notification provider
      operationId: deleteNotificationProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a notification provider
      tags:
      - Notifications
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific notification provider
      operationId: getNotificationProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ProviderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a notification provider
      tags:
      - Notifications
    put:
      consumes:
      - application/json
      description: Update an existing notification provider with new configuration
      operationId: updateNotificationProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      - description: Provider update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateProviderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ProviderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a notification provider
      tags:
      - Notifications
  /notifications/providers/{id}/test:
    post:
      consumes:
      - application/json
      description: Test a notification provider
      operationId: testNotificationProvider
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: integer
      - description: Test provider request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.TestProviderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.TestProviderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Test a notification provider
      tags:
      - Notifications
  /organizations:
    get:
      consumes:
      - application/json
      description: Get a list of all Fabric organizations
      operationId: listFabricOrganizations
      parameters:
      - default: 20
        description: Maximum number of organizations to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of organizations to skip
        in: query
        name: offset
        type: integer
      - description: Filter by MSP ID (optional)
        in: query
        name: mspId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.PaginatedOrganizationsResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all Fabric organizations
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create a new Fabric organization with the specified configuration
      operationId: createFabricOrganization
      parameters:
      - description: Organization creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new Fabric organization
      tags:
      - Organizations
  /organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Fabric organization by ID
      operationId: deleteFabricOrganization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a Fabric organization
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: Get a Fabric organization by ID
      operationId: getFabricOrganization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrganizationResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a Fabric organization
      tags:
      - Organizations
    put:
      consumes:
      - application/json
      description: Update an existing Fabric organization
      operationId: updateFabricOrganization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Organization update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a Fabric organization
      tags:
      - Organizations
  /organizations/{id}/crl:
    get:
      consumes:
      - application/json
      description: Get the current Certificate Revocation List for the organization
      operationId: getOrganizationCRL
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/x-pem-file
      responses:
        "200":
          description: PEM encoded CRL
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get organization's CRL
      tags:
      - Organizations
  /organizations/{id}/crl/revoke/pem:
    post:
      consumes:
      - application/json
      description: Add a certificate to the organization's CRL using its PEM encoded
        data
      operationId: revokeCertificateByPEM
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Certificate revocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RevokeCertificateByPEMRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Revoke a certificate using PEM data
      tags:
      - Organizations
  /organizations/{id}/crl/revoke/serial:
    delete:
      consumes:
      - application/json
      description: Remove a certificate from the organization's CRL using its serial
        number
      operationId: deleteRevokedCertificate
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Certificate deletion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.DeleteRevokedCertificateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a revoked certificate using its serial number
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Add a certificate to the organization's CRL using its serial number
      operationId: revokeCertificateBySerial
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Certificate revocation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RevokeCertificateBySerialRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Revoke a certificate using its serial number
      tags:
      - Organizations
  /organizations/{id}/identities:
    get:
      consumes:
      - application/json
      description: Get all identities (keys) created for an organization, grouped
        by identity type and key purpose
      operationId: getOrganizationKeys
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by identity type (admin, client, peer)
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.OrganizationKeyDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get all identities (keys) for an organization
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create a new identity (admin, client, or peer) for a Fabric organization
      operationId: createOrganizationIdentity
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Identity creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateIdentityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.IdentityResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new identity for an organization
      tags:
      - Organizations
  /organizations/{id}/keys:
    get:
      consumes:
      - application/json
      description: Get all keys associated with an organization from the organization_keys
        table
      operationId: listOrganizationKeys
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.OrganizationKeyDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all keys for an organization
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create a new key with a specific role (admin or client) for an
        organization
      operationId: createOrganizationKey
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Key creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateKeyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.KeyResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new key for an organization
      tags:
      - Organizations
  /organizations/{id}/keys/{keyId}:
    delete:
      consumes:
      - application/json
      description: Delete a key and its associated certificate
      operationId: deleteOrganizationKey
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: keyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a key
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: Get a specific key by its ID
      operationId: getOrganizationKey
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: keyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.KeyResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a specific key by ID
      tags:
      - Organizations
  /organizations/{id}/keys/renew:
    post:
      consumes:
      - application/json
      description: Renew a certificate for a specific key in an organization
      operationId: renewOrganizationCertificate
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Certificate renewal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RenewCertificateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.KeyResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Renew a certificate for a key
      tags:
      - Organizations
  /organizations/{id}/revoked-certificates:
    get:
      consumes:
      - application/json
      description: Get all revoked certificates for the organization
      operationId: getRevokedCertificates
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.RevokedCertificateResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get organization's revoked certificates
      tags:
      - Organizations
  /organizations/by-mspid/{mspid}:
    get:
      consumes:
      - application/json
      description: Get a Fabric organization by MSP ID
      operationId: getFabricOrganizationByMspID
      parameters:
      - description: MSP ID
        in: path
        name: mspid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrganizationResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a Fabric organization by MSP ID
      tags:
      - Organizations
  /organizations/import:
    post:
      consumes:
      - application/json
      description: Import an existing Fabric organization from raw certificates, Vault,
        or AWS KMS
      operationId: importFabricOrganization
      parameters:
      - description: Organization import request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.ImportOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Import an existing Fabric organization
      tags:
      - Organizations
  /permissions:
    get:
      consumes:
      - application/json
      description: Get a list of all permissions available in the system with their
        descriptions
      operationId: listPermissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.PermissionsResponse'
      summary: List all permissions
      tags:
      - Permissions
  /plugins:
    get:
      consumes:
      - application/json
      description: Get a list of all available plugins
      operationId: listPlugins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List all plugins
      tags:
      - Plugins
    post:
      consumes:
      - application/json
      description: Create a new plugin
      operationId: createPlugin
      parameters:
      - description: Plugin to create
        in: body
        name: plugin
        required: true
        schema:
          $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a plugin
      tags:
      - Plugins
  /plugins/{name}:
    delete:
      consumes:
      - application/json
      description: Delete a plugin (will stop it first if running)
      operationId: deletePlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a plugin
      tags:
      - Plugins
    get:
      consumes:
      - application/json
      description: Get a specific plugin by name
      operationId: getPlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a plugin
      tags:
      - Plugins
    put:
      consumes:
      - application/json
      description: Update an existing plugin
      operationId: updatePlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      - description: Plugin to update
        in: body
        name: plugin
        required: true
        schema:
          $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a plugin
      tags:
      - Plugins
  /plugins/{name}/deploy:
    post:
      consumes:
      - application/json
      description: Deploy a plugin with the given parameters
      operationId: deployPlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      - description: Deployment parameters
        in: body
        name: parameters
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Deploy a plugin
      tags:
      - Plugins
  /plugins/{name}/deployment-status:
    get:
      consumes:
      - application/json
      description: Get detailed information about a plugin deployment including service
        status, logs, and metrics
      operationId: getDeploymentStatus
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.DeploymentStatus'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get detailed deployment status
      tags:
      - Plugins
  /plugins/{name}/resume:
    post:
      consumes:
      - application/json
      description: Resume a previously deployed plugin
      operationId: resumePlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Resume a plugin deployment
      tags:
      - Plugins
  /plugins/{name}/services:
    get:
      consumes:
      - application/json
      description: Get all services defined in the plugin's docker-compose configuration
      operationId: getDockerComposeServices
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/plugin.ServiceStatus'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Docker Compose services
      tags:
      - Plugins
  /plugins/{name}/services/{service}/logs:
    get:
      consumes:
      - application/json
      description: Get logs from a specific container in a plugin deployment. When
        follow=true, streams logs in real-time using Server-Sent Events. When follow=false,
        returns all logs directly as plain text.
      operationId: getPluginContainerLogs
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      - description: Service name
        in: path
        name: service
        required: true
        type: string
      - default: false
        description: Follow logs in real-time (uses SSE)
        in: query
        name: follow
        type: boolean
      - default: 100
        description: Number of lines to show from the end
        in: query
        name: tail
        type: integer
      produces:
      - text/event-stream
      - text/plain
      responses:
        "200":
          description: Log content (plain text when follow=false, SSE stream when
            follow=true)
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Plugin or service not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get container logs
      tags:
      - Plugins
  /plugins/{name}/status:
    get:
      consumes:
      - application/json
      description: Get the current status of a plugin deployment
      operationId: getPluginStatus
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.DeploymentStatus'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get plugin deployment status
      tags:
      - Plugins
  /plugins/{name}/stop:
    post:
      consumes:
      - application/json
      description: Stop a running plugin deployment
      operationId: stopPlugin
      parameters:
      - description: Plugin name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Stop a plugin deployment
      tags:
      - Plugins
  /plugins/available:
    get:
      consumes:
      - application/json
      description: Get a list of all available plugins from configured GitHub repositories
      operationId: listAvailablePlugins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plugin.AvailablePluginsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List available plugins from GitHub sources
      tags:
      - Plugins
  /plugins/available/refresh:
    post:
      consumes:
      - application/json
      description: Triggers a refresh of the available plugins cache from GitHub sources
      operationId: refreshAvailablePlugins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plugin.AvailablePluginsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Refresh available plugins
      tags:
      - Plugins
  /pro/chaincodes/proposals:
    get:
      description: List all chaincode proposals, optionally filtered by network ID
      operationId: listChaincodeProposals
      parameters:
      - description: Network ID to filter proposals
        in: query
        name: network_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pro.ChaincodeProposal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List chaincode proposals
      tags:
      - chaincode
    post:
      consumes:
      - application/json
      description: Create a new chaincode proposal
      operationId: createChaincodeProposal
      parameters:
      - description: Chaincode proposal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.CreateChaincodeProposalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.ChaincodeProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new chaincode proposal
      tags:
      - chaincode
  /pro/chaincodes/proposals/{proposalId}:
    get:
      description: Get details of a specific chaincode proposal, including its definition
        and chaincode if accepted
      operationId: getChaincodeProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ChaincodeDefinitionWithChaincode'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a chaincode proposal
      tags:
      - chaincode
  /pro/chaincodes/proposals/{proposalId}/accept:
    post:
      consumes:
      - application/json
      description: Accept a chaincode proposal, create the chaincode and definition
        if needed, and return the full structure
      operationId: acceptChaincodeProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ChaincodeDefinitionWithChaincode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Accept a chaincode proposal
      tags:
      - chaincode
  /pro/chaincodes/proposals/{proposalId}/share:
    post:
      consumes:
      - application/json
      description: Share a chaincode proposal with specified connection IDs
      operationId: shareChaincodeProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      - description: Share chaincode proposal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ShareChaincodeProposalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ShareChaincodeProposalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a chaincode proposal with recipients
      tags:
      - chaincode
  /pro/key/receive:
    post:
      consumes:
      - application/json
      description: Process a received key share and store it in the local key management
        system
      operationId: receiveKey
      parameters:
      - description: Key receive request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ReceiveKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ReceiveKeyResponse'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive a shared key
      tags:
      - Pro
  /pro/keys/shared-with-me:
    get:
      consumes:
      - application/json
      description: Retrieve all cryptographic keys that have been shared with the
        current user/node
      operationId: getKeysSharedWithMe
      parameters:
      - description: Filter by status (e.g., 'pending', 'active', 'expired')
        in: query
        name: status
        type: string
      - description: Filter by expiration status
        in: query
        name: expired
        type: boolean
      - description: Number of results to return
        in: query
        name: limit
        type: integer
      - description: Number of results to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.GetKeysSharedWithMeResponse'
        "400":
          description: invalid request parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get keys shared with the current user/node
      tags:
      - Pro
  /pro/networks/proposals:
    get:
      description: List all config update proposals, optionally filtered by network_id
      operationId: listGovernanceProposals
      parameters:
      - description: Network ID to filter proposals
        format: int64
        in: query
        name: network_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ListProposalsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List governance proposals
      tags:
      - governance
    post:
      consumes:
      - application/json
      description: Create a new governance proposal for a Fabric network
      operationId: createGovernanceProposal
      parameters:
      - description: Proposal request (network_id and proposal_type required)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.PrepareConfigUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.PrepareConfigUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a new governance proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}:
    get:
      description: Get details of a specific config update proposal
      operationId: getGovernanceProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ProposalResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get a governance proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/events:
    get:
      description: Get a list of events for a specific config update proposal
      operationId: listGovernanceEvents
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pro.GovernanceEvent'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List events for a proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/share:
    post:
      consumes:
      - application/json
      description: Share a config update proposal with a connected node
      operationId: shareGovernanceProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      - description: Share proposal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ShareProposalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a proposal with a connection
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/sign:
    post:
      consumes:
      - application/json
      description: Sign a config update proposal with the specified organization's
        credentials
      operationId: signGovernanceProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      - description: Signing request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.SignConfigUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SignConfigUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Sign a config update proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/signatures:
    get:
      description: Get a list of signatures for a specific config update proposal
      operationId: listGovernanceSignatures
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.ListSignaturesResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List signatures for a proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/signatures/{signatureId}:
    delete:
      description: Delete a specific signature by its ID
      operationId: deleteGovernanceSignature
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      - description: Signature ID
        in: path
        name: signatureId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a signature from a proposal
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/signatures/share:
    post:
      consumes:
      - application/json
      description: Share a signature with a specific connection
      operationId: shareGovernanceSignature
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      - description: Share signature request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ShareSignatureRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a signature with a connection
      tags:
      - governance
  /pro/networks/proposals/{proposalId}/submit:
    post:
      consumes:
      - application/json
      description: Submit a signed config update proposal for execution
      operationId: submitGovernanceProposal
      parameters:
      - description: Proposal ID
        in: path
        name: proposalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SubmitConfigUpdateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Submit config update proposal
      tags:
      - governance
  /pro/receive:
    post:
      consumes:
      - application/json
      description: Handles all incoming governance messages and routes by SubType
      operationId: receiveGovernanceMessage
      parameters:
      - description: Node Signature
        in: header
        name: X-Node-Signature
        required: true
        type: string
      - description: Governance Message Envelope
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/communication.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive governance message
      tags:
      - governance
  /pro/receive/chaincode:
    post:
      consumes:
      - application/json
      description: Receive a shared chaincode definition from another node
      operationId: receiveChaincodeShare
      parameters:
      - description: Chaincode share receive request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ReceiveChaincodeShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive a shared chaincode definition (pro-only)
      tags:
      - Pro
  /pro/receive/config-update:
    post:
      consumes:
      - application/json
      description: Receive a shared config update proposal from another node
      operationId: receiveConfigUpdateShare
      parameters:
      - description: Config update share receive request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ReceiveConfigUpdateShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive a shared config update proposal (pro-only)
      tags:
      - Pro
  /pro/receive/key:
    post:
      consumes:
      - application/json
      description: Receive a shared cryptographic key from another node
      operationId: receiveKeyShare
      parameters:
      - description: Key share receive request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ReceiveKeyShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive a shared key (pro-only)
      tags:
      - Pro
  /pro/receive/network:
    post:
      consumes:
      - application/json
      description: Receive a shared network from another node
      operationId: receiveNetworkShare
      parameters:
      - description: Network share receive request (must include signature)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/communication.ReceiveNetworkShareRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Receive a shared network (pro-only)
      tags:
      - Pro
  /pro/shared-chaincodes:
    get:
      description: List all chaincode definitions shared with us
      operationId: listSharedChaincodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SharedChaincodeListResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List shared chaincode definitions
      tags:
      - Pro
  /pro/shared-chaincodes/{chaincodeId}:
    get:
      description: Get details of a specific shared chaincode definition
      operationId: getSharedChaincode
      parameters:
      - description: Chaincode Share ID
        in: path
        name: chaincodeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SharedChaincodeDetailResponse'
        "404":
          description: share not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get shared chaincode definition
      tags:
      - Pro
  /pro/shared-networks:
    get:
      description: List all networks shared with us (both Fabric and Besu)
      operationId: listSharedNetworks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SharedNetworkListResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List shared networks
      tags:
      - Pro
  /pro/shared-networks/{networkId}:
    get:
      description: Get a shared network by networkId
      operationId: getSharedNetwork
      parameters:
      - description: Network ID
        in: path
        name: networkId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.SharedNetworkDetailResponse'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get shared network
      tags:
      - Pro
  /pro/shared-networks/{shareId}:
    delete:
      description: Delete (revoke) a shared network by shareId
      operationId: deleteSharedNetwork
      parameters:
      - description: Share ID
        in: path
        name: shareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid share ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: share not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a shared network
      tags:
      - Pro
  /pro/shared-networks/{shareId}/accept:
    post:
      consumes:
      - application/json
      description: Accept a shared network and import it locally
      operationId: acceptSharedNetwork
      parameters:
      - description: Share ID
        in: path
        name: shareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.AcceptSharedNetworkResponse'
        "400":
          description: invalid share ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: share not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Accept a shared network
      tags:
      - Pro
  /pro/shared-networks/{shareId}/reject:
    post:
      consumes:
      - application/json
      description: Reject a shared network
      operationId: rejectSharedNetwork
      parameters:
      - description: Share ID
        in: path
        name: shareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pro.RejectSharedNetworkResponse'
        "400":
          description: invalid share ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: share not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Reject a shared network
      tags:
      - Pro
  /pro/sharing/besu-network:
    post:
      consumes:
      - application/json
      description: Share a Besu network (genesis block, config, etc) with specific
        peers.
      operationId: shareBesuNetwork
      parameters:
      - description: Besu network share request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.NetworkShareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.NetworkShareResponse'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a Besu network (pro-only)
      tags:
      - Pro
  /pro/sharing/chaincode:
    post:
      consumes:
      - application/json
      description: Share a chaincode definition (sequence, version, docker image,
        etc) with specific peers.
      operationId: shareChaincode
      parameters:
      - description: Chaincode share request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ChaincodeShareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.ChaincodeShareResponse'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a chaincode definition (pro-only)
      tags:
      - Pro
  /pro/sharing/config-proposal:
    post:
      consumes:
      - application/json
      description: Share a config update proposal (channel name, config update bytes,
        etc) with specific peers.
      operationId: shareConfigProposal
      parameters:
      - description: Config proposal share request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.ConfigProposalShareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.ConfigProposalShareResponse'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a config update proposal (pro-only)
      tags:
      - Pro
  /pro/sharing/key:
    post:
      consumes:
      - application/json
      description: Share a cryptographic key with a specific peer connection
      operationId: shareKey
      parameters:
      - description: Key share request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.KeyShareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.KeyShareResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a key with a peer
      tags:
      - Pro
  /pro/sharing/network:
    post:
      consumes:
      - application/json
      description: Share a network (genesis block, etc) with specific peers.
      operationId: shareNetwork
      parameters:
      - description: Network share request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/pro.NetworkShareRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pro.NetworkShareResponse'
        "400":
          description: invalid request body
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Share a network (pro-only)
      tags:
      - Pro
  /projects/{projectId}/dirs/create:
    post:
      consumes:
      - application/json
      description: Create a new directory in a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Directory create info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dirs.CreateDirRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dirs.CreateDirResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a directory
      tags:
      - directories
  /projects/{projectId}/dirs/delete:
    delete:
      consumes:
      - application/json
      description: Delete a directory in a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Project name
        in: query
        name: project
        required: true
        type: string
      - description: Directory to delete, relative to project root
        in: query
        name: dir
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dirs.DeleteDirResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a directory
      tags:
      - directories
  /projects/{projectId}/dirs/list:
    get:
      description: List files and directories in a given project and directory. Large
        directories (e.g., node_modules) are summarized/skipped.
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Directory to list, relative to project root
        in: query
        name: dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dirs.ListEntriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List files and directories
      tags:
      - directories
  /projects/{projectId}/files/delete:
    delete:
      consumes:
      - application/json
      description: Delete a file in a project
      operationId: deleteFile
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: File path relative to project root
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.DeleteFileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a file
      tags:
      - Chaincode Projects
  /projects/{projectId}/files/entries:
    get:
      description: List the full directory tree for a project, excluding large/ignored
        folders (e.g., node_modules, .git)
      operationId: listFilesEntries
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.DirectoryTreeNode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List full project directory tree
      tags:
      - Chaincode Projects
  /projects/{projectId}/files/list:
    get:
      consumes:
      - application/json
      description: List files in a given project and directory
      operationId: listFiles
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: Directory to list, relative to project root
        in: query
        name: dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.ListFilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List files
      tags:
      - Chaincode Projects
  /projects/{projectId}/files/read:
    get:
      consumes:
      - application/json
      description: Get the contents of a file in a project
      operationId: readFile
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: File path relative to project root
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.ReadFileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Read file contents
      tags:
      - Chaincode Projects
  /projects/{projectId}/files/write:
    post:
      consumes:
      - application/json
      description: Write or modify the contents of a file in a project
      operationId: writeFile
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      - description: File write info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/files.WriteFileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/files.WriteFileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Write file contents
      tags:
      - Chaincode Projects
  /roles:
    get:
      consumes:
      - application/json
      description: Get a list of all roles with their associated permissions
      operationId: listRoles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/auth.RolePermissionsInfo'
            type: array
      summary: List all roles
      tags:
      - Permissions
  /sc/besu/deploy:
    post:
      consumes:
      - application/json
      description: Deploy a smart contract to a Besu network
      operationId: deployBesuContract
      parameters:
      - description: Besu contract deployment parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.BesuDeployRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.BesuDeployResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Deploy Besu contract
      tags:
      - SmartContracts
  /sc/fabric/chaincodes:
    get:
      description: List all chaincodes in the system
      operationId: listFabricChaincodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ListChaincodesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List Fabric chaincodes
      tags:
      - SmartContracts
    post:
      consumes:
      - application/json
      description: Create a new chaincode
      operationId: createChaincode
      parameters:
      - description: Chaincode info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.CreateChaincodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.CreateChaincodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a chaincode
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{chaincodeId}/definitions:
    get:
      consumes:
      - application/json
      description: List all definitions for a given chaincode
      operationId: listChaincodeDefinitions
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ListChaincodeDefinitionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List chaincode definitions for a chaincode
      tags:
      - Chaincode
    post:
      consumes:
      - application/json
      description: Create a new chaincode definition for a chaincode
      operationId: createChaincodeDefinition
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      - description: Chaincode definition info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.CreateChaincodeDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.CreateChaincodeDefinitionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create a chaincode definition
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{chaincodeId}/definitions/{definitionId}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific chaincode definition
        including its events
      operationId: getChaincodeDefinitionDetail
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get chaincode definition details by ID
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{chaincodeId}/invoke:
    post:
      consumes:
      - application/json
      description: Invoke a transaction on a specific chaincode
      operationId: invokeChaincode
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      - description: Invoke parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.ChaincodeInvokeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeInvokeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Invoke a chaincode
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{chaincodeId}/metadata:
    get:
      consumes:
      - application/json
      description: Get metadata for a specific chaincode by executing org.hyperledger.fabric:GetMetadata
      operationId: getChaincodeMetadata
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeMetadataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get chaincode metadata
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{chaincodeId}/query:
    post:
      consumes:
      - application/json
      description: Query a specific chaincode
      operationId: queryChaincode
      parameters:
      - description: Chaincode ID
        in: path
        name: chaincodeId
        required: true
        type: integer
      - description: Query parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.ChaincodeQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Query a chaincode
      tags:
      - Chaincode
  /sc/fabric/chaincodes/{id}:
    delete:
      description: Delete a chaincode and all its definitions
      operationId: deleteChaincode
      parameters:
      - description: Chaincode ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a chaincode
      tags:
      - Chaincode
    get:
      description: Get detailed information about a specific chaincode
      operationId: getFabricChaincodeDetail
      parameters:
      - description: Chaincode ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric chaincode detail
      tags:
      - SmartContracts
  /sc/fabric/definitions/{definitionId}:
    delete:
      consumes:
      - application/json
      description: Delete a chaincode definition by ID
      operationId: deleteChaincodeDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete a chaincode definition
      tags:
      - Chaincode
    put:
      consumes:
      - application/json
      description: Update an existing chaincode definition by ID
      operationId: updateChaincodeDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - description: Chaincode definition update info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.UpdateChaincodeDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update a chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/approve:
    post:
      consumes:
      - application/json
      description: Approve chaincode for a given definition
      operationId: approveChaincodeByDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - description: Peer ID to use for approval
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.ApproveChaincodeByDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Approve chaincode based on chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/commit:
    post:
      consumes:
      - application/json
      description: Commit chaincode for a given definition
      operationId: commitChaincodeByDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - description: Peer ID to use for commit
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.CommitChaincodeByDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Commit chaincode based on chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/deploy:
    post:
      consumes:
      - application/json
      description: Deploy chaincode for a given definition using Docker image
      operationId: deployChaincodeByDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - description: Docker deploy params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.DeployChaincodeByDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Deploy chaincode based on chaincode definition (Docker)
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/docker-info:
    get:
      consumes:
      - application/json
      description: Get Docker container info for a specific chaincode definition by
        ID
      operationId: getChaincodeDefinitionDockerInfo
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.DockerContainerInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Docker info for a chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/install:
    post:
      consumes:
      - application/json
      description: Install chaincode on peers for a given definition
      operationId: installChaincodeByDefinition
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - description: Peer IDs to install on
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.InstallChaincodeByDefinitionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Install chaincode based on chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/logs:
    get:
      consumes:
      - application/json
      description: Get logs from a chaincode container by definition ID. When follow=true,
        streams logs in real-time using Server-Sent Events. When follow=false, returns
        all logs directly as plain text.
      operationId: getChaincodeDefinitionLogs
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      - default: false
        description: Follow logs in real-time (uses SSE)
        in: query
        name: follow
        type: boolean
      - default: 100
        description: Number of lines to show from the end
        in: query
        name: tail
        type: integer
      produces:
      - text/event-stream
      - text/plain
      responses:
        "200":
          description: Log content (plain text when follow=false, SSE stream when
            follow=true)
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Chaincode definition or container not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get chaincode container logs
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/timeline:
    get:
      consumes:
      - application/json
      description: Get the timeline of install/approve/commit/deploy events for a
        chaincode definition
      operationId: getChaincodeDefinitionTimeline
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chainlaunchdeploy.ChaincodeDefinitionEvent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get timeline of events for a chaincode definition
      tags:
      - Chaincode
  /sc/fabric/definitions/{definitionId}/undeploy:
    post:
      consumes:
      - application/json
      description: Remove the deployment (e.g., Docker container) for a given chaincode
        definition
      operationId: removeChaincodeDeployment
      parameters:
      - description: Chaincode Definition ID
        in: path
        name: definitionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Remove deployment for a chaincode definition
      tags:
      - Chaincode
  /sc/fabric/deploy:
    post:
      consumes:
      - application/json
      description: Deploy a chaincode to a Fabric network (install, approve, commit)
      operationId: deployFabricChaincode
      parameters:
      - description: Fabric chaincode deployment parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.FabricDeployRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.FabricDeployResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Deploy Fabric chaincode
      tags:
      - SmartContracts
  /sc/fabric/peer/{peerId}/chaincode/approve:
    post:
      consumes:
      - application/json
      description: Approve a chaincode definition on a Fabric peer
      operationId: approveFabricChaincode
      parameters:
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: string
      - description: Fabric chaincode approve parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.FabricApproveRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.FabricApproveResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Approve Fabric chaincode
      tags:
      - SmartContracts
  /sc/fabric/peer/{peerId}/chaincode/commit:
    post:
      consumes:
      - application/json
      description: Commit a chaincode definition to a Fabric channel
      operationId: commitFabricChaincode
      parameters:
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: string
      - description: Fabric chaincode commit parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.FabricCommitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.FabricCommitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Commit Fabric chaincode
      tags:
      - SmartContracts
  /sc/fabric/peer/{peerId}/chaincode/install:
    post:
      consumes:
      - application/json
      description: Install a chaincode package on a Fabric peer
      operationId: installFabricChaincode
      parameters:
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: string
      - description: Fabric chaincode install parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chainlaunchdeploy.FabricInstallRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.FabricInstallResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Install Fabric chaincode
      tags:
      - SmartContracts
  /sc/fabric/peer/{peerId}/chaincode/sequence:
    get:
      description: Get the current sequence number for a chaincode on a channel
      operationId: getFabricChaincodeSequence
      parameters:
      - description: Peer ID
        in: path
        name: peerId
        required: true
        type: string
      - description: Chaincode name
        in: query
        name: chaincodeName
        required: true
        type: string
      - description: Channel name
        in: query
        name: channelName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chainlaunchdeploy.FabricSequenceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get Fabric chaincode sequence
      tags:
      - SmartContracts
  /settings:
    get:
      description: Get the default setting's details
      operationId: getSetting
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Setting'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get the default setting
      tags:
      - Settings
    post:
      consumes:
      - application/json
      description: Create or update the default setting with the provided configuration
      operationId: createOrUpdateSetting
      parameters:
      - description: Setting configuration
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/service.CreateSettingParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.Setting'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create or update the default setting
      tags:
      - Settings
  /templates:
    get:
      description: Get a list of all active templates with optional filtering
      operationId: listTemplates
      parameters:
      - description: Filter by platform
        enum:
        - FABRIC
        - BESU
        - ETHEREUM
        in: query
        name: platform
        type: string
      - description: Filter by node type
        enum:
        - peer
        - orderer
        - fullnode
        - validator
        in: query
        name: node_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of templates
          schema:
            items:
              $ref: '#/definitions/templates.Template'
            type: array
      summary: List templates
      tags:
      - Templates
    post:
      consumes:
      - application/json
      description: Create a new template for blockchain nodes with platform-specific
        configuration
      operationId: createTemplate
      parameters:
      - description: Template creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/templates.CreateTemplateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created template
          schema:
            $ref: '#/definitions/templates.Template'
      summary: Create a new node template
      tags:
      - Templates
  /templates/{id}:
    delete:
      description: Soft delete a template (marks as inactive)
      operationId: deleteTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Template deleted
      summary: Delete a template
      tags:
      - Templates
    get:
      description: Retrieve a specific template by its ID
      operationId: getTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Template details
          schema:
            $ref: '#/definitions/templates.Template'
      summary: Get a template by ID
      tags:
      - Templates
    put:
      consumes:
      - application/json
      description: Update an existing template's configuration
      operationId: updateTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      - description: Template update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/templates.UpdateTemplateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated template
          schema:
            $ref: '#/definitions/templates.Template'
      summary: Update a template
      tags:
      - Templates
  /templates/{id}/apply:
    post:
      consumes:
      - application/json
      description: Apply a template to generate node configuration with variable substitution
      operationId: applyTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      - description: Template application request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/templates.ApplyTemplateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Generated node configuration
          schema:
            additionalProperties: true
            type: object
      summary: Apply a template
      tags:
      - Templates
  /templates/{id}/export:
    get:
      description: Export a template as JSON for backup or sharing
      operationId: exportTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exported template data
          schema:
            $ref: '#/definitions/templates.TemplateExportData'
      summary: Export a template
      tags:
      - Templates
  /templates/{id}/set-default:
    post:
      description: Set a template as the default for its platform and node type
      operationId: setDefaultTemplate
      parameters:
      - description: Template ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Set template as default
      tags:
      - Templates
  /templates/import:
    post:
      consumes:
      - application/json
      description: Import a template from exported JSON data
      operationId: importTemplate
      parameters:
      - description: Exported template data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/templates.TemplateExportData'
      produces:
      - application/json
      responses:
        "201":
          description: Imported template
          schema:
            $ref: '#/definitions/templates.Template'
      summary: Import a template
      tags:
      - Templates
  /templates/platforms/{platform}:
    get:
      description: Get all templates for a specific blockchain platform
      operationId: listTemplatesByPlatform
      parameters:
      - description: Platform name
        enum:
        - FABRIC
        - BESU
        - ETHEREUM
        in: path
        name: platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of templates for the platform
          schema:
            items:
              $ref: '#/definitions/templates.Template'
            type: array
      summary: List templates by platform
      tags:
      - Templates
  /templates/platforms/{platform}/{nodeType}/default:
    get:
      description: Get the default template for a specific platform and node type
      operationId: getDefaultTemplate
      parameters:
      - description: Platform name
        enum:
        - FABRIC
        - BESU
        - ETHEREUM
        in: path
        name: platform
        required: true
        type: string
      - description: Node type
        enum:
        - peer
        - orderer
        - fullnode
        - validator
        in: path
        name: nodeType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Default template
          schema:
            $ref: '#/definitions/templates.Template'
      summary: Get default template
      tags:
      - Templates
  /templates/popular:
    get:
      description: Get the most frequently used templates
      operationId: getPopularTemplates
      parameters:
      - default: 10
        description: Maximum number of templates to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Popular templates
          schema:
            items:
              $ref: '#/definitions/templates.Template'
            type: array
      summary: Get popular templates
      tags:
      - Templates
  /templates/search:
    get:
      description: Search for templates using various criteria
      operationId: searchTemplates
      parameters:
      - description: Search query (matches name and description)
        in: query
        name: query
        type: string
      - description: Filter by platform
        enum:
        - FABRIC
        - BESU
        - ETHEREUM
        in: query
        name: platform
        type: string
      - description: Filter by node type
        enum:
        - peer
        - orderer
        - fullnode
        - validator
        in: query
        name: node_type
        type: string
      - description: Filter by tags (comma-separated)
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Matching templates
          schema:
            items:
              $ref: '#/definitions/templates.Template'
            type: array
      summary: Search templates
      tags:
      - Templates
  /troubleshooting/check-port:
    post:
      consumes:
      - application/json
      description: Check if a specific port is open on a host
      parameters:
      - description: Port check request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/troubleshooting.PortCheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/troubleshooting.PortCheckResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check port availability
      tags:
      - troubleshooting
  /troubleshooting/ping:
    post:
      consumes:
      - application/json
      description: Send ICMP ping requests to a host
      parameters:
      - description: Ping request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/troubleshooting.PingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/troubleshooting.PingResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Ping a host
      tags:
      - troubleshooting
  /troubleshooting/public-ip:
    get:
      description: Get the server's public IP address and location information
      produces:
      - application/json
      responses:
        "200":
          description: IP information
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get public IP address
      tags:
      - troubleshooting
  /troubleshooting/test-connection:
    post:
      consumes:
      - application/json
      description: Test connectivity to a specified endpoint
      parameters:
      - description: Connection test request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/troubleshooting.ConnectionTestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/troubleshooting.ConnectionTestResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Test network connection
      tags:
      - troubleshooting
  /troubleshooting/validate-certificate:
    post:
      consumes:
      - application/json
      description: Validate and parse X.509 certificate
      parameters:
      - description: Certificate validation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/troubleshooting.CertificateValidationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/troubleshooting.CertificateValidationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Validate certificate
      tags:
      - troubleshooting
  /user-notifications:
    get:
      description: Get paginated list of user notifications, ordered chronologically
        (newest first)
      parameters:
      - description: Limit number of notifications (max 100, default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.NotificationRecord'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get user notifications
      tags:
      - User Notifications
  /user-notifications/{id}:
    delete:
      description: Delete a specific notification
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete notification
      tags:
      - User Notifications
  /user-notifications/{id}/read:
    post:
      description: Mark a specific notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Mark notification as read
      tags:
      - User Notifications
  /user-notifications/{id}/unread:
    post:
      description: Mark a specific notification as unread
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Mark notification as unread
      tags:
      - User Notifications
  /user-notifications/read-all:
    post:
      description: Mark all notifications for the current user as read
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Mark all notifications as read
      tags:
      - User Notifications
  /user-notifications/type/{eventType}:
    get:
      description: Get paginated list of notifications filtered by event type
      parameters:
      - description: Event type to filter by
        in: path
        name: eventType
        required: true
        type: string
      - description: Limit number of notifications (max 100, default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.NotificationRecord'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get notifications by type
      tags:
      - User Notifications
  /user-notifications/type/{eventType}/read-all:
    post:
      description: Mark all notifications of a specific type as read for the current
        user
      parameters:
      - description: Event type to mark as read
        in: path
        name: eventType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Mark notifications by type as read
      tags:
      - User Notifications
  /user-notifications/unread:
    get:
      description: Get paginated list of unread user notifications, ordered chronologically
        (newest first)
      parameters:
      - description: Limit number of notifications (max 100, default 20)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/service.NotificationRecord'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get unread user notifications
      tags:
      - User Notifications
  /user-notifications/unread/count:
    get:
      description: Get the count of unread notifications for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    format: int64
                    type: integer
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get unread notification count
      tags:
      - User Notifications
  /users:
    get:
      description: Returns a list of all users (admin only)
      operationId: listUsers
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/auth.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with specified role (admin only)
      operationId: createUser
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Create new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Deletes a user (admin only)
      operationId: deleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: User deleted
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get a user's details by ID (admin only)
      operationId: getUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates an existing user (admin only)
      operationId: updateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User updates
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update user
      tags:
      - Users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password (admin only)
      operationId: updateUserPassword
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role or self-modification not allowed
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update user password
      tags:
      - Users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role (admin only)
      operationId: updateUserRole
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New role
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User role updated
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden - Requires admin role or self-modification not allowed
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BasicAuth: []
      - CookieAuth: []
      summary: Update user role
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Type "Bearer" followed by a space and then your token or API key
    in: header
    name: Authorization
    type: apiKey
  CookieAuth:
    in: header
    name: session_id
    type: apiKey
swagger: "2.0"
tags:
- description: Audit management operations
  name: Audit
- description: User authentication and authorization operations
  name: Authentication
- description: API key management and authentication
  name: API Keys
- description: Backup schedule configuration and management
  name: Backup Schedules
- description: Backup target location configuration and management
  name: Backup Targets
- description: Backup management operations
  name: Backups
- description: Hyperledger Besu network management operations
  name: Besu Networks
- description: Hyperledger Fabric network management operations
  name: Fabric Networks
- description: Cryptographic key management operations
  name: Keys
- description: Metrics management operations
  name: Metrics
- description: Network node management operations
  name: Nodes
- description: System notification configuration and management
  name: Notifications
- description: Organization management operations
  name: Organizations
- description: Plugin management operations
  name: Plugins
- description: Key provider management operations
  name: Providers
- description: Settings management operations
  name: Settings
- description: Smart contract management operations
  name: SmartContracts
- description: User account management operations
  name: Users
- description: Network troubleshooting and diagnostic operations
  name: troubleshooting
