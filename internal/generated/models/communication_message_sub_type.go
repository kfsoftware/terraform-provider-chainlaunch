// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommunicationMessageSubType communication message sub type
//
// swagger:model communication.MessageSubType
type CommunicationMessageSubType string

func NewCommunicationMessageSubType(value CommunicationMessageSubType) *CommunicationMessageSubType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommunicationMessageSubType.
func (m CommunicationMessageSubType) Pointer() *CommunicationMessageSubType {
	return &m
}

const (

	// CommunicationMessageSubTypeShareNetwork captures enum value "ShareNetwork"
	CommunicationMessageSubTypeShareNetwork CommunicationMessageSubType = "ShareNetwork"

	// CommunicationMessageSubTypeShareBesuNetwork captures enum value "ShareBesuNetwork"
	CommunicationMessageSubTypeShareBesuNetwork CommunicationMessageSubType = "ShareBesuNetwork"

	// CommunicationMessageSubTypeShareConfigUpdate captures enum value "ShareConfigUpdate"
	CommunicationMessageSubTypeShareConfigUpdate CommunicationMessageSubType = "ShareConfigUpdate"

	// CommunicationMessageSubTypeShareChaincodeDefinition captures enum value "ShareChaincodeDefinition"
	CommunicationMessageSubTypeShareChaincodeDefinition CommunicationMessageSubType = "ShareChaincodeDefinition"

	// CommunicationMessageSubTypeShareSignature captures enum value "ShareSignature"
	CommunicationMessageSubTypeShareSignature CommunicationMessageSubType = "ShareSignature"

	// CommunicationMessageSubTypeShareKey captures enum value "ShareKey"
	CommunicationMessageSubTypeShareKey CommunicationMessageSubType = "ShareKey"
)

// for schema
var communicationMessageSubTypeEnum []any

func init() {
	var res []CommunicationMessageSubType
	if err := json.Unmarshal([]byte(`["ShareNetwork","ShareBesuNetwork","ShareConfigUpdate","ShareChaincodeDefinition","ShareSignature","ShareKey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		communicationMessageSubTypeEnum = append(communicationMessageSubTypeEnum, v)
	}
}

func (m CommunicationMessageSubType) validateCommunicationMessageSubTypeEnum(path, location string, value CommunicationMessageSubType) error {
	if err := validate.EnumCase(path, location, value, communicationMessageSubTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this communication message sub type
func (m CommunicationMessageSubType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommunicationMessageSubTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this communication message sub type based on context it is used
func (m CommunicationMessageSubType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
