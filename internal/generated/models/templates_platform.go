// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TemplatesPlatform templates platform
//
// swagger:model templates.Platform
type TemplatesPlatform string

func NewTemplatesPlatform(value TemplatesPlatform) *TemplatesPlatform {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TemplatesPlatform.
func (m TemplatesPlatform) Pointer() *TemplatesPlatform {
	return &m
}

const (

	// TemplatesPlatformFABRIC captures enum value "FABRIC"
	TemplatesPlatformFABRIC TemplatesPlatform = "FABRIC"

	// TemplatesPlatformBESU captures enum value "BESU"
	TemplatesPlatformBESU TemplatesPlatform = "BESU"

	// TemplatesPlatformETHEREUM captures enum value "ETHEREUM"
	TemplatesPlatformETHEREUM TemplatesPlatform = "ETHEREUM"

	// TemplatesPlatformBITCOIN captures enum value "BITCOIN"
	TemplatesPlatformBITCOIN TemplatesPlatform = "BITCOIN"

	// TemplatesPlatformPOLKADOT captures enum value "POLKADOT"
	TemplatesPlatformPOLKADOT TemplatesPlatform = "POLKADOT"

	// TemplatesPlatformCOSMOS captures enum value "COSMOS"
	TemplatesPlatformCOSMOS TemplatesPlatform = "COSMOS"
)

// for schema
var templatesPlatformEnum []any

func init() {
	var res []TemplatesPlatform
	if err := json.Unmarshal([]byte(`["FABRIC","BESU","ETHEREUM","BITCOIN","POLKADOT","COSMOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templatesPlatformEnum = append(templatesPlatformEnum, v)
	}
}

func (m TemplatesPlatform) validateTemplatesPlatformEnum(path, location string, value TemplatesPlatform) error {
	if err := validate.EnumCase(path, location, value, templatesPlatformEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this templates platform
func (m TemplatesPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTemplatesPlatformEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this templates platform based on context it is used
func (m TemplatesPlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
