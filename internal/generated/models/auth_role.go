// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthRole auth role
//
// swagger:model auth.Role
type AuthRole string

func NewAuthRole(value AuthRole) *AuthRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthRole.
func (m AuthRole) Pointer() *AuthRole {
	return &m
}

const (

	// AuthRoleADMIN captures enum value "ADMIN"
	AuthRoleADMIN AuthRole = "ADMIN"

	// AuthRoleOPERATOR captures enum value "OPERATOR"
	AuthRoleOPERATOR AuthRole = "OPERATOR"

	// AuthRoleVIEWER captures enum value "VIEWER"
	AuthRoleVIEWER AuthRole = "VIEWER"

	// AuthRoleCUSTOM captures enum value "CUSTOM"
	AuthRoleCUSTOM AuthRole = "CUSTOM"

	// AuthRoleMCP captures enum value "MCP"
	AuthRoleMCP AuthRole = "MCP"
)

// for schema
var authRoleEnum []any

func init() {
	var res []AuthRole
	if err := json.Unmarshal([]byte(`["ADMIN","OPERATOR","VIEWER","CUSTOM","MCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authRoleEnum = append(authRoleEnum, v)
	}
}

func (m AuthRole) validateAuthRoleEnum(path, location string, value AuthRole) error {
	if err := validate.EnumCase(path, location, value, authRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth role
func (m AuthRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth role based on context it is used
func (m AuthRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
