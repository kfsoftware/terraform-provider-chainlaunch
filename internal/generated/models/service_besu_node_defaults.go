// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceBesuNodeDefaults service besu node defaults
//
// swagger:model service.BesuNodeDefaults
type ServiceBesuNodeDefaults struct {

	// Permissions configuration
	AccountsAllowList []string `json:"accountsAllowList"`

	// environment variables
	EnvironmentVariables map[string]string `json:"environmentVariables,omitempty"`

	// external Ip
	ExternalIP string `json:"externalIp,omitempty"`

	// host allow list
	HostAllowList string `json:"hostAllowList,omitempty"`

	// internal Ip
	InternalIP string `json:"internalIp,omitempty"`

	// jwt authentication algorithm
	JwtAuthenticationAlgorithm string `json:"jwtAuthenticationAlgorithm,omitempty"`

	// JWT Authentication configuration
	JwtEnabled bool `json:"jwtEnabled,omitempty"`

	// jwt public key content
	JwtPublicKeyContent string `json:"jwtPublicKeyContent,omitempty"`

	// Metrics configuration
	MetricsEnabled bool `json:"metricsEnabled,omitempty"`

	// metrics host
	MetricsHost string `json:"metricsHost,omitempty"`

	// metrics port
	MetricsPort int64 `json:"metricsPort,omitempty"`

	// metrics protocol
	MetricsProtocol string `json:"metricsProtocol,omitempty"`

	// Gas and access control configuration
	MinGasPrice int64 `json:"minGasPrice,omitempty"`

	// mode
	Mode ServiceMode `json:"mode,omitempty"`

	// nodes allow list
	NodesAllowList []string `json:"nodesAllowList"`

	// p2p host
	P2pHost string `json:"p2pHost,omitempty"`

	// p2p port
	P2pPort int64 `json:"p2pPort,omitempty"`

	// rpc host
	RPCHost string `json:"rpcHost,omitempty"`

	// rpc port
	RPCPort int64 `json:"rpcPort,omitempty"`
}

// Validate validates this service besu node defaults
func (m *ServiceBesuNodeDefaults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBesuNodeDefaults) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("mode")
		}

		return err
	}

	return nil
}

// ContextValidate validate this service besu node defaults based on the context it is used
func (m *ServiceBesuNodeDefaults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBesuNodeDefaults) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("mode")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBesuNodeDefaults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBesuNodeDefaults) UnmarshalBinary(b []byte) error {
	var res ServiceBesuNodeDefaults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
