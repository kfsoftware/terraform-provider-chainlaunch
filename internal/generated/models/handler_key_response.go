// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HandlerKeyResponse handler key response
//
// swagger:model handler.KeyResponse
type HandlerKeyResponse struct {

	// algorithm
	Algorithm string `json:"algorithm,omitempty"`

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ethereum address
	EthereumAddress string `json:"ethereumAddress,omitempty"`

	// expires at
	ExpiresAt string `json:"expiresAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last rotated at
	LastRotatedAt string `json:"lastRotatedAt,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider *HandlerKeyResponseProvider `json:"provider,omitempty"`

	// public key
	PublicKey string `json:"publicKey,omitempty"`

	// sha1 fingerprint
	Sha1Fingerprint string `json:"sha1Fingerprint,omitempty"`

	// sha256 fingerprint
	Sha256Fingerprint string `json:"sha256Fingerprint,omitempty"`

	// signing key Id
	SigningKeyID int64 `json:"signingKeyId,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this handler key response
func (m *HandlerKeyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerKeyResponse) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provider")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provider")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this handler key response based on the context it is used
func (m *HandlerKeyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerKeyResponse) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {

		if swag.IsZero(m.Provider) { // not required
			return nil
		}

		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provider")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provider")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerKeyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerKeyResponse) UnmarshalBinary(b []byte) error {
	var res HandlerKeyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HandlerKeyResponseProvider handler key response provider
//
// swagger:model HandlerKeyResponseProvider
type HandlerKeyResponseProvider struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this handler key response provider
func (m *HandlerKeyResponseProvider) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this handler key response provider based on context it is used
func (m *HandlerKeyResponseProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerKeyResponseProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerKeyResponseProvider) UnmarshalBinary(b []byte) error {
	var res HandlerKeyResponseProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
