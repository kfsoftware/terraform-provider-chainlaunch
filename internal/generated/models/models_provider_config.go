// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsProviderConfig models provider config
//
// swagger:model models.ProviderConfig
type ModelsProviderConfig struct {

	// aws kms
	AwsKms *ModelsAWSKMSConfigPayload `json:"awsKms,omitempty"`

	// vault
	Vault *ModelsVaultConfigPayload `json:"vault,omitempty"`
}

// Validate validates this models provider config
func (m *ModelsProviderConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsProviderConfig) validateAwsKms(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsKms) { // not required
		return nil
	}

	if m.AwsKms != nil {
		if err := m.AwsKms.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("awsKms")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("awsKms")
			}

			return err
		}
	}

	return nil
}

func (m *ModelsProviderConfig) validateVault(formats strfmt.Registry) error {
	if swag.IsZero(m.Vault) { // not required
		return nil
	}

	if m.Vault != nil {
		if err := m.Vault.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("vault")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("vault")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this models provider config based on the context it is used
func (m *ModelsProviderConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsProviderConfig) contextValidateAwsKms(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsKms != nil {

		if swag.IsZero(m.AwsKms) { // not required
			return nil
		}

		if err := m.AwsKms.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("awsKms")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("awsKms")
			}

			return err
		}
	}

	return nil
}

func (m *ModelsProviderConfig) contextValidateVault(ctx context.Context, formats strfmt.Registry) error {

	if m.Vault != nil {

		if swag.IsZero(m.Vault) { // not required
			return nil
		}

		if err := m.Vault.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("vault")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("vault")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsProviderConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsProviderConfig) UnmarshalBinary(b []byte) error {
	var res ModelsProviderConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
