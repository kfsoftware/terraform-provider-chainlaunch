// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerCreateIdentityRequest handler create identity request
//
// swagger:model handler.CreateIdentityRequest
type HandlerCreateIdentityRequest struct {

	// Optional: Certificate validity (Go duration format, e.g., "8760h" for 1 year)
	// If not provided, defaults to 1 year
	CertValidFor string `json:"certValidFor,omitempty"`

	// Optional: Description for the identity
	Description string `json:"description,omitempty"`

	// Optional: Custom name for the identity (defaults to type-based name)
	Name string `json:"name,omitempty"`

	// Type of identity to create: "admin", "client", or "peer"
	// Required: true
	// Enum: ["admin","client","peer"]
	Type *string `json:"type"`
}

// Validate validates this handler create identity request
func (m *HandlerCreateIdentityRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var handlerCreateIdentityRequestTypeTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","client","peer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		handlerCreateIdentityRequestTypeTypePropEnum = append(handlerCreateIdentityRequestTypeTypePropEnum, v)
	}
}

const (

	// HandlerCreateIdentityRequestTypeAdmin captures enum value "admin"
	HandlerCreateIdentityRequestTypeAdmin string = "admin"

	// HandlerCreateIdentityRequestTypeClient captures enum value "client"
	HandlerCreateIdentityRequestTypeClient string = "client"

	// HandlerCreateIdentityRequestTypePeer captures enum value "peer"
	HandlerCreateIdentityRequestTypePeer string = "peer"
)

// prop value enum
func (m *HandlerCreateIdentityRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, handlerCreateIdentityRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HandlerCreateIdentityRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler create identity request based on context it is used
func (m *HandlerCreateIdentityRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerCreateIdentityRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerCreateIdentityRequest) UnmarshalBinary(b []byte) error {
	var res HandlerCreateIdentityRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
