// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HandlerSignCertificateResponse handler sign certificate response
//
// swagger:model handler.SignCertificateResponse
type HandlerSignCertificateResponse struct {

	// algorithm
	Algorithm ModelsKeyAlgorithm `json:"algorithm,omitempty"`

	// Can be used in Fabric nodes (exportable + was_exported)
	CanUseInNodes bool `json:"canUseInNodes,omitempty"`

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// curve
	Curve ModelsECCurve `json:"curve,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ethereum address
	EthereumAddress string `json:"ethereumAddress,omitempty"`

	// expires at
	ExpiresAt string `json:"expiresAt,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// Was key generated locally
	GeneratedLocally bool `json:"generatedLocally,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Was key imported to provider
	ImportedToProvider bool `json:"importedToProvider,omitempty"`

	// Can private key be exported/accessed locally
	IsExportable bool `json:"isExportable,omitempty"`

	// key size
	KeySize int64 `json:"keySize,omitempty"`

	// KMS key ID/ARN if applicable (AWS KMS)
	KmsKeyID string `json:"kmsKeyId,omitempty"`

	// last rotated at
	LastRotatedAt string `json:"lastRotatedAt,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider
	Provider *ModelsKeyProviderInfo `json:"provider,omitempty"`

	// Provider-specific metadata (Vault path, KMS ARN, etc.)
	ProviderMetadata any `json:"providerMetadata,omitempty"`

	// public key
	PublicKey string `json:"publicKey,omitempty"`

	// sha1 fingerprint
	Sha1Fingerprint string `json:"sha1Fingerprint,omitempty"`

	// sha256 fingerprint
	Sha256Fingerprint string `json:"sha256Fingerprint,omitempty"`

	// signing key ID
	SigningKeyID int64 `json:"signingKeyID,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// Was private key exported (or generated locally)
	WasExported bool `json:"wasExported,omitempty"`
}

// Validate validates this handler sign certificate response
func (m *HandlerSignCertificateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerSignCertificateResponse) validateAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if err := m.Algorithm.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("algorithm")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("algorithm")
		}

		return err
	}

	return nil
}

func (m *HandlerSignCertificateResponse) validateCurve(formats strfmt.Registry) error {
	if swag.IsZero(m.Curve) { // not required
		return nil
	}

	if err := m.Curve.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("curve")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("curve")
		}

		return err
	}

	return nil
}

func (m *HandlerSignCertificateResponse) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provider")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provider")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this handler sign certificate response based on the context it is used
func (m *HandlerSignCertificateResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerSignCertificateResponse) contextValidateAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	if err := m.Algorithm.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("algorithm")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("algorithm")
		}

		return err
	}

	return nil
}

func (m *HandlerSignCertificateResponse) contextValidateCurve(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Curve) { // not required
		return nil
	}

	if err := m.Curve.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("curve")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("curve")
		}

		return err
	}

	return nil
}

func (m *HandlerSignCertificateResponse) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {

		if swag.IsZero(m.Provider) { // not required
			return nil
		}

		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("provider")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("provider")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerSignCertificateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerSignCertificateResponse) UnmarshalBinary(b []byte) error {
	var res HandlerSignCertificateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
