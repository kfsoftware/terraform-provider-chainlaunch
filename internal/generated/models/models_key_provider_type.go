// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsKeyProviderType models key provider type
//
// swagger:model models.KeyProviderType
type ModelsKeyProviderType string

func NewModelsKeyProviderType(value ModelsKeyProviderType) *ModelsKeyProviderType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsKeyProviderType.
func (m ModelsKeyProviderType) Pointer() *ModelsKeyProviderType {
	return &m
}

const (

	// ModelsKeyProviderTypeDATABASE captures enum value "DATABASE"
	ModelsKeyProviderTypeDATABASE ModelsKeyProviderType = "DATABASE"

	// ModelsKeyProviderTypeVAULT captures enum value "VAULT"
	ModelsKeyProviderTypeVAULT ModelsKeyProviderType = "VAULT"

	// ModelsKeyProviderTypeHSM captures enum value "HSM"
	ModelsKeyProviderTypeHSM ModelsKeyProviderType = "HSM"

	// ModelsKeyProviderTypeAWSKMS captures enum value "AWS_KMS"
	ModelsKeyProviderTypeAWSKMS ModelsKeyProviderType = "AWS_KMS"
)

// for schema
var modelsKeyProviderTypeEnum []any

func init() {
	var res []ModelsKeyProviderType
	if err := json.Unmarshal([]byte(`["DATABASE","VAULT","HSM","AWS_KMS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsKeyProviderTypeEnum = append(modelsKeyProviderTypeEnum, v)
	}
}

func (m ModelsKeyProviderType) validateModelsKeyProviderTypeEnum(path, location string, value ModelsKeyProviderType) error {
	if err := validate.EnumCase(path, location, value, modelsKeyProviderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models key provider type
func (m ModelsKeyProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsKeyProviderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models key provider type based on context it is used
func (m ModelsKeyProviderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
