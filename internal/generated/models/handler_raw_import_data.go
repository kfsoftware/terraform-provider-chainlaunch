// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerRawImportData handler raw import data
//
// swagger:model handler.RawImportData
type HandlerRawImportData struct {

	// Optional: Admin certificates and keys
	AdminSignCert string `json:"adminSignCert,omitempty"`

	// admin sign private key
	AdminSignPrivateKey string `json:"adminSignPrivateKey,omitempty"`

	// admin Tls cert
	AdminTLSCert string `json:"adminTlsCert,omitempty"`

	// admin Tls private key
	AdminTLSPrivateKey string `json:"adminTlsPrivateKey,omitempty"`

	// Optional: Client certificates and keys
	ClientSignCert string `json:"clientSignCert,omitempty"`

	// client sign private key
	ClientSignPrivateKey string `json:"clientSignPrivateKey,omitempty"`

	// Required: CA certificates
	// Required: true
	SignCaCert *string `json:"signCaCert"`

	// Optional: CA private keys (if available)
	SignCaPrivateKey string `json:"signCaPrivateKey,omitempty"`

	// PEM-encoded TLS CA certificate
	// Required: true
	TLSCaCert *string `json:"tlsCaCert"`

	// PEM-encoded TLS CA private key
	TLSCaPrivateKey string `json:"tlsCaPrivateKey,omitempty"`
}

// Validate validates this handler raw import data
func (m *HandlerRawImportData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignCaCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSCaCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerRawImportData) validateSignCaCert(formats strfmt.Registry) error {

	if err := validate.Required("signCaCert", "body", m.SignCaCert); err != nil {
		return err
	}

	return nil
}

func (m *HandlerRawImportData) validateTLSCaCert(formats strfmt.Registry) error {

	if err := validate.Required("tlsCaCert", "body", m.TLSCaCert); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler raw import data based on context it is used
func (m *HandlerRawImportData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerRawImportData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerRawImportData) UnmarshalBinary(b []byte) error {
	var res HandlerRawImportData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
