// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesDeployPrometheusRequest types deploy prometheus request
//
// swagger:model types.DeployPrometheusRequest
type TypesDeployPrometheusRequest struct {

	// deployment mode
	DeploymentMode CommonDeploymentMode `json:"deployment_mode,omitempty"`

	// docker config
	DockerConfig *TypesDockerDeployConfig `json:"docker_config,omitempty"`

	// prometheus port
	// Required: true
	PrometheusPort *int64 `json:"prometheus_port"`

	// prometheus version
	// Required: true
	PrometheusVersion *string `json:"prometheus_version"`

	// scrape interval
	// Required: true
	ScrapeInterval *int64 `json:"scrape_interval"`
}

// Validate validates this types deploy prometheus request
func (m *TypesDeployPrometheusRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrometheusVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScrapeInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDeployPrometheusRequest) validateDeploymentMode(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentMode) { // not required
		return nil
	}

	if err := m.DeploymentMode.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("deployment_mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("deployment_mode")
		}

		return err
	}

	return nil
}

func (m *TypesDeployPrometheusRequest) validateDockerConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DockerConfig) { // not required
		return nil
	}

	if m.DockerConfig != nil {
		if err := m.DockerConfig.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("docker_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("docker_config")
			}

			return err
		}
	}

	return nil
}

func (m *TypesDeployPrometheusRequest) validatePrometheusPort(formats strfmt.Registry) error {

	if err := validate.Required("prometheus_port", "body", m.PrometheusPort); err != nil {
		return err
	}

	return nil
}

func (m *TypesDeployPrometheusRequest) validatePrometheusVersion(formats strfmt.Registry) error {

	if err := validate.Required("prometheus_version", "body", m.PrometheusVersion); err != nil {
		return err
	}

	return nil
}

func (m *TypesDeployPrometheusRequest) validateScrapeInterval(formats strfmt.Registry) error {

	if err := validate.Required("scrape_interval", "body", m.ScrapeInterval); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this types deploy prometheus request based on the context it is used
func (m *TypesDeployPrometheusRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDockerConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDeployPrometheusRequest) contextValidateDeploymentMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentMode) { // not required
		return nil
	}

	if err := m.DeploymentMode.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("deployment_mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("deployment_mode")
		}

		return err
	}

	return nil
}

func (m *TypesDeployPrometheusRequest) contextValidateDockerConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DockerConfig != nil {

		if swag.IsZero(m.DockerConfig) { // not required
			return nil
		}

		if err := m.DockerConfig.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("docker_config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("docker_config")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesDeployPrometheusRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesDeployPrometheusRequest) UnmarshalBinary(b []byte) error {
	var res TypesDeployPrometheusRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
