// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateBesuNodeRequest http update besu node request
//
// swagger:model http.UpdateBesuNodeRequest
type HTTPUpdateBesuNodeRequest struct {

	// Permissions configuration
	AccountsAllowList []string `json:"accountsAllowList"`

	// bootnodes
	Bootnodes []string `json:"bootnodes"`

	// env
	Env map[string]string `json:"env,omitempty"`

	// external Ip
	ExternalIP string `json:"externalIp,omitempty"`

	// host allow list
	HostAllowList string `json:"hostAllowList,omitempty"`

	// internal Ip
	InternalIP string `json:"internalIp,omitempty"`

	// jwt authentication algorithm
	JwtAuthenticationAlgorithm string `json:"jwtAuthenticationAlgorithm,omitempty"`

	// JWT Authentication configuration
	JwtEnabled bool `json:"jwtEnabled,omitempty"`

	// jwt public key content
	JwtPublicKeyContent string `json:"jwtPublicKeyContent,omitempty"`

	// metrics enabled
	MetricsEnabled bool `json:"metricsEnabled,omitempty"`

	// metrics port
	MetricsPort int64 `json:"metricsPort,omitempty"`

	// Gas and access control configuration
	MinGasPrice int64 `json:"minGasPrice,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// network Id
	// Required: true
	NetworkID *int64 `json:"networkId"`

	// nodes allow list
	NodesAllowList []string `json:"nodesAllowList"`

	// p2p host
	// Required: true
	P2pHost *string `json:"p2pHost"`

	// p2p port
	// Required: true
	P2pPort *int64 `json:"p2pPort"`

	// rpc host
	// Required: true
	RPCHost *string `json:"rpcHost"`

	// rpc port
	// Required: true
	RPCPort *int64 `json:"rpcPort"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this http update besu node request
func (m *HTTPUpdateBesuNodeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateP2pHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateP2pPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateBesuNodeRequest) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBesuNodeRequest) validateP2pHost(formats strfmt.Registry) error {

	if err := validate.Required("p2pHost", "body", m.P2pHost); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBesuNodeRequest) validateP2pPort(formats strfmt.Registry) error {

	if err := validate.Required("p2pPort", "body", m.P2pPort); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBesuNodeRequest) validateRPCHost(formats strfmt.Registry) error {

	if err := validate.Required("rpcHost", "body", m.RPCHost); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBesuNodeRequest) validateRPCPort(formats strfmt.Registry) error {

	if err := validate.Required("rpcPort", "body", m.RPCPort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http update besu node request based on context it is used
func (m *HTTPUpdateBesuNodeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateBesuNodeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateBesuNodeRequest) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateBesuNodeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
