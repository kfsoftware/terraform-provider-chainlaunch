// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TroubleshootingCertificateValidationResponse troubleshooting certificate validation response
//
// swagger:model troubleshooting.CertificateValidationResponse
type TroubleshootingCertificateValidationResponse struct {

	// dns names
	DNSNames []string `json:"dns_names"`

	// errors
	Errors []string `json:"errors"`

	// ip addresses
	IPAddresses []string `json:"ip_addresses"`

	// is ca
	IsCa bool `json:"is_ca,omitempty"`

	// issuer
	Issuer string `json:"issuer,omitempty"`

	// key usage
	KeyUsage []string `json:"key_usage"`

	// not after
	NotAfter string `json:"not_after,omitempty"`

	// not before
	NotBefore string `json:"not_before,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// subject
	Subject string `json:"subject,omitempty"`

	// valid
	Valid bool `json:"valid,omitempty"`

	// warnings
	Warnings []string `json:"warnings"`
}

// Validate validates this troubleshooting certificate validation response
func (m *TroubleshootingCertificateValidationResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this troubleshooting certificate validation response based on context it is used
func (m *TroubleshootingCertificateValidationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TroubleshootingCertificateValidationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TroubleshootingCertificateValidationResponse) UnmarshalBinary(b []byte) error {
	var res TroubleshootingCertificateValidationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
