// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HandlerVaultStatusResponse handler vault status response
//
// swagger:model handler.VaultStatusResponse
type HandlerVaultStatusResponse struct {

	// address
	// Example: http://localhost:8200
	Address string `json:"address,omitempty"`

	// cluster id
	// Example: abc123
	ClusterID string `json:"cluster_id,omitempty"`

	// cluster name
	// Example: vault-cluster-1
	ClusterName string `json:"cluster_name,omitempty"`

	// container created
	// Example: 2024-01-01T00:00:00Z
	ContainerCreated string `json:"container_created,omitempty"`

	// container error
	ContainerError string `json:"container_error,omitempty"`

	// container exists
	// Example: true
	ContainerExists bool `json:"container_exists,omitempty"`

	// container finished at
	ContainerFinishedAt string `json:"container_finished_at,omitempty"`

	// container full id
	// Example: a1b2c3d4e5f6789...
	ContainerFullID string `json:"container_full_id,omitempty"`

	// container id
	// Example: a1b2c3d4e5f6
	ContainerID string `json:"container_id,omitempty"`

	// container image
	// Example: hashicorp/vault:1.15.6
	ContainerImage string `json:"container_image,omitempty"`

	// container name
	// Example: chainlaunch-vault-1
	ContainerName string `json:"container_name,omitempty"`

	// container ports
	ContainerPorts any `json:"container_ports,omitempty"`

	// container restart count
	// Example: 0
	ContainerRestartCount int64 `json:"container_restart_count,omitempty"`

	// container running
	// Example: true
	ContainerRunning bool `json:"container_running,omitempty"`

	// container started at
	// Example: 2024-01-01T00:00:00Z
	ContainerStartedAt string `json:"container_started_at,omitempty"`

	// container status
	// Example: running
	ContainerStatus string `json:"container_status,omitempty"`

	// data directory
	// Example: /data/vaults/my-vault-provider
	DataDirectory string `json:"data_directory,omitempty"`

	// data exists
	// Example: true
	DataExists bool `json:"data_exists,omitempty"`

	// default ca cert ttl
	// Example: 87600h
	DefaultCaCertTTL string `json:"default_ca_cert_ttl,omitempty"`

	// default cert ttl
	// Example: 8760h
	DefaultCertTTL string `json:"default_cert_ttl,omitempty"`

	// docker available
	// Example: true
	DockerAvailable bool `json:"docker_available,omitempty"`

	// has unseal keys
	// Example: true
	HasUnsealKeys bool `json:"has_unseal_keys,omitempty"`

	// max ca cert ttl
	// Example: 175200h
	MaxCaCertTTL string `json:"max_ca_cert_ttl,omitempty"`

	// max cert ttl
	// Example: 87600h
	MaxCertTTL string `json:"max_cert_ttl,omitempty"`

	// port
	// Example: 8200
	Port string `json:"port,omitempty"`

	// provider id
	// Example: 1
	ProviderID int64 `json:"provider_id,omitempty"`

	// provider name
	// Example: my-vault-provider
	ProviderName string `json:"provider_name,omitempty"`

	// sealed
	// Example: false
	Sealed bool `json:"sealed,omitempty"`

	// vault health details
	VaultHealthDetails any `json:"vault_health_details,omitempty"`

	// vault initialized
	// Example: true
	VaultInitialized bool `json:"vault_initialized,omitempty"`

	// vault reachable
	// Example: true
	VaultReachable bool `json:"vault_reachable,omitempty"`

	// vault status
	// Example: active
	VaultStatus string `json:"vault_status,omitempty"`

	// vault status code
	// Example: 200
	VaultStatusCode int64 `json:"vault_status_code,omitempty"`

	// vault version
	// Example: 1.15.6
	VaultVersion string `json:"vault_version,omitempty"`
}

// Validate validates this handler vault status response
func (m *HandlerVaultStatusResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this handler vault status response based on context it is used
func (m *HandlerVaultStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerVaultStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerVaultStatusResponse) UnmarshalBinary(b []byte) error {
	var res HandlerVaultStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
