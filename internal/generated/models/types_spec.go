// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesSpec types spec
//
// swagger:model types.Spec
type TypesSpec struct {

	// docker compose
	DockerCompose *TypesDockerCompose `json:"dockerCompose,omitempty"`

	// documentation
	Documentation *TypesDocumentation `json:"documentation,omitempty"`

	// metrics
	Metrics *TypesMetrics `json:"metrics,omitempty"`

	// parameters
	Parameters *GithubComChainlaunchChainlaunchPkgPluginTypesParameters `json:"parameters,omitempty"`
}

// Validate validates this types spec
func (m *TypesSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDockerCompose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesSpec) validateDockerCompose(formats strfmt.Registry) error {
	if swag.IsZero(m.DockerCompose) { // not required
		return nil
	}

	if m.DockerCompose != nil {
		if err := m.DockerCompose.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dockerCompose")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dockerCompose")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) validateDocumentation(formats strfmt.Registry) error {
	if swag.IsZero(m.Documentation) { // not required
		return nil
	}

	if m.Documentation != nil {
		if err := m.Documentation.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("documentation")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("documentation")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("metrics")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("metrics")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("parameters")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("parameters")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this types spec based on the context it is used
func (m *TypesSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDockerCompose(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocumentation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesSpec) contextValidateDockerCompose(ctx context.Context, formats strfmt.Registry) error {

	if m.DockerCompose != nil {

		if swag.IsZero(m.DockerCompose) { // not required
			return nil
		}

		if err := m.DockerCompose.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dockerCompose")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dockerCompose")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) contextValidateDocumentation(ctx context.Context, formats strfmt.Registry) error {

	if m.Documentation != nil {

		if swag.IsZero(m.Documentation) { // not required
			return nil
		}

		if err := m.Documentation.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("documentation")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("documentation")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {

		if swag.IsZero(m.Metrics) { // not required
			return nil
		}

		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("metrics")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("metrics")
			}

			return err
		}
	}

	return nil
}

func (m *TypesSpec) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {

		if swag.IsZero(m.Parameters) { // not required
			return nil
		}

		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("parameters")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("parameters")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesSpec) UnmarshalBinary(b []byte) error {
	var res TypesSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
