// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceNodeDefaults service node defaults
//
// swagger:model service.NodeDefaults
type ServiceNodeDefaults struct {

	// admin address
	AdminAddress string `json:"adminAddress,omitempty"`

	// chaincode address
	ChaincodeAddress string `json:"chaincodeAddress,omitempty"`

	// container name
	ContainerName string `json:"containerName,omitempty"`

	// error log path
	ErrorLogPath string `json:"errorLogPath,omitempty"`

	// events address
	EventsAddress string `json:"eventsAddress,omitempty"`

	// external endpoint
	ExternalEndpoint string `json:"externalEndpoint,omitempty"`

	// listen address
	ListenAddress string `json:"listenAddress,omitempty"`

	// log path
	LogPath string `json:"logPath,omitempty"`

	// mode
	Mode ServiceMode `json:"mode,omitempty"`

	// operations listen address
	OperationsListenAddress string `json:"operationsListenAddress,omitempty"`

	// service name
	ServiceName string `json:"serviceName,omitempty"`
}

// Validate validates this service node defaults
func (m *ServiceNodeDefaults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceNodeDefaults) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("mode")
		}

		return err
	}

	return nil
}

// ContextValidate validate this service node defaults based on the context it is used
func (m *ServiceNodeDefaults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceNodeDefaults) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("mode")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("mode")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceNodeDefaults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceNodeDefaults) UnmarshalBinary(b []byte) error {
	var res ServiceNodeDefaults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
