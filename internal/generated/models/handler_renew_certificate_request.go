// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerRenewCertificateRequest handler renew certificate request
//
// swagger:model handler.RenewCertificateRequest
type HandlerRenewCertificateRequest struct {

	// ca type
	// Example: sign
	// Required: true
	CaType *string `json:"caType"`

	// dns names
	// Example: ["admin.example.com"]
	DNSNames []string `json:"dnsNames"`

	// ip addresses
	// Example: ["192.168.1.100"]
	IPAddresses []string `json:"ipAddresses"`

	// key Id
	// Example: 123
	// Required: true
	KeyID *int64 `json:"keyId"`

	// role
	// Example: admin
	// Required: true
	Role *string `json:"role"`

	// Duration in Go format (e.g., "8760h" for 1 year)
	// Example: 8760h
	ValidFor string `json:"validFor,omitempty"`
}

// Validate validates this handler renew certificate request
func (m *HandlerRenewCertificateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerRenewCertificateRequest) validateCaType(formats strfmt.Registry) error {

	if err := validate.Required("caType", "body", m.CaType); err != nil {
		return err
	}

	return nil
}

func (m *HandlerRenewCertificateRequest) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("keyId", "body", m.KeyID); err != nil {
		return err
	}

	return nil
}

func (m *HandlerRenewCertificateRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler renew certificate request based on context it is used
func (m *HandlerRenewCertificateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerRenewCertificateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerRenewCertificateRequest) UnmarshalBinary(b []byte) error {
	var res HandlerRenewCertificateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
