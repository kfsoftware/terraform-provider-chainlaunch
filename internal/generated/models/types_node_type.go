// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesNodeType types node type
//
// swagger:model types.NodeType
type TypesNodeType string

func NewTypesNodeType(value TypesNodeType) *TypesNodeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesNodeType.
func (m TypesNodeType) Pointer() *TypesNodeType {
	return &m
}

const (

	// TypesNodeTypeFABRICPEER captures enum value "FABRIC_PEER"
	TypesNodeTypeFABRICPEER TypesNodeType = "FABRIC_PEER"

	// TypesNodeTypeFABRICORDERER captures enum value "FABRIC_ORDERER"
	TypesNodeTypeFABRICORDERER TypesNodeType = "FABRIC_ORDERER"

	// TypesNodeTypeBESUFULLNODE captures enum value "BESU_FULLNODE"
	TypesNodeTypeBESUFULLNODE TypesNodeType = "BESU_FULLNODE"
)

// for schema
var typesNodeTypeEnum []any

func init() {
	var res []TypesNodeType
	if err := json.Unmarshal([]byte(`["FABRIC_PEER","FABRIC_ORDERER","BESU_FULLNODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesNodeTypeEnum = append(typesNodeTypeEnum, v)
	}
}

func (m TypesNodeType) validateTypesNodeTypeEnum(path, location string, value TypesNodeType) error {
	if err := validate.EnumCase(path, location, value, typesNodeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types node type
func (m TypesNodeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesNodeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types node type based on context it is used
func (m TypesNodeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
