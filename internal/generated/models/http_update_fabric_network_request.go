// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateFabricNetworkRequest http update fabric network request
//
// swagger:model http.UpdateFabricNetworkRequest
type HTTPUpdateFabricNetworkRequest struct {

	// operations
	// Required: true
	// Min Items: 1
	Operations []*HTTPConfigUpdateOperationRequest `json:"operations"`

	// signing org ids
	// Required: true
	// Min Items: 1
	SigningOrgIds []int64 `json:"signing_org_ids"`
}

// Validate validates this http update fabric network request
func (m *HTTPUpdateFabricNetworkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigningOrgIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateFabricNetworkRequest) validateOperations(formats strfmt.Registry) error {

	if err := validate.Required("operations", "body", m.Operations); err != nil {
		return err
	}

	iOperationsSize := int64(len(m.Operations))

	if err := validate.MinItems("operations", "body", iOperationsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Operations); i++ {
		if swag.IsZero(m.Operations[i]) { // not required
			continue
		}

		if m.Operations[i] != nil {
			if err := m.Operations[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("operations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("operations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPUpdateFabricNetworkRequest) validateSigningOrgIds(formats strfmt.Registry) error {

	if err := validate.Required("signing_org_ids", "body", m.SigningOrgIds); err != nil {
		return err
	}

	iSigningOrgIdsSize := int64(len(m.SigningOrgIds))

	if err := validate.MinItems("signing_org_ids", "body", iSigningOrgIdsSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this http update fabric network request based on the context it is used
func (m *HTTPUpdateFabricNetworkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateFabricNetworkRequest) contextValidateOperations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Operations); i++ {

		if m.Operations[i] != nil {

			if swag.IsZero(m.Operations[i]) { // not required
				return nil
			}

			if err := m.Operations[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("operations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("operations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateFabricNetworkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateFabricNetworkRequest) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateFabricNetworkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
