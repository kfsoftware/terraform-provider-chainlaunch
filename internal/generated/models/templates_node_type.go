// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TemplatesNodeType templates node type
//
// swagger:model templates.NodeType
type TemplatesNodeType string

func NewTemplatesNodeType(value TemplatesNodeType) *TemplatesNodeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TemplatesNodeType.
func (m TemplatesNodeType) Pointer() *TemplatesNodeType {
	return &m
}

const (

	// TemplatesNodeTypePeer captures enum value "peer"
	TemplatesNodeTypePeer TemplatesNodeType = "peer"

	// TemplatesNodeTypeOrderer captures enum value "orderer"
	TemplatesNodeTypeOrderer TemplatesNodeType = "orderer"

	// TemplatesNodeTypeFabricNetwork captures enum value "fabric_network"
	TemplatesNodeTypeFabricNetwork TemplatesNodeType = "fabric_network"

	// TemplatesNodeTypeFullnode captures enum value "fullnode"
	TemplatesNodeTypeFullnode TemplatesNodeType = "fullnode"

	// TemplatesNodeTypeValidator captures enum value "validator"
	TemplatesNodeTypeValidator TemplatesNodeType = "validator"

	// TemplatesNodeTypeArchive captures enum value "archive"
	TemplatesNodeTypeArchive TemplatesNodeType = "archive"

	// TemplatesNodeTypeBesuNetwork captures enum value "besu_network"
	TemplatesNodeTypeBesuNetwork TemplatesNodeType = "besu_network"

	// TemplatesNodeTypeBootstrap captures enum value "bootstrap"
	TemplatesNodeTypeBootstrap TemplatesNodeType = "bootstrap"

	// TemplatesNodeTypeRelay captures enum value "relay"
	TemplatesNodeTypeRelay TemplatesNodeType = "relay"

	// TemplatesNodeTypeCollator captures enum value "collator"
	TemplatesNodeTypeCollator TemplatesNodeType = "collator"

	// TemplatesNodeTypeSentry captures enum value "sentry"
	TemplatesNodeTypeSentry TemplatesNodeType = "sentry"
)

// for schema
var templatesNodeTypeEnum []any

func init() {
	var res []TemplatesNodeType
	if err := json.Unmarshal([]byte(`["peer","orderer","fabric_network","fullnode","validator","archive","besu_network","bootstrap","relay","collator","sentry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templatesNodeTypeEnum = append(templatesNodeTypeEnum, v)
	}
}

func (m TemplatesNodeType) validateTemplatesNodeTypeEnum(path, location string, value TemplatesNodeType) error {
	if err := validate.EnumCase(path, location, value, templatesNodeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this templates node type
func (m TemplatesNodeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTemplatesNodeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this templates node type based on context it is used
func (m TemplatesNodeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
