// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonNetworkMode common network mode
//
// swagger:model common.NetworkMode
type CommonNetworkMode string

func NewCommonNetworkMode(value CommonNetworkMode) *CommonNetworkMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonNetworkMode.
func (m CommonNetworkMode) Pointer() *CommonNetworkMode {
	return &m
}

const (

	// CommonNetworkModeBridge captures enum value "bridge"
	CommonNetworkModeBridge CommonNetworkMode = "bridge"

	// CommonNetworkModeHost captures enum value "host"
	CommonNetworkModeHost CommonNetworkMode = "host"
)

// for schema
var commonNetworkModeEnum []any

func init() {
	var res []CommonNetworkMode
	if err := json.Unmarshal([]byte(`["bridge","host"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonNetworkModeEnum = append(commonNetworkModeEnum, v)
	}
}

func (m CommonNetworkMode) validateCommonNetworkModeEnum(path, location string, value CommonNetworkMode) error {
	if err := validate.EnumCase(path, location, value, commonNetworkModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common network mode
func (m CommonNetworkMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonNetworkModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common network mode based on context it is used
func (m CommonNetworkMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
