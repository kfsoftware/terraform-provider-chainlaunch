// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthAPIKey auth API key
//
// swagger:model auth.APIKey
type AuthAPIKey struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// expires at
	ExpiresAt string `json:"expires_at,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is active
	IsActive bool `json:"is_active,omitempty"`

	// Prefix for display (e.g., "clpro_abcd")
	KeyPrefix string `json:"key_prefix,omitempty"`

	// last used at
	LastUsedAt string `json:"last_used_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// permissions
	Permissions []AuthPermission `json:"permissions"`

	// role
	Role AuthRole `json:"role,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this auth API key
func (m *AuthAPIKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthAPIKey) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {

		if err := m.Permissions[i].Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
			}

			return err
		}

	}

	return nil
}

func (m *AuthAPIKey) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("role")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("role")
		}

		return err
	}

	return nil
}

// ContextValidate validate this auth API key based on the context it is used
func (m *AuthAPIKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthAPIKey) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Permissions); i++ {

		if swag.IsZero(m.Permissions[i]) { // not required
			return nil
		}

		if err := m.Permissions[i].ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("permissions" + "." + strconv.Itoa(i))
			}

			return err
		}

	}

	return nil
}

func (m *AuthAPIKey) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("role")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("role")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthAPIKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthAPIKey) UnmarshalBinary(b []byte) error {
	var res AuthAPIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
