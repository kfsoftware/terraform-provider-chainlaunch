// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesFilteredMetricsResponse types filtered metrics response
//
// swagger:model types.FilteredMetricsResponse
type TypesFilteredMetricsResponse struct {

	// applied filters
	AppliedFilters []*TypesMetricFilter `json:"applied_filters"`

	// data
	Data any `json:"data,omitempty"`

	// metadata
	Metadata any `json:"metadata,omitempty"`

	// pagination
	Pagination *TypesPaginationInfo `json:"pagination,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this types filtered metrics response
func (m *TypesFilteredMetricsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesFilteredMetricsResponse) validateAppliedFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AppliedFilters); i++ {
		if swag.IsZero(m.AppliedFilters[i]) { // not required
			continue
		}

		if m.AppliedFilters[i] != nil {
			if err := m.AppliedFilters[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("applied_filters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("applied_filters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *TypesFilteredMetricsResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pagination")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pagination")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this types filtered metrics response based on the context it is used
func (m *TypesFilteredMetricsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppliedFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesFilteredMetricsResponse) contextValidateAppliedFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppliedFilters); i++ {

		if m.AppliedFilters[i] != nil {

			if swag.IsZero(m.AppliedFilters[i]) { // not required
				return nil
			}

			if err := m.AppliedFilters[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("applied_filters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("applied_filters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *TypesFilteredMetricsResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {

		if swag.IsZero(m.Pagination) { // not required
			return nil
		}

		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("pagination")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("pagination")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesFilteredMetricsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesFilteredMetricsResponse) UnmarshalBinary(b []byte) error {
	var res TypesFilteredMetricsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
