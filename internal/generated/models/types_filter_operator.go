// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesFilterOperator types filter operator
//
// swagger:model types.FilterOperator
type TypesFilterOperator string

func NewTypesFilterOperator(value TypesFilterOperator) *TypesFilterOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesFilterOperator.
func (m TypesFilterOperator) Pointer() *TypesFilterOperator {
	return &m
}

const (

	// TypesFilterOperatorEq captures enum value "eq"
	TypesFilterOperatorEq TypesFilterOperator = "eq"

	// TypesFilterOperatorNe captures enum value "ne"
	TypesFilterOperatorNe TypesFilterOperator = "ne"

	// TypesFilterOperatorContains captures enum value "contains"
	TypesFilterOperatorContains TypesFilterOperator = "contains"

	// TypesFilterOperatorNotContains captures enum value "not_contains"
	TypesFilterOperatorNotContains TypesFilterOperator = "not_contains"

	// TypesFilterOperatorStartsWith captures enum value "starts_with"
	TypesFilterOperatorStartsWith TypesFilterOperator = "starts_with"

	// TypesFilterOperatorEndsWith captures enum value "ends_with"
	TypesFilterOperatorEndsWith TypesFilterOperator = "ends_with"

	// TypesFilterOperatorRegex captures enum value "regex"
	TypesFilterOperatorRegex TypesFilterOperator = "regex"

	// TypesFilterOperatorNotRegex captures enum value "not_regex"
	TypesFilterOperatorNotRegex TypesFilterOperator = "not_regex"

	// TypesFilterOperatorGt captures enum value "gt"
	TypesFilterOperatorGt TypesFilterOperator = "gt"

	// TypesFilterOperatorLt captures enum value "lt"
	TypesFilterOperatorLt TypesFilterOperator = "lt"

	// TypesFilterOperatorGte captures enum value "gte"
	TypesFilterOperatorGte TypesFilterOperator = "gte"

	// TypesFilterOperatorLte captures enum value "lte"
	TypesFilterOperatorLte TypesFilterOperator = "lte"

	// TypesFilterOperatorIn captures enum value "in"
	TypesFilterOperatorIn TypesFilterOperator = "in"

	// TypesFilterOperatorNotIn captures enum value "not_in"
	TypesFilterOperatorNotIn TypesFilterOperator = "not_in"
)

// for schema
var typesFilterOperatorEnum []any

func init() {
	var res []TypesFilterOperator
	if err := json.Unmarshal([]byte(`["eq","ne","contains","not_contains","starts_with","ends_with","regex","not_regex","gt","lt","gte","lte","in","not_in"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesFilterOperatorEnum = append(typesFilterOperatorEnum, v)
	}
}

func (m TypesFilterOperator) validateTypesFilterOperatorEnum(path, location string, value TypesFilterOperator) error {
	if err := validate.EnumCase(path, location, value, typesFilterOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types filter operator
func (m TypesFilterOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesFilterOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types filter operator based on context it is used
func (m TypesFilterOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
