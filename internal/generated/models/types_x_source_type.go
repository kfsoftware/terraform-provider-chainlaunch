// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesXSourceType types x source type
//
// swagger:model types.XSourceType
type TypesXSourceType string

func NewTypesXSourceType(value TypesXSourceType) *TypesXSourceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesXSourceType.
func (m TypesXSourceType) Pointer() *TypesXSourceType {
	return &m
}

const (

	// TypesXSourceTypeFabricDashPeer captures enum value "fabric-peer"
	TypesXSourceTypeFabricDashPeer TypesXSourceType = "fabric-peer"

	// TypesXSourceTypeKey captures enum value "key"
	TypesXSourceTypeKey TypesXSourceType = "key"

	// TypesXSourceTypeFabricDashOrg captures enum value "fabric-org"
	TypesXSourceTypeFabricDashOrg TypesXSourceType = "fabric-org"

	// TypesXSourceTypeFabricDashNetwork captures enum value "fabric-network"
	TypesXSourceTypeFabricDashNetwork TypesXSourceType = "fabric-network"

	// TypesXSourceTypeFabricDashKey captures enum value "fabric-key"
	TypesXSourceTypeFabricDashKey TypesXSourceType = "fabric-key"
)

// for schema
var typesXSourceTypeEnum []any

func init() {
	var res []TypesXSourceType
	if err := json.Unmarshal([]byte(`["fabric-peer","key","fabric-org","fabric-network","fabric-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesXSourceTypeEnum = append(typesXSourceTypeEnum, v)
	}
}

func (m TypesXSourceType) validateTypesXSourceTypeEnum(path, location string, value TypesXSourceType) error {
	if err := validate.EnumCase(path, location, value, typesXSourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types x source type
func (m TypesXSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesXSourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types x source type based on context it is used
func (m TypesXSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
