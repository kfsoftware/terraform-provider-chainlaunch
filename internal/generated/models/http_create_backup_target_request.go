// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCreateBackupTargetRequest Request body for creating a new backup target
//
// swagger:model http.CreateBackupTargetRequest
type HTTPCreateBackupTargetRequest struct {

	// AWS access key ID (required for S3 type)
	// @Example "AKIAXXXXXXXXXXXXXXXX"
	AccessKeyID string `json:"accessKeyId,omitempty"`

	// S3 bucket name (required for S3 type)
	// @Example "my-backup-bucket"
	BucketName string `json:"bucketName,omitempty"`

	// Path within the bucket (required for S3 type)
	// @Example "backups/app1"
	BucketPath string `json:"bucketPath,omitempty"`

	// Custom S3 endpoint (optional)
	// @Example "https://s3.custom-domain.com"
	Endpoint string `json:"endpoint,omitempty"`

	// Use path-style S3 URLs
	// @Example false
	ForcePathStyle bool `json:"forcePathStyle,omitempty"`

	// Name of the backup target
	// @Example "daily-backup-s3"
	// Required: true
	Name *string `json:"name"`

	// AWS region (required for S3 type)
	// @Example "us-east-1"
	Region string `json:"region,omitempty"`

	// Restic repository password (optional - will be auto-generated if not provided)
	// @Example "my-secure-password-123"
	ResticPassword string `json:"resticPassword,omitempty"`

	// AWS secret key (required for S3 type)
	SecretKey string `json:"secretKey,omitempty"`

	// Type of backup target (S3 or LOCAL)
	// @Example "S3"
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this http create backup target request
func (m *HTTPCreateBackupTargetRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBackupTargetRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBackupTargetRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http create backup target request based on context it is used
func (m *HTTPCreateBackupTargetRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBackupTargetRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBackupTargetRequest) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBackupTargetRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
