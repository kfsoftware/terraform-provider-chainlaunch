// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerVaultImportData handler vault import data
//
// swagger:model handler.VaultImportData
type HandlerVaultImportData struct {

	// Optional: Vault paths for admin keys
	AdminSignPath string `json:"adminSignPath,omitempty"`

	// admin Tls path
	AdminTLSPath string `json:"adminTlsPath,omitempty"`

	// Optional: Vault paths for client keys
	ClientSignPath string `json:"clientSignPath,omitempty"`

	// Vault paths for CA certificates and keys
	// Required: true
	SignCaPath *string `json:"signCaPath"`

	// Vault path for TLS CA
	// Required: true
	TLSCaPath *string `json:"tlsCaPath"`
}

// Validate validates this handler vault import data
func (m *HandlerVaultImportData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignCaPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSCaPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerVaultImportData) validateSignCaPath(formats strfmt.Registry) error {

	if err := validate.Required("signCaPath", "body", m.SignCaPath); err != nil {
		return err
	}

	return nil
}

func (m *HandlerVaultImportData) validateTLSCaPath(formats strfmt.Registry) error {

	if err := validate.Required("tlsCaPath", "body", m.TLSCaPath); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler vault import data based on context it is used
func (m *HandlerVaultImportData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerVaultImportData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerVaultImportData) UnmarshalBinary(b []byte) error {
	var res HandlerVaultImportData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
