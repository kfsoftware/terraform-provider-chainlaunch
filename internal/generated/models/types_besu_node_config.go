// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesBesuNodeConfig types besu node config
//
// swagger:model types.BesuNodeConfig
type TypesBesuNodeConfig struct {

	// Permissions configuration
	AccountsAllowList []string `json:"accountsAllowList"`

	// boot nodes
	BootNodes []string `json:"bootNodes"`

	// env
	Env map[string]string `json:"env,omitempty"`

	// external Ip
	// Required: true
	ExternalIP *string `json:"externalIp"`

	// host allow list
	HostAllowList string `json:"hostAllowList,omitempty"`

	// internal Ip
	// Required: true
	InternalIP *string `json:"internalIp"`

	// jwt authentication algorithm
	JwtAuthenticationAlgorithm string `json:"jwtAuthenticationAlgorithm,omitempty"`

	// JWT Authentication configuration
	JwtEnabled bool `json:"jwtEnabled,omitempty"`

	// jwt public key content
	JwtPublicKeyContent string `json:"jwtPublicKeyContent,omitempty"`

	// key Id
	// Required: true
	KeyID *int64 `json:"keyId"`

	// metrics enabled
	MetricsEnabled bool `json:"metricsEnabled,omitempty"`

	// metrics port
	MetricsPort int64 `json:"metricsPort,omitempty"`

	// metrics protocol
	MetricsProtocol string `json:"metricsProtocol,omitempty"`

	// Gas and access control configuration
	MinGasPrice int64 `json:"minGasPrice,omitempty"`

	// @Description The deployment mode (service or docker)
	// Example: service
	Mode string `json:"mode,omitempty"`

	// network Id
	// Required: true
	NetworkID *int64 `json:"networkId"`

	// nodes allow list
	NodesAllowList []string `json:"nodesAllowList"`

	// p2p host
	// Required: true
	P2pHost *string `json:"p2pHost"`

	// p2p port
	// Required: true
	P2pPort *int64 `json:"p2pPort"`

	// rpc host
	// Required: true
	RPCHost *string `json:"rpcHost"`

	// rpc port
	// Required: true
	RPCPort *int64 `json:"rpcPort"`

	// @Description The type of node (fabric-peer, fabric-orderer, besu)
	// Example: fabric-peer
	Type string `json:"type,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this types besu node config
func (m *TypesBesuNodeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateP2pHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateP2pPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRPCPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesBesuNodeConfig) validateExternalIP(formats strfmt.Registry) error {

	if err := validate.Required("externalIp", "body", m.ExternalIP); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateInternalIP(formats strfmt.Registry) error {

	if err := validate.Required("internalIp", "body", m.InternalIP); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("keyId", "body", m.KeyID); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateP2pHost(formats strfmt.Registry) error {

	if err := validate.Required("p2pHost", "body", m.P2pHost); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateP2pPort(formats strfmt.Registry) error {

	if err := validate.Required("p2pPort", "body", m.P2pPort); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateRPCHost(formats strfmt.Registry) error {

	if err := validate.Required("rpcHost", "body", m.RPCHost); err != nil {
		return err
	}

	return nil
}

func (m *TypesBesuNodeConfig) validateRPCPort(formats strfmt.Registry) error {

	if err := validate.Required("rpcPort", "body", m.RPCPort); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types besu node config based on context it is used
func (m *TypesBesuNodeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesBesuNodeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesBesuNodeConfig) UnmarshalBinary(b []byte) error {
	var res TypesBesuNodeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
