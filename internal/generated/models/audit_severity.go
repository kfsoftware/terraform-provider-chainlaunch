// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuditSeverity audit severity
//
// swagger:model audit.Severity
type AuditSeverity string

func NewAuditSeverity(value AuditSeverity) *AuditSeverity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuditSeverity.
func (m AuditSeverity) Pointer() *AuditSeverity {
	return &m
}

const (

	// AuditSeverityDEBUG captures enum value "DEBUG"
	AuditSeverityDEBUG AuditSeverity = "DEBUG"

	// AuditSeverityINFO captures enum value "INFO"
	AuditSeverityINFO AuditSeverity = "INFO"

	// AuditSeverityWARNING captures enum value "WARNING"
	AuditSeverityWARNING AuditSeverity = "WARNING"

	// AuditSeverityCRITICAL captures enum value "CRITICAL"
	AuditSeverityCRITICAL AuditSeverity = "CRITICAL"
)

// for schema
var auditSeverityEnum []any

func init() {
	var res []AuditSeverity
	if err := json.Unmarshal([]byte(`["DEBUG","INFO","WARNING","CRITICAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditSeverityEnum = append(auditSeverityEnum, v)
	}
}

func (m AuditSeverity) validateAuditSeverityEnum(path, location string, value AuditSeverity) error {
	if err := validate.EnumCase(path, location, value, auditSeverityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this audit severity
func (m AuditSeverity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuditSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this audit severity based on context it is used
func (m AuditSeverity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
