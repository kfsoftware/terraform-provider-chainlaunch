// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TroubleshootingConnectionTestResponse troubleshooting connection test response
//
// swagger:model troubleshooting.ConnectionTestResponse
type TroubleshootingConnectionTestResponse struct {

	// details
	Details map[string]string `json:"details,omitempty"`

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// response time ms
	ResponseTimeMs int64 `json:"response_time_ms,omitempty"`

	// status code
	StatusCode int64 `json:"status_code,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// tls info
	TLSInfo *TroubleshootingTLSInfo `json:"tls_info,omitempty"`
}

// Validate validates this troubleshooting connection test response
func (m *TroubleshootingConnectionTestResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTLSInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TroubleshootingConnectionTestResponse) validateTLSInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSInfo) { // not required
		return nil
	}

	if m.TLSInfo != nil {
		if err := m.TLSInfo.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tls_info")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tls_info")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this troubleshooting connection test response based on the context it is used
func (m *TroubleshootingConnectionTestResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTLSInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TroubleshootingConnectionTestResponse) contextValidateTLSInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TLSInfo != nil {

		if swag.IsZero(m.TLSInfo) { // not required
			return nil
		}

		if err := m.TLSInfo.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("tls_info")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("tls_info")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TroubleshootingConnectionTestResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TroubleshootingConnectionTestResponse) UnmarshalBinary(b []byte) error {
	var res TroubleshootingConnectionTestResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
