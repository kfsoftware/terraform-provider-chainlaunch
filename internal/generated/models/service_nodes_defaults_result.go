// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceNodesDefaultsResult service nodes defaults result
//
// swagger:model service.NodesDefaultsResult
type ServiceNodesDefaultsResult struct {

	// available addresses
	AvailableAddresses []string `json:"availableAddresses"`

	// orderers
	Orderers []*ServiceNodeDefaults `json:"orderers"`

	// peers
	Peers []*ServiceNodeDefaults `json:"peers"`
}

// Validate validates this service nodes defaults result
func (m *ServiceNodesDefaultsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceNodesDefaultsResult) validateOrderers(formats strfmt.Registry) error {
	if swag.IsZero(m.Orderers) { // not required
		return nil
	}

	for i := 0; i < len(m.Orderers); i++ {
		if swag.IsZero(m.Orderers[i]) { // not required
			continue
		}

		if m.Orderers[i] != nil {
			if err := m.Orderers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("orderers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("orderers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ServiceNodesDefaultsResult) validatePeers(formats strfmt.Registry) error {
	if swag.IsZero(m.Peers) { // not required
		return nil
	}

	for i := 0; i < len(m.Peers); i++ {
		if swag.IsZero(m.Peers[i]) { // not required
			continue
		}

		if m.Peers[i] != nil {
			if err := m.Peers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service nodes defaults result based on the context it is used
func (m *ServiceNodesDefaultsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceNodesDefaultsResult) contextValidateOrderers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Orderers); i++ {

		if m.Orderers[i] != nil {

			if swag.IsZero(m.Orderers[i]) { // not required
				return nil
			}

			if err := m.Orderers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("orderers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("orderers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ServiceNodesDefaultsResult) contextValidatePeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Peers); i++ {

		if m.Peers[i] != nil {

			if swag.IsZero(m.Peers[i]) { // not required
				return nil
			}

			if err := m.Peers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceNodesDefaultsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceNodesDefaultsResult) UnmarshalBinary(b []byte) error {
	var res ServiceNodesDefaultsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
