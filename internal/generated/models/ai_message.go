// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AiMessage ai message
//
// swagger:model ai.Message
type AiMessage struct {

	// content
	Content string `json:"content,omitempty"`

	// conversation Id
	ConversationID int64 `json:"conversationId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// sender
	Sender string `json:"sender,omitempty"`

	// tool arguments
	ToolArguments string `json:"toolArguments,omitempty"`

	// tool calls
	ToolCalls []*AiToolCallAI `json:"toolCalls"`
}

// Validate validates this ai message
func (m *AiMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToolCalls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AiMessage) validateToolCalls(formats strfmt.Registry) error {
	if swag.IsZero(m.ToolCalls) { // not required
		return nil
	}

	for i := 0; i < len(m.ToolCalls); i++ {
		if swag.IsZero(m.ToolCalls[i]) { // not required
			continue
		}

		if m.ToolCalls[i] != nil {
			if err := m.ToolCalls[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("toolCalls" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("toolCalls" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ai message based on the context it is used
func (m *AiMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateToolCalls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AiMessage) contextValidateToolCalls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToolCalls); i++ {

		if m.ToolCalls[i] != nil {

			if swag.IsZero(m.ToolCalls[i]) { // not required
				return nil
			}

			if err := m.ToolCalls[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("toolCalls" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("toolCalls" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AiMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AiMessage) UnmarshalBinary(b []byte) error {
	var res AiMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
