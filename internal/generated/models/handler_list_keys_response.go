// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerListKeysResponse handler list keys response
//
// swagger:model handler.ListKeysResponse
type HandlerListKeysResponse struct {

	// keys
	Keys map[string]HandlerKeyResponse `json:"keys,omitempty"`
}

// Validate validates this handler list keys response
func (m *HandlerListKeysResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerListKeysResponse) validateKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.Keys) { // not required
		return nil
	}

	for k := range m.Keys {

		if err := validate.Required("keys"+"."+k, "body", m.Keys[k]); err != nil {
			return err
		}
		if val, ok := m.Keys[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("keys" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("keys" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this handler list keys response based on the context it is used
func (m *HandlerListKeysResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerListKeysResponse) contextValidateKeys(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Keys {

		if val, ok := m.Keys[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerListKeysResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerListKeysResponse) UnmarshalBinary(b []byte) error {
	var res HandlerListKeysResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
