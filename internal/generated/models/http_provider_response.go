// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HTTPProviderResponse http provider response
//
// swagger:model http.ProviderResponse
type HTTPProviderResponse struct {

	// config
	Config any `json:"config,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// last test at
	LastTestAt string `json:"lastTestAt,omitempty"`

	// last test message
	LastTestMessage string `json:"lastTestMessage,omitempty"`

	// last test status
	LastTestStatus string `json:"lastTestStatus,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notify backup failure
	NotifyBackupFailure bool `json:"notifyBackupFailure,omitempty"`

	// notify backup success
	NotifyBackupSuccess bool `json:"notifyBackupSuccess,omitempty"`

	// notify node downtime
	NotifyNodeDowntime bool `json:"notifyNodeDowntime,omitempty"`

	// notify s3 conn issue
	NotifyS3ConnIssue bool `json:"notifyS3ConnIssue,omitempty"`

	// type
	Type NotificationsProviderType `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this http provider response
func (m *HTTPProviderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPProviderResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// ContextValidate validate this http provider response based on the context it is used
func (m *HTTPProviderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPProviderResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPProviderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPProviderResponse) UnmarshalBinary(b []byte) error {
	var res HTTPProviderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
