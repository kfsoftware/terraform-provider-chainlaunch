// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonitoringHealthcheckHistoryResponse monitoring healthcheck history response
//
// swagger:model monitoring.HealthcheckHistoryResponse
type MonitoringHealthcheckHistoryResponse struct {

	// healthchecks
	Healthchecks []*MonitoringHealthcheckRecord `json:"healthchecks"`

	// interval
	Interval string `json:"interval,omitempty"`

	// node Id
	NodeID int64 `json:"nodeId,omitempty"`

	// node name
	NodeName string `json:"nodeName,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// summary
	Summary *MonitoringHealthcheckSummary `json:"summary,omitempty"`

	// time range
	TimeRange *MonitoringTimeRange `json:"timeRange,omitempty"`
}

// Validate validates this monitoring healthcheck history response
func (m *MonitoringHealthcheckHistoryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealthchecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) validateHealthchecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Healthchecks) { // not required
		return nil
	}

	for i := 0; i < len(m.Healthchecks); i++ {
		if swag.IsZero(m.Healthchecks[i]) { // not required
			continue
		}

		if m.Healthchecks[i] != nil {
			if err := m.Healthchecks[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("healthchecks" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("healthchecks" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("summary")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("summary")
			}

			return err
		}
	}

	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) validateTimeRange(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRange) { // not required
		return nil
	}

	if m.TimeRange != nil {
		if err := m.TimeRange.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("timeRange")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("timeRange")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this monitoring healthcheck history response based on the context it is used
func (m *MonitoringHealthcheckHistoryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHealthchecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) contextValidateHealthchecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Healthchecks); i++ {

		if m.Healthchecks[i] != nil {

			if swag.IsZero(m.Healthchecks[i]) { // not required
				return nil
			}

			if err := m.Healthchecks[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("healthchecks" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("healthchecks" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {

		if swag.IsZero(m.Summary) { // not required
			return nil
		}

		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("summary")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("summary")
			}

			return err
		}
	}

	return nil
}

func (m *MonitoringHealthcheckHistoryResponse) contextValidateTimeRange(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeRange != nil {

		if swag.IsZero(m.TimeRange) { // not required
			return nil
		}

		if err := m.TimeRange.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("timeRange")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("timeRange")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringHealthcheckHistoryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringHealthcheckHistoryResponse) UnmarshalBinary(b []byte) error {
	var res MonitoringHealthcheckHistoryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
