// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelsVaultConfigPayload models vault config payload
//
// swagger:model models.VaultConfigPayload
type ModelsVaultConfigPayload struct {

	// Fields for IMPORT operation (linking existing Vault)
	Address string `json:"address,omitempty"`

	// optional for IMPORT
	CaCert string `json:"caCert,omitempty"`

	// Default TTL for CA certificates (e.g., "87600h" for 10 years)
	DefaultCACertTTL string `json:"defaultCACertTTL,omitempty"`

	// Certificate expiration configuration (for PKI engine)
	DefaultCertTTL string `json:"defaultCertTTL,omitempty"`

	// defaults to "secret"
	KvMount string `json:"kvMount,omitempty"`

	// Maximum TTL for CA certificates (e.g., "175200h" for 20 years)
	MaxCACertTTL string `json:"maxCACertTTL,omitempty"`

	// Maximum TTL for certificates (e.g., "87600h" for 10 years)
	MaxCertTTL string `json:"maxCertTTL,omitempty"`

	// Fields for CREATE operation (deploying new Vault)
	Mode string `json:"mode,omitempty"`

	// optional Vault namespace
	Namespace string `json:"namespace,omitempty"`

	// "host" or "bridge" for CREATE
	Network string `json:"network,omitempty"`

	// Operation type: "IMPORT" to link existing Vault, "CREATE" to deploy new Vault
	// Required: true
	Operation *string `json:"operation"`

	// defaults to "pki"
	PkiMount string `json:"pkiMount,omitempty"`

	// port for CREATE (nullable)
	Port int64 `json:"port,omitempty"`

	// unseal shares for CREATE (nullable)
	Shares int64 `json:"shares,omitempty"`

	// unseal threshold for CREATE (nullable)
	Threshold int64 `json:"threshold,omitempty"`

	// optional for IMPORT
	Token string `json:"token,omitempty"`

	// Common fields for both operations
	TransitMount string `json:"transitMount,omitempty"`

	// Vault version for CREATE
	Version string `json:"version,omitempty"`
}

// Validate validates this models vault config payload
func (m *ModelsVaultConfigPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsVaultConfigPayload) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this models vault config payload based on context it is used
func (m *ModelsVaultConfigPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModelsVaultConfigPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsVaultConfigPayload) UnmarshalBinary(b []byte) error {
	var res ModelsVaultConfigPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
