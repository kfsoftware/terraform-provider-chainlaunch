// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceBesuReadinessResponse service besu readiness response
//
// swagger:model service.BesuReadinessResponse
type ServiceBesuReadinessResponse struct {

	// arch
	Arch string `json:"arch,omitempty"`

	// besu
	Besu *ServiceBesuReadinessInfo `json:"besu,omitempty"`

	// errors
	Errors []string `json:"errors"`

	// java
	Java *ServiceJavaReadinessInfo `json:"java,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// ready
	Ready bool `json:"ready,omitempty"`

	// warnings
	Warnings []string `json:"warnings"`
}

// Validate validates this service besu readiness response
func (m *ServiceBesuReadinessResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBesu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJava(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBesuReadinessResponse) validateBesu(formats strfmt.Registry) error {
	if swag.IsZero(m.Besu) { // not required
		return nil
	}

	if m.Besu != nil {
		if err := m.Besu.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("besu")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("besu")
			}

			return err
		}
	}

	return nil
}

func (m *ServiceBesuReadinessResponse) validateJava(formats strfmt.Registry) error {
	if swag.IsZero(m.Java) { // not required
		return nil
	}

	if m.Java != nil {
		if err := m.Java.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("java")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("java")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this service besu readiness response based on the context it is used
func (m *ServiceBesuReadinessResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBesu(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJava(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBesuReadinessResponse) contextValidateBesu(ctx context.Context, formats strfmt.Registry) error {

	if m.Besu != nil {

		if swag.IsZero(m.Besu) { // not required
			return nil
		}

		if err := m.Besu.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("besu")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("besu")
			}

			return err
		}
	}

	return nil
}

func (m *ServiceBesuReadinessResponse) contextValidateJava(ctx context.Context, formats strfmt.Registry) error {

	if m.Java != nil {

		if swag.IsZero(m.Java) { // not required
			return nil
		}

		if err := m.Java.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("java")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("java")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBesuReadinessResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBesuReadinessResponse) UnmarshalBinary(b []byte) error {
	var res ServiceBesuReadinessResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
