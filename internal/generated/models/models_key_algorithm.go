// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsKeyAlgorithm models key algorithm
//
// swagger:model models.KeyAlgorithm
type ModelsKeyAlgorithm string

func NewModelsKeyAlgorithm(value ModelsKeyAlgorithm) *ModelsKeyAlgorithm {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsKeyAlgorithm.
func (m ModelsKeyAlgorithm) Pointer() *ModelsKeyAlgorithm {
	return &m
}

const (

	// ModelsKeyAlgorithmRSA captures enum value "RSA"
	ModelsKeyAlgorithmRSA ModelsKeyAlgorithm = "RSA"

	// ModelsKeyAlgorithmEC captures enum value "EC"
	ModelsKeyAlgorithmEC ModelsKeyAlgorithm = "EC"

	// ModelsKeyAlgorithmED25519 captures enum value "ED25519"
	ModelsKeyAlgorithmED25519 ModelsKeyAlgorithm = "ED25519"
)

// for schema
var modelsKeyAlgorithmEnum []any

func init() {
	var res []ModelsKeyAlgorithm
	if err := json.Unmarshal([]byte(`["RSA","EC","ED25519"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsKeyAlgorithmEnum = append(modelsKeyAlgorithmEnum, v)
	}
}

func (m ModelsKeyAlgorithm) validateModelsKeyAlgorithmEnum(path, location string, value ModelsKeyAlgorithm) error {
	if err := validate.EnumCase(path, location, value, modelsKeyAlgorithmEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models key algorithm
func (m ModelsKeyAlgorithm) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsKeyAlgorithmEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models key algorithm based on context it is used
func (m ModelsKeyAlgorithm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
