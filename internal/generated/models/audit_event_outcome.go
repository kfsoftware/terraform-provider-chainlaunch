// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuditEventOutcome audit event outcome
//
// swagger:model audit.EventOutcome
type AuditEventOutcome string

func NewAuditEventOutcome(value AuditEventOutcome) *AuditEventOutcome {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuditEventOutcome.
func (m AuditEventOutcome) Pointer() *AuditEventOutcome {
	return &m
}

const (

	// AuditEventOutcomeSUCCESS captures enum value "SUCCESS"
	AuditEventOutcomeSUCCESS AuditEventOutcome = "SUCCESS"

	// AuditEventOutcomeFAILURE captures enum value "FAILURE"
	AuditEventOutcomeFAILURE AuditEventOutcome = "FAILURE"

	// AuditEventOutcomePENDING captures enum value "PENDING"
	AuditEventOutcomePENDING AuditEventOutcome = "PENDING"
)

// for schema
var auditEventOutcomeEnum []any

func init() {
	var res []AuditEventOutcome
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILURE","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		auditEventOutcomeEnum = append(auditEventOutcomeEnum, v)
	}
}

func (m AuditEventOutcome) validateAuditEventOutcomeEnum(path, location string, value AuditEventOutcome) error {
	if err := validate.EnumCase(path, location, value, auditEventOutcomeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this audit event outcome
func (m AuditEventOutcome) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuditEventOutcomeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this audit event outcome based on context it is used
func (m AuditEventOutcome) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
