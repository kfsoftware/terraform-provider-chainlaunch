// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MonitoringNodeHealthStatusResponse monitoring node health status response
//
// swagger:model monitoring.NodeHealthStatusResponse
type MonitoringNodeHealthStatusResponse struct {

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// last checked
	LastChecked string `json:"lastChecked,omitempty"`

	// metadata
	Metadata any `json:"metadata,omitempty"`

	// node Id
	NodeID int64 `json:"nodeId,omitempty"`

	// node name
	NodeName string `json:"nodeName,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// response time ms
	ResponseTimeMs int64 `json:"responseTimeMs,omitempty"`

	// status
	Status MonitoringHealthStatus `json:"status,omitempty"`
}

// Validate validates this monitoring node health status response
func (m *MonitoringNodeHealthStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringNodeHealthStatusResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("status")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("status")
		}

		return err
	}

	return nil
}

// ContextValidate validate this monitoring node health status response based on the context it is used
func (m *MonitoringNodeHealthStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringNodeHealthStatusResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("status")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("status")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringNodeHealthStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringNodeHealthStatusResponse) UnmarshalBinary(b []byte) error {
	var res MonitoringNodeHealthStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
