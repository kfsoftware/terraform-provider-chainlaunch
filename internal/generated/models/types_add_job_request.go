// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TypesAddJobRequest types add job request
//
// swagger:model types.AddJobRequest
type TypesAddJobRequest struct {

	// job name
	// Required: true
	JobName *string `json:"job_name"`

	// metrics path
	MetricsPath string `json:"metrics_path,omitempty"`

	// scrape interval
	ScrapeInterval string `json:"scrape_interval,omitempty"`

	// targets
	// Required: true
	Targets []string `json:"targets"`
}

// Validate validates this types add job request
func (m *TypesAddJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesAddJobRequest) validateJobName(formats strfmt.Registry) error {

	if err := validate.Required("job_name", "body", m.JobName); err != nil {
		return err
	}

	return nil
}

func (m *TypesAddJobRequest) validateTargets(formats strfmt.Registry) error {

	if err := validate.Required("targets", "body", m.Targets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this types add job request based on context it is used
func (m *TypesAddJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TypesAddJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesAddJobRequest) UnmarshalBinary(b []byte) error {
	var res TypesAddJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
