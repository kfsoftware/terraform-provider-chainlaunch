// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BlockTxType block tx type
//
// swagger:model block.TxType
type BlockTxType string

func NewBlockTxType(value BlockTxType) *BlockTxType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BlockTxType.
func (m BlockTxType) Pointer() *BlockTxType {
	return &m
}

const (

	// BlockTxTypeMESSAGE captures enum value "MESSAGE"
	BlockTxTypeMESSAGE BlockTxType = "MESSAGE"

	// BlockTxTypeCONFIG captures enum value "CONFIG"
	BlockTxTypeCONFIG BlockTxType = "CONFIG"

	// BlockTxTypeCONFIGUPDATE captures enum value "CONFIG_UPDATE"
	BlockTxTypeCONFIGUPDATE BlockTxType = "CONFIG_UPDATE"

	// BlockTxTypeENDORSERTRANSACTION captures enum value "ENDORSER_TRANSACTION"
	BlockTxTypeENDORSERTRANSACTION BlockTxType = "ENDORSER_TRANSACTION"

	// BlockTxTypeORDERERTRANSACTION captures enum value "ORDERER_TRANSACTION"
	BlockTxTypeORDERERTRANSACTION BlockTxType = "ORDERER_TRANSACTION"

	// BlockTxTypeDELIVERSEEKINFO captures enum value "DELIVER_SEEK_INFO"
	BlockTxTypeDELIVERSEEKINFO BlockTxType = "DELIVER_SEEK_INFO"

	// BlockTxTypeCHAINCODEPACKAGE captures enum value "CHAINCODE_PACKAGE"
	BlockTxTypeCHAINCODEPACKAGE BlockTxType = "CHAINCODE_PACKAGE"
)

// for schema
var blockTxTypeEnum []any

func init() {
	var res []BlockTxType
	if err := json.Unmarshal([]byte(`["MESSAGE","CONFIG","CONFIG_UPDATE","ENDORSER_TRANSACTION","ORDERER_TRANSACTION","DELIVER_SEEK_INFO","CHAINCODE_PACKAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blockTxTypeEnum = append(blockTxTypeEnum, v)
	}
}

func (m BlockTxType) validateBlockTxTypeEnum(path, location string, value BlockTxType) error {
	if err := validate.EnumCase(path, location, value, blockTxTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this block tx type
func (m BlockTxType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBlockTxTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this block tx type based on context it is used
func (m BlockTxType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
