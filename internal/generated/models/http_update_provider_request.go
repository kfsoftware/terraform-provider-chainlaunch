// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateProviderRequest http update provider request
//
// swagger:model http.UpdateProviderRequest
type HTTPUpdateProviderRequest struct {

	// config
	// Required: true
	Config any `json:"config"`

	// is default
	IsDefault bool `json:"isDefault,omitempty"`

	// name
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// notify backup failure
	NotifyBackupFailure bool `json:"notifyBackupFailure,omitempty"`

	// notify backup success
	NotifyBackupSuccess bool `json:"notifyBackupSuccess,omitempty"`

	// notify node downtime
	NotifyNodeDowntime bool `json:"notifyNodeDowntime,omitempty"`

	// notify s3 conn issue
	NotifyS3ConnIssue bool `json:"notifyS3ConnIssue,omitempty"`

	// type
	// Required: true
	Type *NotificationsProviderType `json:"type"`
}

// Validate validates this http update provider request
func (m *HTTPUpdateProviderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateProviderRequest) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *HTTPUpdateProviderRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateProviderRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("type")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("type")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this http update provider request based on the context it is used
func (m *HTTPUpdateProviderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateProviderRequest) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("type")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("type")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateProviderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateProviderRequest) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateProviderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
