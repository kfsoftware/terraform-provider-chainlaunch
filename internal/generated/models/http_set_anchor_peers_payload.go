// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPSetAnchorPeersPayload http set anchor peers payload
//
// swagger:model http.SetAnchorPeersPayload
type HTTPSetAnchorPeersPayload struct {

	// anchor peers
	// Required: true
	// Min Items: 1
	AnchorPeers []*HTTPSetAnchorPeersPayloadAnchorPeersItems0 `json:"anchor_peers"`

	// msp id
	// Required: true
	MspID *string `json:"msp_id"`
}

// Validate validates this http set anchor peers payload
func (m *HTTPSetAnchorPeersPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnchorPeers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMspID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPSetAnchorPeersPayload) validateAnchorPeers(formats strfmt.Registry) error {

	if err := validate.Required("anchor_peers", "body", m.AnchorPeers); err != nil {
		return err
	}

	iAnchorPeersSize := int64(len(m.AnchorPeers))

	if err := validate.MinItems("anchor_peers", "body", iAnchorPeersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.AnchorPeers); i++ {
		if swag.IsZero(m.AnchorPeers[i]) { // not required
			continue
		}

		if m.AnchorPeers[i] != nil {
			if err := m.AnchorPeers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("anchor_peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("anchor_peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPSetAnchorPeersPayload) validateMspID(formats strfmt.Registry) error {

	if err := validate.Required("msp_id", "body", m.MspID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this http set anchor peers payload based on the context it is used
func (m *HTTPSetAnchorPeersPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnchorPeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPSetAnchorPeersPayload) contextValidateAnchorPeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AnchorPeers); i++ {

		if m.AnchorPeers[i] != nil {

			if swag.IsZero(m.AnchorPeers[i]) { // not required
				return nil
			}

			if err := m.AnchorPeers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("anchor_peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("anchor_peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPSetAnchorPeersPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPSetAnchorPeersPayload) UnmarshalBinary(b []byte) error {
	var res HTTPSetAnchorPeersPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPSetAnchorPeersPayloadAnchorPeersItems0 HTTP set anchor peers payload anchor peers items0
//
// swagger:model HTTPSetAnchorPeersPayloadAnchorPeersItems0
type HTTPSetAnchorPeersPayloadAnchorPeersItems0 struct {

	// host
	// Required: true
	Host *string `json:"host"`

	// port
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port"`
}

// Validate validates this HTTP set anchor peers payload anchor peers items0
func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this HTTP set anchor peers payload anchor peers items0 based on context it is used
func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPSetAnchorPeersPayloadAnchorPeersItems0) UnmarshalBinary(b []byte) error {
	var res HTTPSetAnchorPeersPayloadAnchorPeersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
