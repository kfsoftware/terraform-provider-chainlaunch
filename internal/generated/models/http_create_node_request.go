// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCreateNodeRequest Request payload for creating a new node
//
// swagger:model http.CreateNodeRequest
type HTTPCreateNodeRequest struct {

	// @Description Besu node configuration, required when creating a Besu node
	BesuNode struct {
		TypesBesuNodeConfig
	} `json:"besuNode,omitempty"`

	// @Description Blockchain platform (fabric or besu)
	// Example: fabric
	// Required: true
	BlockchainPlatform struct {
		TypesBlockchainPlatform
	} `json:"blockchainPlatform"`

	// @Description Fabric orderer configuration, required when creating a Fabric orderer node
	FabricOrderer struct {
		TypesFabricOrdererConfig
	} `json:"fabricOrderer,omitempty"`

	// @Description Fabric peer configuration, required when creating a Fabric peer node
	FabricPeer struct {
		TypesFabricPeerConfig
	} `json:"fabricPeer,omitempty"`

	// @Description Name of the node
	// Example: peer0-org1
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this http create node request
func (m *HTTPCreateNodeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBesuNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockchainPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricOrderer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricPeer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateNodeRequest) validateBesuNode(formats strfmt.Registry) error {
	if swag.IsZero(m.BesuNode) { // not required
		return nil
	}

	return nil
}

func (m *HTTPCreateNodeRequest) validateBlockchainPlatform(formats strfmt.Registry) error {

	return nil
}

func (m *HTTPCreateNodeRequest) validateFabricOrderer(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricOrderer) { // not required
		return nil
	}

	return nil
}

func (m *HTTPCreateNodeRequest) validateFabricPeer(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricPeer) { // not required
		return nil
	}

	return nil
}

func (m *HTTPCreateNodeRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this http create node request based on the context it is used
func (m *HTTPCreateNodeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBesuNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlockchainPlatform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricOrderer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricPeer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateNodeRequest) contextValidateBesuNode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HTTPCreateNodeRequest) contextValidateBlockchainPlatform(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HTTPCreateNodeRequest) contextValidateFabricOrderer(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HTTPCreateNodeRequest) contextValidateFabricPeer(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateNodeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateNodeRequest) UnmarshalBinary(b []byte) error {
	var res HTTPCreateNodeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
