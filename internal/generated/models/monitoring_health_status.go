// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MonitoringHealthStatus monitoring health status
//
// swagger:model monitoring.HealthStatus
type MonitoringHealthStatus string

func NewMonitoringHealthStatus(value MonitoringHealthStatus) *MonitoringHealthStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MonitoringHealthStatus.
func (m MonitoringHealthStatus) Pointer() *MonitoringHealthStatus {
	return &m
}

const (

	// MonitoringHealthStatusHealthy captures enum value "healthy"
	MonitoringHealthStatusHealthy MonitoringHealthStatus = "healthy"

	// MonitoringHealthStatusUnhealthy captures enum value "unhealthy"
	MonitoringHealthStatusUnhealthy MonitoringHealthStatus = "unhealthy"

	// MonitoringHealthStatusUnreachable captures enum value "unreachable"
	MonitoringHealthStatusUnreachable MonitoringHealthStatus = "unreachable"
)

// for schema
var monitoringHealthStatusEnum []any

func init() {
	var res []MonitoringHealthStatus
	if err := json.Unmarshal([]byte(`["healthy","unhealthy","unreachable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoringHealthStatusEnum = append(monitoringHealthStatusEnum, v)
	}
}

func (m MonitoringHealthStatus) validateMonitoringHealthStatusEnum(path, location string, value MonitoringHealthStatus) error {
	if err := validate.EnumCase(path, location, value, monitoringHealthStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this monitoring health status
func (m MonitoringHealthStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMonitoringHealthStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this monitoring health status based on context it is used
func (m MonitoringHealthStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
