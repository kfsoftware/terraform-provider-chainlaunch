// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerAWSKMSImportData handler a w s k m s import data
//
// swagger:model handler.AWSKMSImportData
type HandlerAWSKMSImportData struct {

	// Required: CA certificates (stored in ChainLaunch, keys tracked in KMS)
	// Required: true
	SignCaCert *string `json:"signCaCert"`

	// Required: KMS key IDs/ARNs for the CA keys
	// Required: true
	SignCaKeyID *string `json:"signCaKeyId"`

	// PEM-encoded TLS CA certificate
	// Required: true
	TLSCaCert *string `json:"tlsCaCert"`

	// AWS KMS key ID or ARN for TLS CA
	// Required: true
	TLSCaKeyID *string `json:"tlsCaKeyId"`
}

// Validate validates this handler a w s k m s import data
func (m *HandlerAWSKMSImportData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignCaCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignCaKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSCaCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSCaKeyID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerAWSKMSImportData) validateSignCaCert(formats strfmt.Registry) error {

	if err := validate.Required("signCaCert", "body", m.SignCaCert); err != nil {
		return err
	}

	return nil
}

func (m *HandlerAWSKMSImportData) validateSignCaKeyID(formats strfmt.Registry) error {

	if err := validate.Required("signCaKeyId", "body", m.SignCaKeyID); err != nil {
		return err
	}

	return nil
}

func (m *HandlerAWSKMSImportData) validateTLSCaCert(formats strfmt.Registry) error {

	if err := validate.Required("tlsCaCert", "body", m.TLSCaCert); err != nil {
		return err
	}

	return nil
}

func (m *HandlerAWSKMSImportData) validateTLSCaKeyID(formats strfmt.Registry) error {

	if err := validate.Required("tlsCaKeyId", "body", m.TLSCaKeyID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler a w s k m s import data based on context it is used
func (m *HandlerAWSKMSImportData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerAWSKMSImportData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerAWSKMSImportData) UnmarshalBinary(b []byte) error {
	var res HandlerAWSKMSImportData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
