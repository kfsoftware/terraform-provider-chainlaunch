// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCreateBackupScheduleRequest Request body for creating a new backup schedule
//
// swagger:model http.CreateBackupScheduleRequest
type HTTPCreateBackupScheduleRequest struct {

	// Cron expression for schedule
	// @Example "0 0 * * *"
	// Required: true
	CronExpression *string `json:"cronExpression"`

	// Optional description
	// @Example "Daily backup at midnight"
	Description string `json:"description,omitempty"`

	// Whether the schedule is enabled
	// @Example true
	Enabled bool `json:"enabled,omitempty"`

	// Name of the backup schedule
	// @Example "daily-backup"
	// Required: true
	Name *string `json:"name"`

	// Number of days to retain backups
	// @Example 30
	// Required: true
	// Minimum: 1
	RetentionDays *int64 `json:"retentionDays"`

	// ID of the backup target to use
	// @Example 1
	// Required: true
	TargetID *int64 `json:"targetId"`
}

// Validate validates this http create backup schedule request
func (m *HTTPCreateBackupScheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCronExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBackupScheduleRequest) validateCronExpression(formats strfmt.Registry) error {

	if err := validate.Required("cronExpression", "body", m.CronExpression); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBackupScheduleRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBackupScheduleRequest) validateRetentionDays(formats strfmt.Registry) error {

	if err := validate.Required("retentionDays", "body", m.RetentionDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("retentionDays", "body", *m.RetentionDays, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBackupScheduleRequest) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http create backup schedule request based on context it is used
func (m *HTTPCreateBackupScheduleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBackupScheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBackupScheduleRequest) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBackupScheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
