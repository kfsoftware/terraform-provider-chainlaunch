// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProKeyShareRequest pro key share request
//
// swagger:model pro.KeyShareRequest
type ProKeyShareRequest struct {

	// expires at
	ExpiresAt string `json:"expires_at,omitempty"`

	// key id
	// Required: true
	KeyID *int64 `json:"key_id"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// peer id
	// Required: true
	PeerID *int64 `json:"peer_id"`
}

// Validate validates this pro key share request
func (m *ProKeyShareRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProKeyShareRequest) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("key_id", "body", m.KeyID); err != nil {
		return err
	}

	return nil
}

func (m *ProKeyShareRequest) validatePeerID(formats strfmt.Registry) error {

	if err := validate.Required("peer_id", "body", m.PeerID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pro key share request based on context it is used
func (m *ProKeyShareRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProKeyShareRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProKeyShareRequest) UnmarshalBinary(b []byte) error {
	var res ProKeyShareRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
