// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPConfigUpdateOperationRequest A single configuration update operation
//
// swagger:model http.ConfigUpdateOperationRequest
type HTTPConfigUpdateOperationRequest struct {

	// Payload contains the operation-specific data
	// The structure depends on the operation type:
	// - add_org: AddOrgPayload
	// - remove_org: RemoveOrgPayload
	// - update_org_msp: UpdateOrgMSPPayload
	// - set_anchor_peers: SetAnchorPeersPayload
	// - add_consenter: AddConsenterPayload
	// - remove_consenter: RemoveConsenterPayload
	// - update_consenter: UpdateConsenterPayload
	// - update_etcd_raft_options: UpdateEtcdRaftOptionsPayload
	// - update_batch_size: UpdateBatchSizePayload
	// - update_batch_timeout: UpdateBatchTimeoutPayload
	// - update_application_policy: UpdateApplicationPolicyPayload
	// - update_orderer_policy: UpdateOrdererPolicyPayload
	// - update_channel_policy: UpdateChannelPolicyPayload
	// - update_channel_capability: UpdateChannelCapabilityOperation
	// - update_orderer_capability: UpdateOrdererCapabilityOperation
	// - update_application_capability: UpdateApplicationCapabilityOperation
	// @Description The payload for the configuration update operation
	// @Description Can be one of:
	// @Description - AddOrgPayload when type is "add_org"
	// @Description - RemoveOrgPayload when type is "remove_org"
	// @Description - UpdateOrgMSPPayload when type is "update_org_msp"
	// @Description - SetAnchorPeersPayload when type is "set_anchor_peers"
	// @Description - AddConsenterPayload when type is "add_consenter"
	// @Description - RemoveConsenterPayload when type is "remove_consenter"
	// @Description - UpdateConsenterPayload when type is "update_consenter"
	// @Description - UpdateEtcdRaftOptionsPayload when type is "update_etcd_raft_options"
	// @Description - UpdateBatchSizePayload when type is "update_batch_size"
	// @Description - UpdateBatchTimeoutPayload when type is "update_batch_timeout"
	// @Description - UpdateApplicationPolicyPayload when type is "update_application_policy"
	// @Description - UpdateOrdererPolicyPayload when type is "update_orderer_policy"
	// @Description - UpdateChannelPolicyPayload when type is "update_channel_policy"
	// @Description - UpdateChannelCapabilityPayload when type is "update_channel_capability"
	// @Description - UpdateOrdererCapabilityPayload when type is "update_orderer_capability"
	// @Description - UpdateApplicationCapabilityPayload when type is "update_application_capability"
	// @Description - AddOrdererOrgPayload when type is "add_orderer_org"
	// @Description - RemoveOrdererOrgPayload when type is "remove_orderer_org"
	// @Description - UpdateOrdererOrgMSPPayload when type is "update_orderer_org_msp"
	// @Description - UpdateApplicationACLPayload when type is "update_application_acl"
	// Required: true
	Payload []int64 `json:"payload"`

	// Type is the type of configuration update operation
	// enum: add_org,remove_org,update_org_msp,set_anchor_peers,add_consenter,remove_consenter,update_consenter,update_etcd_raft_options,update_batch_size,update_batch_timeout,update_application_policy,update_orderer_policy,update_channel_policy,update_channel_capability,update_orderer_capability,update_application_capability,add_orderer_org,remove_orderer_org,update_orderer_org_msp,update_application_acl
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this http config update operation request
func (m *HTTPConfigUpdateOperationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPConfigUpdateOperationRequest) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

func (m *HTTPConfigUpdateOperationRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http config update operation request based on context it is used
func (m *HTTPConfigUpdateOperationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPConfigUpdateOperationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPConfigUpdateOperationRequest) UnmarshalBinary(b []byte) error {
	var res HTTPConfigUpdateOperationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
