// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProChaincodeProposal pro chaincode proposal
//
// swagger:model pro.ChaincodeProposal
type ProChaincodeProposal struct {

	// chaincode address
	ChaincodeAddress string `json:"chaincodeAddress,omitempty"`

	// Unique slug
	ChaincodeDefID string `json:"chaincodeDefId,omitempty"`

	// channel name
	ChannelName string `json:"channelName,omitempty"`

	// ID of the connection used for this share
	ConnectionID int64 `json:"connectionId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// docker image
	DockerImage string `json:"dockerImage,omitempty"`

	// endorsement policy
	EndorsementPolicy string `json:"endorsementPolicy,omitempty"`

	// DB PK
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// network Id
	NetworkID int64 `json:"networkId,omitempty"`

	// sequence
	Sequence int64 `json:"sequence,omitempty"`

	// Node ID and text of who shared this
	SharedBy string `json:"sharedBy,omitempty"`

	// Node ID of who shared this
	SharedByNodeID string `json:"sharedByNodeId,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this pro chaincode proposal
func (m *ProChaincodeProposal) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pro chaincode proposal based on context it is used
func (m *ProChaincodeProposal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProChaincodeProposal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProChaincodeProposal) UnmarshalBinary(b []byte) error {
	var res ProChaincodeProposal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
