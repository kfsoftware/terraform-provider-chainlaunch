// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCreateBesuNetworkRequest Request body for creating a new Besu network
//
// swagger:model http.CreateBesuNetworkRequest
type HTTPCreateBesuNetworkRequest struct {

	// config
	// Required: true
	Config *HTTPCreateBesuNetworkRequestConfig `json:"config"`

	// @Description Optional description of the network
	Description string `json:"description,omitempty"`

	// @Description Name of the network
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this http create besu network request
func (m *HTTPCreateBesuNetworkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequest) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this http create besu network request based on the context it is used
func (m *HTTPCreateBesuNetworkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequest) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBesuNetworkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCreateBesuNetworkRequestConfig @Description Network configuration
//
// swagger:model HTTPCreateBesuNetworkRequestConfig
type HTTPCreateBesuNetworkRequestConfig struct {

	// @Description Optional initial account balances
	Alloc map[string]HTTPCreateBesuNetworkRequestConfigAllocAnon `json:"alloc,omitempty"`

	// @Description Block period in seconds
	// @Default 5
	// @Required
	// Example: 5
	// Required: true
	BlockPeriod *int64 `json:"blockPeriod"`

	// @Description Chain ID for the network
	// @Default 1337
	// @Required
	// Example: 1337
	// Required: true
	ChainID *int64 `json:"chainId"`

	// @Description Optional coinbase address
	Coinbase string `json:"coinbase,omitempty"`

	// @Description Consensus algorithm (e.g. "qbft")
	// @Required
	// Required: true
	Consensus *string `json:"consensus"`

	// @Description Optional difficulty value
	Difficulty string `json:"difficulty,omitempty"`

	// @Description Epoch length in blocks
	// @Default 30000
	// @Required
	// Example: 30000
	// Required: true
	EpochLength *int64 `json:"epochLength"`

	// @Description Optional list of external validator keys (shared/received from other peers)
	ExternalValidatorKeys []*HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0 `json:"externalValidatorKeys"`

	// @Description Optional gas limit value
	GasLimit string `json:"gasLimit,omitempty"`

	// @Description List of initial validator key IDs
	// @Required
	// @MinItems 1
	// Required: true
	// Min Items: 1
	InitialValidatorsKeyIds []int64 `json:"initialValidatorsKeyIds"`

	// @Description Optional mix hash value
	MixHash string `json:"mixHash,omitempty"`

	// @Description Optional nonce value
	Nonce string `json:"nonce,omitempty"`

	// @Description Request timeout in seconds
	// @Required
	// Required: true
	RequestTimeout *int64 `json:"requestTimeout"`

	// @Description Optional timestamp value
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this HTTP create besu network request config
func (m *HTTPCreateBesuNetworkRequestConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlloc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEpochLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalValidatorKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialValidatorsKeyIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateAlloc(formats strfmt.Registry) error {
	if swag.IsZero(m.Alloc) { // not required
		return nil
	}

	for k := range m.Alloc {

		if swag.IsZero(m.Alloc[k]) { // not required
			continue
		}
		if val, ok := m.Alloc[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("config" + "." + "alloc" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("config" + "." + "alloc" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateBlockPeriod(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"blockPeriod", "body", m.BlockPeriod); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"chainId", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateConsensus(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"consensus", "body", m.Consensus); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateEpochLength(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"epochLength", "body", m.EpochLength); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateExternalValidatorKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalValidatorKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalValidatorKeys); i++ {
		if swag.IsZero(m.ExternalValidatorKeys[i]) { // not required
			continue
		}

		if m.ExternalValidatorKeys[i] != nil {
			if err := m.ExternalValidatorKeys[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("config" + "." + "externalValidatorKeys" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("config" + "." + "externalValidatorKeys" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateInitialValidatorsKeyIds(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"initialValidatorsKeyIds", "body", m.InitialValidatorsKeyIds); err != nil {
		return err
	}

	iInitialValidatorsKeyIdsSize := int64(len(m.InitialValidatorsKeyIds))

	if err := validate.MinItems("config"+"."+"initialValidatorsKeyIds", "body", iInitialValidatorsKeyIdsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) validateRequestTimeout(formats strfmt.Registry) error {

	if err := validate.Required("config"+"."+"requestTimeout", "body", m.RequestTimeout); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this HTTP create besu network request config based on the context it is used
func (m *HTTPCreateBesuNetworkRequestConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlloc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalValidatorKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) contextValidateAlloc(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Alloc {

		if val, ok := m.Alloc[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfig) contextValidateExternalValidatorKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalValidatorKeys); i++ {

		if m.ExternalValidatorKeys[i] != nil {

			if swag.IsZero(m.ExternalValidatorKeys[i]) { // not required
				return nil
			}

			if err := m.ExternalValidatorKeys[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("config" + "." + "externalValidatorKeys" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("config" + "." + "externalValidatorKeys" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfig) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBesuNetworkRequestConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCreateBesuNetworkRequestConfigAllocAnon HTTP create besu network request config alloc anon
//
// swagger:model HTTPCreateBesuNetworkRequestConfigAllocAnon
type HTTPCreateBesuNetworkRequestConfigAllocAnon struct {

	// @Description Initial balance for the account in hex format (e.g. "0x100000000000000000000000000000000000000000000000000000000000000")
	// Required: true
	Balance *string `json:"balance"`
}

// Validate validates this HTTP create besu network request config alloc anon
func (m *HTTPCreateBesuNetworkRequestConfigAllocAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfigAllocAnon) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this HTTP create besu network request config alloc anon based on context it is used
func (m *HTTPCreateBesuNetworkRequestConfigAllocAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfigAllocAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfigAllocAnon) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBesuNetworkRequestConfigAllocAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0 HTTP create besu network request config external validator keys items0
//
// swagger:model HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0
type HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0 struct {

	// @Description Ethereum address derived from the public key
	// Required: true
	EthereumAddress *string `json:"ethereumAddress"`

	// @Description Public key data
	// Required: true
	PublicKey *string `json:"publicKey"`
}

// Validate validates this HTTP create besu network request config external validator keys items0
func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthereumAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) validateEthereumAddress(formats strfmt.Registry) error {

	if err := validate.Required("ethereumAddress", "body", m.EthereumAddress); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this HTTP create besu network request config external validator keys items0 based on context it is used
func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCreateBesuNetworkRequestConfigExternalValidatorKeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
