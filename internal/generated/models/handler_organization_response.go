// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HandlerOrganizationResponse handler organization response
//
// swagger:model handler.OrganizationResponse
type HandlerOrganizationResponse struct {

	// admin sign key Id
	AdminSignKeyID int64 `json:"adminSignKeyId,omitempty"`

	// admin Tls key Id
	AdminTLSKeyID int64 `json:"adminTlsKeyId,omitempty"`

	// client sign key Id
	ClientSignKeyID int64 `json:"clientSignKeyId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// msp Id
	MspID string `json:"mspId,omitempty"`

	// provider Id
	ProviderID int64 `json:"providerId,omitempty"`

	// provider name
	ProviderName string `json:"providerName,omitempty"`

	// sign certificate
	SignCertificate string `json:"signCertificate,omitempty"`

	// sign public key
	SignPublicKey string `json:"signPublicKey,omitempty"`

	// tls certificate
	TLSCertificate string `json:"tlsCertificate,omitempty"`

	// tls public key
	TLSPublicKey string `json:"tlsPublicKey,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this handler organization response
func (m *HandlerOrganizationResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this handler organization response based on context it is used
func (m *HandlerOrganizationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerOrganizationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerOrganizationResponse) UnmarshalBinary(b []byte) error {
	var res HandlerOrganizationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
