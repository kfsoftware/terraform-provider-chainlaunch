// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerSignCertificateHandlerRequest handler sign certificate handler request
//
// swagger:model handler.SignCertificateHandlerRequest
type HandlerSignCertificateHandlerRequest struct {

	// ca key Id
	// Example: 1
	// Required: true
	// Minimum: 1
	CaKeyID *int64 `json:"caKeyId"`

	// certificate
	// Required: true
	Certificate *HandlerCertificateSigningRequest `json:"certificate"`
}

// Validate validates this handler sign certificate handler request
func (m *HandlerSignCertificateHandlerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerSignCertificateHandlerRequest) validateCaKeyID(formats strfmt.Registry) error {

	if err := validate.Required("caKeyId", "body", m.CaKeyID); err != nil {
		return err
	}

	if err := validate.MinimumInt("caKeyId", "body", *m.CaKeyID, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HandlerSignCertificateHandlerRequest) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("certificate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("certificate")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this handler sign certificate handler request based on the context it is used
func (m *HandlerSignCertificateHandlerRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerSignCertificateHandlerRequest) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("certificate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("certificate")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerSignCertificateHandlerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerSignCertificateHandlerRequest) UnmarshalBinary(b []byte) error {
	var res HandlerSignCertificateHandlerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
