// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCronPreviewRequest Request body for previewing cron schedule execution times
//
// swagger:model http.CronPreviewRequest
type HTTPCronPreviewRequest struct {

	// Number of next executions to return (default: 5, max: 10)
	// @Example 5
	Count int64 `json:"count,omitempty"`

	// Cron expression to preview
	// @Example "0 */6 * * *"
	// Required: true
	CronExpression *string `json:"cronExpression"`
}

// Validate validates this http cron preview request
func (m *HTTPCronPreviewRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCronExpression(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCronPreviewRequest) validateCronExpression(formats strfmt.Registry) error {

	if err := validate.Required("cronExpression", "body", m.CronExpression); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http cron preview request based on context it is used
func (m *HTTPCronPreviewRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCronPreviewRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCronPreviewRequest) UnmarshalBinary(b []byte) error {
	var res HTTPCronPreviewRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
