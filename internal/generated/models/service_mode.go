// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceMode service mode
//
// swagger:model service.Mode
type ServiceMode string

func NewServiceMode(value ServiceMode) *ServiceMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServiceMode.
func (m ServiceMode) Pointer() *ServiceMode {
	return &m
}

const (

	// ServiceModeService captures enum value "service"
	ServiceModeService ServiceMode = "service"

	// ServiceModeDocker captures enum value "docker"
	ServiceModeDocker ServiceMode = "docker"
)

// for schema
var serviceModeEnum []any

func init() {
	var res []ServiceMode
	if err := json.Unmarshal([]byte(`["service","docker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceModeEnum = append(serviceModeEnum, v)
	}
}

func (m ServiceMode) validateServiceModeEnum(path, location string, value ServiceMode) error {
	if err := validate.EnumCase(path, location, value, serviceModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service mode
func (m ServiceMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service mode based on context it is used
func (m ServiceMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
