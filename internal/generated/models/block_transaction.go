// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BlockTransaction block transaction
//
// swagger:model block.Transaction
type BlockTransaction struct {

	// chaincode Id
	ChaincodeID string `json:"chaincodeId,omitempty"`

	// channel Id
	ChannelID string `json:"channelId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// event
	Event *BlockTransactionEvent `json:"event,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// reads
	Reads []*BlockTransactionRead `json:"reads"`

	// request
	Request []int64 `json:"request"`

	// response
	Response []int64 `json:"response"`

	// type
	Type BlockTxType `json:"type,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// writes
	Writes []*BlockTransactionWrite `json:"writes"`
}

// Validate validates this block transaction
func (m *BlockTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReads(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWrites(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockTransaction) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("event")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("event")
			}

			return err
		}
	}

	return nil
}

func (m *BlockTransaction) validateReads(formats strfmt.Registry) error {
	if swag.IsZero(m.Reads) { // not required
		return nil
	}

	for i := 0; i < len(m.Reads); i++ {
		if swag.IsZero(m.Reads[i]) { // not required
			continue
		}

		if m.Reads[i] != nil {
			if err := m.Reads[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("reads" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("reads" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlockTransaction) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

func (m *BlockTransaction) validateWrites(formats strfmt.Registry) error {
	if swag.IsZero(m.Writes) { // not required
		return nil
	}

	for i := 0; i < len(m.Writes); i++ {
		if swag.IsZero(m.Writes[i]) { // not required
			continue
		}

		if m.Writes[i] != nil {
			if err := m.Writes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("writes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("writes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this block transaction based on the context it is used
func (m *BlockTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWrites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockTransaction) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.Event != nil {

		if swag.IsZero(m.Event) { // not required
			return nil
		}

		if err := m.Event.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("event")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("event")
			}

			return err
		}
	}

	return nil
}

func (m *BlockTransaction) contextValidateReads(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reads); i++ {

		if m.Reads[i] != nil {

			if swag.IsZero(m.Reads[i]) { // not required
				return nil
			}

			if err := m.Reads[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("reads" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("reads" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *BlockTransaction) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("type")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("type")
		}

		return err
	}

	return nil
}

func (m *BlockTransaction) contextValidateWrites(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Writes); i++ {

		if m.Writes[i] != nil {

			if swag.IsZero(m.Writes[i]) { // not required
				return nil
			}

			if err := m.Writes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("writes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("writes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockTransaction) UnmarshalBinary(b []byte) error {
	var res BlockTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
