// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProjectsProject projects project
//
// swagger:model projects.Project
type ProjectsProject struct {

	// boilerplate
	// Example: go-basic
	Boilerplate string `json:"boilerplate,omitempty"`

	// container port
	ContainerPort int64 `json:"containerPort,omitempty"`

	// description
	// Example: A sample project
	Description string `json:"description,omitempty"`

	// endorsement policy
	// Example: OR('Org1MSP.member','Org2MSP.member')
	EndorsementPolicy string `json:"endorsementPolicy,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// last started at
	LastStartedAt string `json:"lastStartedAt,omitempty"`

	// last stopped at
	LastStoppedAt string `json:"lastStoppedAt,omitempty"`

	// name
	// Example: myproject
	Name string `json:"name,omitempty"`

	// network Id
	NetworkID int64 `json:"networkId,omitempty"`

	// network name
	NetworkName string `json:"networkName,omitempty"`

	// network platform
	NetworkPlatform string `json:"networkPlatform,omitempty"`

	// slug
	// Example: myproject-abc12
	Slug string `json:"slug,omitempty"`

	// status
	// Example: running
	Status string `json:"status,omitempty"`
}

// Validate validates this projects project
func (m *ProjectsProject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this projects project based on context it is used
func (m *ProjectsProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectsProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectsProject) UnmarshalBinary(b []byte) error {
	var res ProjectsProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
