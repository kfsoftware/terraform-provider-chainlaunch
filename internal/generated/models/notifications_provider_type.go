// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NotificationsProviderType notifications provider type
//
// swagger:model notifications.ProviderType
type NotificationsProviderType string

func NewNotificationsProviderType(value NotificationsProviderType) *NotificationsProviderType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NotificationsProviderType.
func (m NotificationsProviderType) Pointer() *NotificationsProviderType {
	return &m
}

const (

	// NotificationsProviderTypeSMTP captures enum value "SMTP"
	NotificationsProviderTypeSMTP NotificationsProviderType = "SMTP"
)

// for schema
var notificationsProviderTypeEnum []any

func init() {
	var res []NotificationsProviderType
	if err := json.Unmarshal([]byte(`["SMTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationsProviderTypeEnum = append(notificationsProviderTypeEnum, v)
	}
}

func (m NotificationsProviderType) validateNotificationsProviderTypeEnum(path, location string, value NotificationsProviderType) error {
	if err := validate.EnumCase(path, location, value, notificationsProviderTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this notifications provider type
func (m NotificationsProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNotificationsProviderTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this notifications provider type based on context it is used
func (m NotificationsProviderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
