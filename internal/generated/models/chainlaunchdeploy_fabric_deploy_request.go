// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChainlaunchdeployFabricDeployRequest chainlaunchdeploy fabric deploy request
//
// swagger:model chainlaunchdeploy.FabricDeployRequest
type ChainlaunchdeployFabricDeployRequest struct {

	// approve params
	ApproveParams *ChainlaunchdeployFabricChaincodeApproveParams `json:"approveParams,omitempty"`

	// commit params
	CommitParams *ChainlaunchdeployFabricChaincodeCommitParams `json:"commitParams,omitempty"`

	// install params
	InstallParams *ChainlaunchdeployFabricChaincodeInstallParams `json:"installParams,omitempty"`
}

// Validate validates this chainlaunchdeploy fabric deploy request
func (m *ChainlaunchdeployFabricDeployRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproveParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) validateApproveParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ApproveParams) { // not required
		return nil
	}

	if m.ApproveParams != nil {
		if err := m.ApproveParams.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("approveParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("approveParams")
			}

			return err
		}
	}

	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) validateCommitParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitParams) { // not required
		return nil
	}

	if m.CommitParams != nil {
		if err := m.CommitParams.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("commitParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("commitParams")
			}

			return err
		}
	}

	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) validateInstallParams(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallParams) { // not required
		return nil
	}

	if m.InstallParams != nil {
		if err := m.InstallParams.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("installParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("installParams")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this chainlaunchdeploy fabric deploy request based on the context it is used
func (m *ChainlaunchdeployFabricDeployRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApproveParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) contextValidateApproveParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ApproveParams != nil {

		if swag.IsZero(m.ApproveParams) { // not required
			return nil
		}

		if err := m.ApproveParams.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("approveParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("approveParams")
			}

			return err
		}
	}

	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) contextValidateCommitParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CommitParams != nil {

		if swag.IsZero(m.CommitParams) { // not required
			return nil
		}

		if err := m.CommitParams.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("commitParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("commitParams")
			}

			return err
		}
	}

	return nil
}

func (m *ChainlaunchdeployFabricDeployRequest) contextValidateInstallParams(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallParams != nil {

		if swag.IsZero(m.InstallParams) { // not required
			return nil
		}

		if err := m.InstallParams.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("installParams")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("installParams")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChainlaunchdeployFabricDeployRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChainlaunchdeployFabricDeployRequest) UnmarshalBinary(b []byte) error {
	var res ChainlaunchdeployFabricDeployRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
