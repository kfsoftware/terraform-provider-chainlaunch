// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplatesCreateTemplateRequest templates create template request
//
// swagger:model templates.CreateTemplateRequest
type TemplatesCreateTemplateRequest struct {

	// config
	// Required: true
	Config TemplatesTemplateConfig `json:"config"`

	// description
	// Max Length: 500
	Description string `json:"description,omitempty"`

	// is default
	IsDefault bool `json:"is_default,omitempty"`

	// name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`

	// node type
	// Required: true
	NodeType *TemplatesNodeType `json:"node_type"`

	// platform
	// Required: true
	Platform *TemplatesPlatform `json:"platform"`

	// tags
	Tags []string `json:"tags"`

	// variables
	Variables []*TemplatesTemplateVariable `json:"variables"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this templates create template request
func (m *TemplatesCreateTemplateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplatesCreateTemplateRequest) validateConfig(formats strfmt.Registry) error {

	if m.Config == nil {
		return errors.Required("config", "body", nil)
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 500); err != nil {
		return err
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validateNodeType(formats strfmt.Registry) error {

	if err := validate.Required("node_type", "body", m.NodeType); err != nil {
		return err
	}

	if err := validate.Required("node_type", "body", m.NodeType); err != nil {
		return err
	}

	if m.NodeType != nil {
		if err := m.NodeType.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("node_type")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("node_type")
			}

			return err
		}
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	if m.Platform != nil {
		if err := m.Platform.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("platform")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("platform")
			}

			return err
		}
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validateVariables(formats strfmt.Registry) error {
	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	for i := 0; i < len(m.Variables); i++ {
		if swag.IsZero(m.Variables[i]) { // not required
			continue
		}

		if m.Variables[i] != nil {
			if err := m.Variables[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this templates create template request based on the context it is used
func (m *TemplatesCreateTemplateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVariables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplatesCreateTemplateRequest) contextValidateNodeType(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeType != nil {

		if err := m.NodeType.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("node_type")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("node_type")
			}

			return err
		}
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) contextValidatePlatform(ctx context.Context, formats strfmt.Registry) error {

	if m.Platform != nil {

		if err := m.Platform.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("platform")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("platform")
			}

			return err
		}
	}

	return nil
}

func (m *TemplatesCreateTemplateRequest) contextValidateVariables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Variables); i++ {

		if m.Variables[i] != nil {

			if swag.IsZero(m.Variables[i]) { // not required
				return nil
			}

			if err := m.Variables[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("variables" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("variables" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplatesCreateTemplateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplatesCreateTemplateRequest) UnmarshalBinary(b []byte) error {
	var res TemplatesCreateTemplateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
