// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPFabricNetworkConfig http fabric network config
//
// swagger:model http.FabricNetworkConfig
type HTTPFabricNetworkConfig struct {

	// application capabilities
	ApplicationCapabilities []string `json:"applicationCapabilities"`

	// Optional policies
	ApplicationPolicies map[string]HTTPFabricPolicy `json:"applicationPolicies,omitempty"`

	// Batch configuration
	BatchSize struct {
		HTTPBatchSize
	} `json:"batchSize,omitempty"`

	// e.g., "2s"
	BatchTimeout string `json:"batchTimeout,omitempty"`

	// Capabilities configuration
	ChannelCapabilities []string `json:"channelCapabilities"`

	// channel policies
	ChannelPolicies map[string]HTTPFabricPolicy `json:"channelPolicies,omitempty"`

	// Consensus configuration
	ConsensusType string `json:"consensusType,omitempty"`

	// etcd raft options
	EtcdRaftOptions *HTTPEtcdRaftOptions `json:"etcdRaftOptions,omitempty"`

	// external orderer orgs
	ExternalOrdererOrgs []*HTTPExternalOrgConfig `json:"externalOrdererOrgs"`

	// external peer orgs
	ExternalPeerOrgs []*HTTPExternalOrgConfig `json:"externalPeerOrgs"`

	// orderer capabilities
	OrdererCapabilities []string `json:"ordererCapabilities"`

	// orderer organizations
	OrdererOrganizations []*HTTPOrganizationConfig `json:"ordererOrganizations"`

	// orderer policies
	OrdererPolicies map[string]HTTPFabricPolicy `json:"ordererPolicies,omitempty"`

	// peer organizations
	PeerOrganizations []*HTTPOrganizationConfig `json:"peerOrganizations"`

	// smart b f t consenters
	SmartBFTConsenters []*HTTPSmartBFTConsenter `json:"smartBFTConsenters"`

	// smart b f t options
	SmartBFTOptions *HTTPSmartBFTOptions `json:"smartBFTOptions,omitempty"`
}

// Validate validates this http fabric network config
func (m *HTTPFabricNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBatchSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtcdRaftOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalOrdererOrgs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalPeerOrgs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdererOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdererPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerOrganizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartBFTConsenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartBFTOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPFabricNetworkConfig) validateApplicationPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationPolicies) { // not required
		return nil
	}

	for k := range m.ApplicationPolicies {

		if err := validate.Required("applicationPolicies"+"."+k, "body", m.ApplicationPolicies[k]); err != nil {
			return err
		}
		if val, ok := m.ApplicationPolicies[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("applicationPolicies" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("applicationPolicies" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateBatchSize(formats strfmt.Registry) error {
	if swag.IsZero(m.BatchSize) { // not required
		return nil
	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateChannelPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelPolicies) { // not required
		return nil
	}

	for k := range m.ChannelPolicies {

		if err := validate.Required("channelPolicies"+"."+k, "body", m.ChannelPolicies[k]); err != nil {
			return err
		}
		if val, ok := m.ChannelPolicies[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("channelPolicies" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("channelPolicies" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateEtcdRaftOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.EtcdRaftOptions) { // not required
		return nil
	}

	if m.EtcdRaftOptions != nil {
		if err := m.EtcdRaftOptions.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("etcdRaftOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("etcdRaftOptions")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateExternalOrdererOrgs(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalOrdererOrgs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalOrdererOrgs); i++ {
		if swag.IsZero(m.ExternalOrdererOrgs[i]) { // not required
			continue
		}

		if m.ExternalOrdererOrgs[i] != nil {
			if err := m.ExternalOrdererOrgs[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("externalOrdererOrgs" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("externalOrdererOrgs" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateExternalPeerOrgs(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalPeerOrgs) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalPeerOrgs); i++ {
		if swag.IsZero(m.ExternalPeerOrgs[i]) { // not required
			continue
		}

		if m.ExternalPeerOrgs[i] != nil {
			if err := m.ExternalPeerOrgs[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("externalPeerOrgs" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("externalPeerOrgs" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateOrdererOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdererOrganizations) { // not required
		return nil
	}

	for i := 0; i < len(m.OrdererOrganizations); i++ {
		if swag.IsZero(m.OrdererOrganizations[i]) { // not required
			continue
		}

		if m.OrdererOrganizations[i] != nil {
			if err := m.OrdererOrganizations[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ordererOrganizations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ordererOrganizations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateOrdererPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdererPolicies) { // not required
		return nil
	}

	for k := range m.OrdererPolicies {

		if err := validate.Required("ordererPolicies"+"."+k, "body", m.OrdererPolicies[k]); err != nil {
			return err
		}
		if val, ok := m.OrdererPolicies[k]; ok {
			if err := val.Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ordererPolicies" + "." + k)
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ordererPolicies" + "." + k)
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validatePeerOrganizations(formats strfmt.Registry) error {
	if swag.IsZero(m.PeerOrganizations) { // not required
		return nil
	}

	for i := 0; i < len(m.PeerOrganizations); i++ {
		if swag.IsZero(m.PeerOrganizations[i]) { // not required
			continue
		}

		if m.PeerOrganizations[i] != nil {
			if err := m.PeerOrganizations[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("peerOrganizations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("peerOrganizations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateSmartBFTConsenters(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartBFTConsenters) { // not required
		return nil
	}

	for i := 0; i < len(m.SmartBFTConsenters); i++ {
		if swag.IsZero(m.SmartBFTConsenters[i]) { // not required
			continue
		}

		if m.SmartBFTConsenters[i] != nil {
			if err := m.SmartBFTConsenters[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("smartBFTConsenters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("smartBFTConsenters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) validateSmartBFTOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartBFTOptions) { // not required
		return nil
	}

	if m.SmartBFTOptions != nil {
		if err := m.SmartBFTOptions.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("smartBFTOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("smartBFTOptions")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this http fabric network config based on the context it is used
func (m *HTTPFabricNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBatchSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannelPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtcdRaftOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalOrdererOrgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalPeerOrgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdererOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdererPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeerOrganizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmartBFTConsenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmartBFTOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateApplicationPolicies(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ApplicationPolicies {

		if val, ok := m.ApplicationPolicies[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateBatchSize(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateChannelPolicies(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ChannelPolicies {

		if val, ok := m.ChannelPolicies[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateEtcdRaftOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.EtcdRaftOptions != nil {

		if swag.IsZero(m.EtcdRaftOptions) { // not required
			return nil
		}

		if err := m.EtcdRaftOptions.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("etcdRaftOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("etcdRaftOptions")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateExternalOrdererOrgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalOrdererOrgs); i++ {

		if m.ExternalOrdererOrgs[i] != nil {

			if swag.IsZero(m.ExternalOrdererOrgs[i]) { // not required
				return nil
			}

			if err := m.ExternalOrdererOrgs[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("externalOrdererOrgs" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("externalOrdererOrgs" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateExternalPeerOrgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalPeerOrgs); i++ {

		if m.ExternalPeerOrgs[i] != nil {

			if swag.IsZero(m.ExternalPeerOrgs[i]) { // not required
				return nil
			}

			if err := m.ExternalPeerOrgs[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("externalPeerOrgs" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("externalPeerOrgs" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateOrdererOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrdererOrganizations); i++ {

		if m.OrdererOrganizations[i] != nil {

			if swag.IsZero(m.OrdererOrganizations[i]) { // not required
				return nil
			}

			if err := m.OrdererOrganizations[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("ordererOrganizations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("ordererOrganizations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateOrdererPolicies(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.OrdererPolicies {

		if val, ok := m.OrdererPolicies[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidatePeerOrganizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PeerOrganizations); i++ {

		if m.PeerOrganizations[i] != nil {

			if swag.IsZero(m.PeerOrganizations[i]) { // not required
				return nil
			}

			if err := m.PeerOrganizations[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("peerOrganizations" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("peerOrganizations" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateSmartBFTConsenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SmartBFTConsenters); i++ {

		if m.SmartBFTConsenters[i] != nil {

			if swag.IsZero(m.SmartBFTConsenters[i]) { // not required
				return nil
			}

			if err := m.SmartBFTConsenters[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("smartBFTConsenters" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("smartBFTConsenters" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPFabricNetworkConfig) contextValidateSmartBFTOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.SmartBFTOptions != nil {

		if swag.IsZero(m.SmartBFTOptions) { // not required
			return nil
		}

		if err := m.SmartBFTOptions.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("smartBFTOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("smartBFTOptions")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPFabricNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPFabricNetworkConfig) UnmarshalBinary(b []byte) error {
	var res HTTPFabricNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
