// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateOrgMSPPayload http update org m s p payload
//
// swagger:model http.UpdateOrgMSPPayload
type HTTPUpdateOrgMSPPayload struct {

	// msp id
	// Required: true
	MspID *string `json:"msp_id"`

	// root certs
	// Required: true
	// Min Items: 1
	RootCerts []string `json:"root_certs"`

	// tls root certs
	// Required: true
	// Min Items: 1
	TLSRootCerts []string `json:"tls_root_certs"`
}

// Validate validates this http update org m s p payload
func (m *HTTPUpdateOrgMSPPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMspID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCerts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSRootCerts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateOrgMSPPayload) validateMspID(formats strfmt.Registry) error {

	if err := validate.Required("msp_id", "body", m.MspID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateOrgMSPPayload) validateRootCerts(formats strfmt.Registry) error {

	if err := validate.Required("root_certs", "body", m.RootCerts); err != nil {
		return err
	}

	iRootCertsSize := int64(len(m.RootCerts))

	if err := validate.MinItems("root_certs", "body", iRootCertsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateOrgMSPPayload) validateTLSRootCerts(formats strfmt.Registry) error {

	if err := validate.Required("tls_root_certs", "body", m.TLSRootCerts); err != nil {
		return err
	}

	iTLSRootCertsSize := int64(len(m.TLSRootCerts))

	if err := validate.MinItems("tls_root_certs", "body", iTLSRootCertsSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http update org m s p payload based on context it is used
func (m *HTTPUpdateOrgMSPPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateOrgMSPPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateOrgMSPPayload) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateOrgMSPPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
