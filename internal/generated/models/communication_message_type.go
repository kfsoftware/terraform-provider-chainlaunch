// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommunicationMessageType communication message type
//
// swagger:model communication.MessageType
type CommunicationMessageType string

func NewCommunicationMessageType(value CommunicationMessageType) *CommunicationMessageType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommunicationMessageType.
func (m CommunicationMessageType) Pointer() *CommunicationMessageType {
	return &m
}

const (

	// CommunicationMessageTypePING captures enum value "PING"
	CommunicationMessageTypePING CommunicationMessageType = "PING"

	// CommunicationMessageTypeSTATUSUPDATE captures enum value "STATUS_UPDATE"
	CommunicationMessageTypeSTATUSUPDATE CommunicationMessageType = "STATUS_UPDATE"

	// CommunicationMessageTypeDATAEXCHANGE captures enum value "DATA_EXCHANGE"
	CommunicationMessageTypeDATAEXCHANGE CommunicationMessageType = "DATA_EXCHANGE"
)

// for schema
var communicationMessageTypeEnum []any

func init() {
	var res []CommunicationMessageType
	if err := json.Unmarshal([]byte(`["PING","STATUS_UPDATE","DATA_EXCHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		communicationMessageTypeEnum = append(communicationMessageTypeEnum, v)
	}
}

func (m CommunicationMessageType) validateCommunicationMessageTypeEnum(path, location string, value CommunicationMessageType) error {
	if err := validate.EnumCase(path, location, value, communicationMessageTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this communication message type
func (m CommunicationMessageType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommunicationMessageTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this communication message type based on context it is used
func (m CommunicationMessageType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
