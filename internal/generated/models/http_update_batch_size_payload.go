// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateBatchSizePayload http update batch size payload
//
// swagger:model http.UpdateBatchSizePayload
type HTTPUpdateBatchSizePayload struct {

	// absolute max bytes
	// Required: true
	// Minimum: 1
	AbsoluteMaxBytes *int64 `json:"absolute_max_bytes"`

	// max message count
	// Required: true
	// Minimum: 1
	MaxMessageCount *int64 `json:"max_message_count"`

	// preferred max bytes
	// Required: true
	// Minimum: 1
	PreferredMaxBytes *int64 `json:"preferred_max_bytes"`
}

// Validate validates this http update batch size payload
func (m *HTTPUpdateBatchSizePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbsoluteMaxBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMessageCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredMaxBytes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateBatchSizePayload) validateAbsoluteMaxBytes(formats strfmt.Registry) error {

	if err := validate.Required("absolute_max_bytes", "body", m.AbsoluteMaxBytes); err != nil {
		return err
	}

	if err := validate.MinimumInt("absolute_max_bytes", "body", *m.AbsoluteMaxBytes, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBatchSizePayload) validateMaxMessageCount(formats strfmt.Registry) error {

	if err := validate.Required("max_message_count", "body", m.MaxMessageCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("max_message_count", "body", *m.MaxMessageCount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateBatchSizePayload) validatePreferredMaxBytes(formats strfmt.Registry) error {

	if err := validate.Required("preferred_max_bytes", "body", m.PreferredMaxBytes); err != nil {
		return err
	}

	if err := validate.MinimumInt("preferred_max_bytes", "body", *m.PreferredMaxBytes, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http update batch size payload based on context it is used
func (m *HTTPUpdateBatchSizePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateBatchSizePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateBatchSizePayload) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateBatchSizePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
