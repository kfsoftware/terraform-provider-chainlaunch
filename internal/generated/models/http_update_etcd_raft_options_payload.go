// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateEtcdRaftOptionsPayload http update etcd raft options payload
//
// swagger:model http.UpdateEtcdRaftOptionsPayload
type HTTPUpdateEtcdRaftOptionsPayload struct {

	// election tick
	// Required: true
	// Minimum: 1
	ElectionTick *int64 `json:"election_tick"`

	// heartbeat tick
	// Required: true
	// Minimum: 1
	HeartbeatTick *int64 `json:"heartbeat_tick"`

	// max inflight blocks
	// Required: true
	// Minimum: 1
	MaxInflightBlocks *int64 `json:"max_inflight_blocks"`

	// snapshot interval size
	// Required: true
	// Minimum: 1
	SnapshotIntervalSize *int64 `json:"snapshot_interval_size"`

	// tick interval
	// Required: true
	TickInterval *string `json:"tick_interval"`
}

// Validate validates this http update etcd raft options payload
func (m *HTTPUpdateEtcdRaftOptionsPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateElectionTick(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeartbeatTick(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxInflightBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotIntervalSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTickInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateEtcdRaftOptionsPayload) validateElectionTick(formats strfmt.Registry) error {

	if err := validate.Required("election_tick", "body", m.ElectionTick); err != nil {
		return err
	}

	if err := validate.MinimumInt("election_tick", "body", *m.ElectionTick, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateEtcdRaftOptionsPayload) validateHeartbeatTick(formats strfmt.Registry) error {

	if err := validate.Required("heartbeat_tick", "body", m.HeartbeatTick); err != nil {
		return err
	}

	if err := validate.MinimumInt("heartbeat_tick", "body", *m.HeartbeatTick, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateEtcdRaftOptionsPayload) validateMaxInflightBlocks(formats strfmt.Registry) error {

	if err := validate.Required("max_inflight_blocks", "body", m.MaxInflightBlocks); err != nil {
		return err
	}

	if err := validate.MinimumInt("max_inflight_blocks", "body", *m.MaxInflightBlocks, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateEtcdRaftOptionsPayload) validateSnapshotIntervalSize(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_interval_size", "body", m.SnapshotIntervalSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("snapshot_interval_size", "body", *m.SnapshotIntervalSize, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateEtcdRaftOptionsPayload) validateTickInterval(formats strfmt.Registry) error {

	if err := validate.Required("tick_interval", "body", m.TickInterval); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http update etcd raft options payload based on context it is used
func (m *HTTPUpdateEtcdRaftOptionsPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateEtcdRaftOptionsPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateEtcdRaftOptionsPayload) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateEtcdRaftOptionsPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
