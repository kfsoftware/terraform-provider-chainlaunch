// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerCreateOrganizationRequest handler create organization request
//
// swagger:model handler.CreateOrganizationRequest
type HandlerCreateOrganizationRequest struct {

	// Certificate validity configuration (Go duration format)
	CaCertValidFor string `json:"caCertValidFor,omitempty"`

	// Validity for admin/client/peer certificates (e.g., "8760h" for 1 year). Default: 8760h (1 year)
	CertValidFor string `json:"certValidFor,omitempty"`

	// CA certificate properties
	Country []string `json:"country"`

	// description
	Description string `json:"description,omitempty"`

	// locality
	Locality []string `json:"locality"`

	// msp Id
	// Required: true
	MspID *string `json:"mspId"`

	// name
	// Required: true
	Name *string `json:"name"`

	// postal code
	PostalCode []string `json:"postalCode"`

	// provider Id
	ProviderID int64 `json:"providerId,omitempty"`

	// province
	Province []string `json:"province"`

	// street address
	StreetAddress []string `json:"streetAddress"`
}

// Validate validates this handler create organization request
func (m *HandlerCreateOrganizationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMspID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerCreateOrganizationRequest) validateMspID(formats strfmt.Registry) error {

	if err := validate.Required("mspId", "body", m.MspID); err != nil {
		return err
	}

	return nil
}

func (m *HandlerCreateOrganizationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler create organization request based on context it is used
func (m *HandlerCreateOrganizationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerCreateOrganizationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerCreateOrganizationRequest) UnmarshalBinary(b []byte) error {
	var res HandlerCreateOrganizationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
