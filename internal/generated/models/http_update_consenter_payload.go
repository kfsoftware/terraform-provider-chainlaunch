// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPUpdateConsenterPayload http update consenter payload
//
// swagger:model http.UpdateConsenterPayload
type HTTPUpdateConsenterPayload struct {

	// client tls cert
	// Required: true
	ClientTLSCert *string `json:"client_tls_cert"`

	// host
	// Required: true
	Host *string `json:"host"`

	// new host
	// Required: true
	NewHost *string `json:"new_host"`

	// new port
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	NewPort *int64 `json:"new_port"`

	// port
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port"`

	// server tls cert
	// Required: true
	ServerTLSCert *string `json:"server_tls_cert"`
}

// Validate validates this http update consenter payload
func (m *HTTPUpdateConsenterPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientTLSCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerTLSCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPUpdateConsenterPayload) validateClientTLSCert(formats strfmt.Registry) error {

	if err := validate.Required("client_tls_cert", "body", m.ClientTLSCert); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateConsenterPayload) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateConsenterPayload) validateNewHost(formats strfmt.Registry) error {

	if err := validate.Required("new_host", "body", m.NewHost); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateConsenterPayload) validateNewPort(formats strfmt.Registry) error {

	if err := validate.Required("new_port", "body", m.NewPort); err != nil {
		return err
	}

	if err := validate.MinimumInt("new_port", "body", *m.NewPort, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("new_port", "body", *m.NewPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateConsenterPayload) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *HTTPUpdateConsenterPayload) validateServerTLSCert(formats strfmt.Registry) error {

	if err := validate.Required("server_tls_cert", "body", m.ServerTLSCert); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this http update consenter payload based on context it is used
func (m *HTTPUpdateConsenterPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPUpdateConsenterPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPUpdateConsenterPayload) UnmarshalBinary(b []byte) error {
	var res HTTPUpdateConsenterPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
