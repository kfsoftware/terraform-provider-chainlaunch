// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesDocumentation types documentation
//
// swagger:model types.Documentation
type TypesDocumentation struct {

	// Examples contains example configurations and usage
	Examples []*TypesExample `json:"examples"`

	// README contains the main documentation for the plugin
	Readme string `json:"readme,omitempty"`

	// Troubleshooting contains common issues and their solutions
	Troubleshooting []*TypesTroubleshootingItem `json:"troubleshooting"`
}

// Validate validates this types documentation
func (m *TypesDocumentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExamples(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTroubleshooting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDocumentation) validateExamples(formats strfmt.Registry) error {
	if swag.IsZero(m.Examples) { // not required
		return nil
	}

	for i := 0; i < len(m.Examples); i++ {
		if swag.IsZero(m.Examples[i]) { // not required
			continue
		}

		if m.Examples[i] != nil {
			if err := m.Examples[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("examples" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("examples" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *TypesDocumentation) validateTroubleshooting(formats strfmt.Registry) error {
	if swag.IsZero(m.Troubleshooting) { // not required
		return nil
	}

	for i := 0; i < len(m.Troubleshooting); i++ {
		if swag.IsZero(m.Troubleshooting[i]) { // not required
			continue
		}

		if m.Troubleshooting[i] != nil {
			if err := m.Troubleshooting[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("troubleshooting" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("troubleshooting" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this types documentation based on the context it is used
func (m *TypesDocumentation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExamples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTroubleshooting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesDocumentation) contextValidateExamples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Examples); i++ {

		if m.Examples[i] != nil {

			if swag.IsZero(m.Examples[i]) { // not required
				return nil
			}

			if err := m.Examples[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("examples" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("examples" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *TypesDocumentation) contextValidateTroubleshooting(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Troubleshooting); i++ {

		if m.Troubleshooting[i] != nil {

			if swag.IsZero(m.Troubleshooting[i]) { // not required
				return nil
			}

			if err := m.Troubleshooting[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("troubleshooting" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("troubleshooting" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesDocumentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesDocumentation) UnmarshalBinary(b []byte) error {
	var res TypesDocumentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
