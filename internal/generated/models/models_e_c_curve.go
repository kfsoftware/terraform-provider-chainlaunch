// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsECCurve models e c curve
//
// swagger:model models.ECCurve
type ModelsECCurve string

func NewModelsECCurve(value ModelsECCurve) *ModelsECCurve {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsECCurve.
func (m ModelsECCurve) Pointer() *ModelsECCurve {
	return &m
}

const (

	// ModelsECCurvePDash256 captures enum value "P-256"
	ModelsECCurvePDash256 ModelsECCurve = "P-256"

	// ModelsECCurvePDash384 captures enum value "P-384"
	ModelsECCurvePDash384 ModelsECCurve = "P-384"

	// ModelsECCurvePDash521 captures enum value "P-521"
	ModelsECCurvePDash521 ModelsECCurve = "P-521"

	// ModelsECCurveSecp256k1 captures enum value "secp256k1"
	ModelsECCurveSecp256k1 ModelsECCurve = "secp256k1"
)

// for schema
var modelsECCurveEnum []any

func init() {
	var res []ModelsECCurve
	if err := json.Unmarshal([]byte(`["P-256","P-384","P-521","secp256k1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsECCurveEnum = append(modelsECCurveEnum, v)
	}
}

func (m ModelsECCurve) validateModelsECCurveEnum(path, location string, value ModelsECCurve) error {
	if err := validate.EnumCase(path, location, value, modelsECCurveEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models e c curve
func (m ModelsECCurve) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsECCurveEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models e c curve based on context it is used
func (m ModelsECCurve) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
