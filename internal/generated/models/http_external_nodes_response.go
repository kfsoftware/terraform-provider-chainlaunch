// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HTTPExternalNodesResponse http external nodes response
//
// swagger:model http.ExternalNodesResponse
type HTTPExternalNodesResponse struct {

	// besu nodes
	BesuNodes []*ServiceExternalBesuNodeDTO `json:"besu_nodes"`

	// fabric orderers
	FabricOrderers []*ServiceExternalFabricOrdererDTO `json:"fabric_orderers"`

	// fabric peers
	FabricPeers []*ServiceExternalFabricPeerDTO `json:"fabric_peers"`
}

// Validate validates this http external nodes response
func (m *HTTPExternalNodesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBesuNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricOrderers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricPeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPExternalNodesResponse) validateBesuNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.BesuNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.BesuNodes); i++ {
		if swag.IsZero(m.BesuNodes[i]) { // not required
			continue
		}

		if m.BesuNodes[i] != nil {
			if err := m.BesuNodes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("besu_nodes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("besu_nodes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPExternalNodesResponse) validateFabricOrderers(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricOrderers) { // not required
		return nil
	}

	for i := 0; i < len(m.FabricOrderers); i++ {
		if swag.IsZero(m.FabricOrderers[i]) { // not required
			continue
		}

		if m.FabricOrderers[i] != nil {
			if err := m.FabricOrderers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("fabric_orderers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("fabric_orderers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPExternalNodesResponse) validateFabricPeers(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricPeers) { // not required
		return nil
	}

	for i := 0; i < len(m.FabricPeers); i++ {
		if swag.IsZero(m.FabricPeers[i]) { // not required
			continue
		}

		if m.FabricPeers[i] != nil {
			if err := m.FabricPeers[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("fabric_peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("fabric_peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this http external nodes response based on the context it is used
func (m *HTTPExternalNodesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBesuNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricOrderers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricPeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPExternalNodesResponse) contextValidateBesuNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BesuNodes); i++ {

		if m.BesuNodes[i] != nil {

			if swag.IsZero(m.BesuNodes[i]) { // not required
				return nil
			}

			if err := m.BesuNodes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("besu_nodes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("besu_nodes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPExternalNodesResponse) contextValidateFabricOrderers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FabricOrderers); i++ {

		if m.FabricOrderers[i] != nil {

			if swag.IsZero(m.FabricOrderers[i]) { // not required
				return nil
			}

			if err := m.FabricOrderers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("fabric_orderers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("fabric_orderers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *HTTPExternalNodesResponse) contextValidateFabricPeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FabricPeers); i++ {

		if m.FabricPeers[i] != nil {

			if swag.IsZero(m.FabricPeers[i]) { // not required
				return nil
			}

			if err := m.FabricPeers[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("fabric_peers" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("fabric_peers" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPExternalNodesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPExternalNodesResponse) UnmarshalBinary(b []byte) error {
	var res HTTPExternalNodesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
