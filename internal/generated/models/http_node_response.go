// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HTTPNodeResponse http node response
//
// swagger:model http.NodeResponse
type HTTPNodeResponse struct {

	// besu node
	BesuNode *ServiceBesuNodeProperties `json:"besuNode,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// fabric orderer
	FabricOrderer *ServiceFabricOrdererProperties `json:"fabricOrderer,omitempty"`

	// fabric peer
	FabricPeer *ServiceFabricPeerProperties `json:"fabricPeer,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node type
	NodeType string `json:"nodeType,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this http node response
func (m *HTTPNodeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBesuNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricOrderer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFabricPeer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPNodeResponse) validateBesuNode(formats strfmt.Registry) error {
	if swag.IsZero(m.BesuNode) { // not required
		return nil
	}

	if m.BesuNode != nil {
		if err := m.BesuNode.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("besuNode")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("besuNode")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPNodeResponse) validateFabricOrderer(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricOrderer) { // not required
		return nil
	}

	if m.FabricOrderer != nil {
		if err := m.FabricOrderer.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("fabricOrderer")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("fabricOrderer")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPNodeResponse) validateFabricPeer(formats strfmt.Registry) error {
	if swag.IsZero(m.FabricPeer) { // not required
		return nil
	}

	if m.FabricPeer != nil {
		if err := m.FabricPeer.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("fabricPeer")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("fabricPeer")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this http node response based on the context it is used
func (m *HTTPNodeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBesuNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricOrderer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFabricPeer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPNodeResponse) contextValidateBesuNode(ctx context.Context, formats strfmt.Registry) error {

	if m.BesuNode != nil {

		if swag.IsZero(m.BesuNode) { // not required
			return nil
		}

		if err := m.BesuNode.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("besuNode")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("besuNode")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPNodeResponse) contextValidateFabricOrderer(ctx context.Context, formats strfmt.Registry) error {

	if m.FabricOrderer != nil {

		if swag.IsZero(m.FabricOrderer) { // not required
			return nil
		}

		if err := m.FabricOrderer.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("fabricOrderer")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("fabricOrderer")
			}

			return err
		}
	}

	return nil
}

func (m *HTTPNodeResponse) contextValidateFabricPeer(ctx context.Context, formats strfmt.Registry) error {

	if m.FabricPeer != nil {

		if swag.IsZero(m.FabricPeer) { // not required
			return nil
		}

		if err := m.FabricPeer.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("fabricPeer")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("fabricPeer")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPNodeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPNodeResponse) UnmarshalBinary(b []byte) error {
	var res HTTPNodeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
