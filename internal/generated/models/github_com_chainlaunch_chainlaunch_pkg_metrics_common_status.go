// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComChainlaunchChainlaunchPkgMetricsCommonStatus github com chainlaunch chainlaunch pkg metrics common status
//
// swagger:model github_com_chainlaunch_chainlaunch_pkg_metrics_common.Status
type GithubComChainlaunchChainlaunchPkgMetricsCommonStatus struct {

	// DeploymentMode is the current deployment mode
	DeploymentMode struct {
		CommonDeploymentMode
	} `json:"deployment_mode,omitempty"`

	// Error contains any error message
	Error string `json:"error,omitempty"`

	// NetworkMode is the Docker network mode (only for Docker deployments)
	NetworkMode struct {
		CommonNetworkMode
	} `json:"network_mode,omitempty"`

	// Port is the port Prometheus is listening on
	Port int64 `json:"port,omitempty"`

	// ScrapeInterval is the current scrape interval
	ScrapeInterval struct {
		TimeDuration
	} `json:"scrape_interval,omitempty"`

	// StartedAt is when the instance was started
	StartedAt string `json:"started_at,omitempty"`

	// Status is the current status (running, stopped, etc.)
	Status string `json:"status,omitempty"`

	// Version is the Prometheus version
	Version string `json:"version,omitempty"`
}

// Validate validates this github com chainlaunch chainlaunch pkg metrics common status
func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScrapeInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) validateDeploymentMode(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentMode) { // not required
		return nil
	}

	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) validateNetworkMode(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkMode) { // not required
		return nil
	}

	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) validateScrapeInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ScrapeInterval) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this github com chainlaunch chainlaunch pkg metrics common status based on the context it is used
func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScrapeInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) contextValidateDeploymentMode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) contextValidateNetworkMode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) contextValidateScrapeInterval(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComChainlaunchChainlaunchPkgMetricsCommonStatus) UnmarshalBinary(b []byte) error {
	var res GithubComChainlaunchChainlaunchPkgMetricsCommonStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
