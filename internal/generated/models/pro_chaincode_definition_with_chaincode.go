// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProChaincodeDefinitionWithChaincode pro chaincode definition with chaincode
//
// swagger:model pro.ChaincodeDefinitionWithChaincode
type ProChaincodeDefinitionWithChaincode struct {

	// chaincode
	Chaincode *ProFabricChaincode `json:"chaincode,omitempty"`

	// definition
	Definition *ProFabricChaincodeDefinition `json:"definition,omitempty"`

	// proposal
	Proposal *ProChaincodeProposal `json:"proposal,omitempty"`
}

// Validate validates this pro chaincode definition with chaincode
func (m *ProChaincodeDefinitionWithChaincode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChaincode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) validateChaincode(formats strfmt.Registry) error {
	if swag.IsZero(m.Chaincode) { // not required
		return nil
	}

	if m.Chaincode != nil {
		if err := m.Chaincode.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("chaincode")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("chaincode")
			}

			return err
		}
	}

	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) validateDefinition(formats strfmt.Registry) error {
	if swag.IsZero(m.Definition) { // not required
		return nil
	}

	if m.Definition != nil {
		if err := m.Definition.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("definition")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("definition")
			}

			return err
		}
	}

	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) validateProposal(formats strfmt.Registry) error {
	if swag.IsZero(m.Proposal) { // not required
		return nil
	}

	if m.Proposal != nil {
		if err := m.Proposal.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("proposal")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("proposal")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this pro chaincode definition with chaincode based on the context it is used
func (m *ProChaincodeDefinitionWithChaincode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChaincode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefinition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProposal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) contextValidateChaincode(ctx context.Context, formats strfmt.Registry) error {

	if m.Chaincode != nil {

		if swag.IsZero(m.Chaincode) { // not required
			return nil
		}

		if err := m.Chaincode.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("chaincode")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("chaincode")
			}

			return err
		}
	}

	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) contextValidateDefinition(ctx context.Context, formats strfmt.Registry) error {

	if m.Definition != nil {

		if swag.IsZero(m.Definition) { // not required
			return nil
		}

		if err := m.Definition.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("definition")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("definition")
			}

			return err
		}
	}

	return nil
}

func (m *ProChaincodeDefinitionWithChaincode) contextValidateProposal(ctx context.Context, formats strfmt.Registry) error {

	if m.Proposal != nil {

		if swag.IsZero(m.Proposal) { // not required
			return nil
		}

		if err := m.Proposal.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("proposal")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("proposal")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProChaincodeDefinitionWithChaincode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProChaincodeDefinitionWithChaincode) UnmarshalBinary(b []byte) error {
	var res ProChaincodeDefinitionWithChaincode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
