// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesBlockchainPlatform types blockchain platform
//
// swagger:model types.BlockchainPlatform
type TypesBlockchainPlatform string

func NewTypesBlockchainPlatform(value TypesBlockchainPlatform) *TypesBlockchainPlatform {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesBlockchainPlatform.
func (m TypesBlockchainPlatform) Pointer() *TypesBlockchainPlatform {
	return &m
}

const (

	// TypesBlockchainPlatformFABRIC captures enum value "FABRIC"
	TypesBlockchainPlatformFABRIC TypesBlockchainPlatform = "FABRIC"

	// TypesBlockchainPlatformBESU captures enum value "BESU"
	TypesBlockchainPlatformBESU TypesBlockchainPlatform = "BESU"
)

// for schema
var typesBlockchainPlatformEnum []any

func init() {
	var res []TypesBlockchainPlatform
	if err := json.Unmarshal([]byte(`["FABRIC","BESU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesBlockchainPlatformEnum = append(typesBlockchainPlatformEnum, v)
	}
}

func (m TypesBlockchainPlatform) validateTypesBlockchainPlatformEnum(path, location string, value TypesBlockchainPlatform) error {
	if err := validate.EnumCase(path, location, value, typesBlockchainPlatformEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types blockchain platform
func (m TypesBlockchainPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesBlockchainPlatformEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types blockchain platform based on context it is used
func (m TypesBlockchainPlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
