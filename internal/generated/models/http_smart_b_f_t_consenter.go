// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HTTPSmartBFTConsenter http smart b f t consenter
//
// swagger:model http.SmartBFTConsenter
type HTTPSmartBFTConsenter struct {

	// address
	Address *HTTPHostPort `json:"address,omitempty"`

	// client TLS cert
	ClientTLSCert string `json:"clientTLSCert,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// msp Id
	MspID string `json:"mspId,omitempty"`

	// server TLS cert
	ServerTLSCert string `json:"serverTLSCert,omitempty"`
}

// Validate validates this http smart b f t consenter
func (m *HTTPSmartBFTConsenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPSmartBFTConsenter) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("address")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("address")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this http smart b f t consenter based on the context it is used
func (m *HTTPSmartBFTConsenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPSmartBFTConsenter) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("address")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("address")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPSmartBFTConsenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPSmartBFTConsenter) UnmarshalBinary(b []byte) error {
	var res HTTPSmartBFTConsenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
