// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerCertificateHandlerRequest handler certificate handler request
//
// swagger:model handler.CertificateHandlerRequest
type HandlerCertificateHandlerRequest struct {

	// common name
	// Example: example.com
	// Required: true
	CommonName *string `json:"commonName"`

	// country
	// Example: ["US"]
	Country []string `json:"country"`

	// dns names
	// Example: ["www.example.com"]
	DNSNames []string `json:"dnsNames"`

	// email addresses
	// Example: ["admin@example.com"]
	EmailAddresses []string `json:"emailAddresses"`

	// is c a
	// Example: false
	IsCA bool `json:"isCA,omitempty"`

	// locality
	// Example: ["San Francisco"]
	Locality []string `json:"locality"`

	// organization
	// Example: ["Example Corp"]
	Organization []string `json:"organization"`

	// organizational unit
	// Example: ["Engineering"]
	OrganizationalUnit []string `json:"organizationalUnit"`

	// postal code
	// Example: ["94105"]
	PostalCode []string `json:"postalCode"`

	// province
	// Example: ["California"]
	Province []string `json:"province"`

	// street address
	// Example: ["123 Main St"]
	StreetAddress []string `json:"streetAddress"`

	// valid for
	// Example: 8760h
	// Required: true
	ValidFor *string `json:"validFor"`
}

// Validate validates this handler certificate handler request
func (m *HandlerCertificateHandlerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerCertificateHandlerRequest) validateCommonName(formats strfmt.Registry) error {

	if err := validate.Required("commonName", "body", m.CommonName); err != nil {
		return err
	}

	return nil
}

func (m *HandlerCertificateHandlerRequest) validateValidFor(formats strfmt.Registry) error {

	if err := validate.Required("validFor", "body", m.ValidFor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this handler certificate handler request based on context it is used
func (m *HandlerCertificateHandlerRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HandlerCertificateHandlerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerCertificateHandlerRequest) UnmarshalBinary(b []byte) error {
	var res HandlerCertificateHandlerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
