// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerImportOrganizationRequest handler import organization request
//
// swagger:model handler.ImportOrganizationRequest
type HandlerImportOrganizationRequest struct {

	// For SourceType="aws_kms": AWS KMS configuration
	AwsKmsImport struct {
		HandlerAWSKMSImportData
	} `json:"awsKmsImport,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// msp Id
	// Required: true
	MspID *string `json:"mspId"`

	// name
	// Required: true
	Name *string `json:"name"`

	// provider Id
	// Required: true
	ProviderID *int64 `json:"providerId"`

	// For SourceType="raw": Direct PEM-encoded certificates and keys
	RawImport struct {
		HandlerRawImportData
	} `json:"rawImport,omitempty"`

	// Source type for the import: "raw", "vault", or "aws_kms"
	// Required: true
	// Enum: ["raw","vault","aws_kms"]
	SourceType *string `json:"sourceType"`

	// For SourceType="vault": Vault paths to retrieve certificates/keys
	VaultImport struct {
		HandlerVaultImportData
	} `json:"vaultImport,omitempty"`
}

// Validate validates this handler import organization request
func (m *HandlerImportOrganizationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsKmsImport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMspID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawImport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultImport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerImportOrganizationRequest) validateAwsKmsImport(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsKmsImport) { // not required
		return nil
	}

	return nil
}

func (m *HandlerImportOrganizationRequest) validateMspID(formats strfmt.Registry) error {

	if err := validate.Required("mspId", "body", m.MspID); err != nil {
		return err
	}

	return nil
}

func (m *HandlerImportOrganizationRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HandlerImportOrganizationRequest) validateProviderID(formats strfmt.Registry) error {

	if err := validate.Required("providerId", "body", m.ProviderID); err != nil {
		return err
	}

	return nil
}

func (m *HandlerImportOrganizationRequest) validateRawImport(formats strfmt.Registry) error {
	if swag.IsZero(m.RawImport) { // not required
		return nil
	}

	return nil
}

var handlerImportOrganizationRequestTypeSourceTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raw","vault","aws_kms"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		handlerImportOrganizationRequestTypeSourceTypePropEnum = append(handlerImportOrganizationRequestTypeSourceTypePropEnum, v)
	}
}

const (

	// HandlerImportOrganizationRequestSourceTypeRaw captures enum value "raw"
	HandlerImportOrganizationRequestSourceTypeRaw string = "raw"

	// HandlerImportOrganizationRequestSourceTypeVault captures enum value "vault"
	HandlerImportOrganizationRequestSourceTypeVault string = "vault"

	// HandlerImportOrganizationRequestSourceTypeAwsKms captures enum value "aws_kms"
	HandlerImportOrganizationRequestSourceTypeAwsKms string = "aws_kms"
)

// prop value enum
func (m *HandlerImportOrganizationRequest) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, handlerImportOrganizationRequestTypeSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HandlerImportOrganizationRequest) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", *m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *HandlerImportOrganizationRequest) validateVaultImport(formats strfmt.Registry) error {
	if swag.IsZero(m.VaultImport) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this handler import organization request based on the context it is used
func (m *HandlerImportOrganizationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsKmsImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVaultImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerImportOrganizationRequest) contextValidateAwsKmsImport(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HandlerImportOrganizationRequest) contextValidateRawImport(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *HandlerImportOrganizationRequest) contextValidateVaultImport(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerImportOrganizationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerImportOrganizationRequest) UnmarshalBinary(b []byte) error {
	var res HandlerImportOrganizationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
