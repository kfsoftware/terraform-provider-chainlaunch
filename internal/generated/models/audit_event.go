// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditEvent audit event
//
// swagger:model audit.Event
type AuditEvent struct {

	// affected resource
	AffectedResource string `json:"affectedResource,omitempty"`

	// details
	Details any `json:"details,omitempty"`

	// event outcome
	EventOutcome AuditEventOutcome `json:"eventOutcome,omitempty"`

	// event source
	EventSource string `json:"eventSource,omitempty"`

	// event type
	EventType string `json:"eventType,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// request Id
	RequestID string `json:"requestId,omitempty"`

	// session Id
	SessionID string `json:"sessionId,omitempty"`

	// severity
	Severity AuditSeverity `json:"severity,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// user identity
	UserIdentity int64 `json:"userIdentity,omitempty"`
}

// Validate validates this audit event
func (m *AuditEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventOutcome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEvent) validateEventOutcome(formats strfmt.Registry) error {
	if swag.IsZero(m.EventOutcome) { // not required
		return nil
	}

	if err := m.EventOutcome.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("eventOutcome")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("eventOutcome")
		}

		return err
	}

	return nil
}

func (m *AuditEvent) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("severity")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("severity")
		}

		return err
	}

	return nil
}

// ContextValidate validate this audit event based on the context it is used
func (m *AuditEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventOutcome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEvent) contextValidateEventOutcome(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EventOutcome) { // not required
		return nil
	}

	if err := m.EventOutcome.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("eventOutcome")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("eventOutcome")
		}

		return err
	}

	return nil
}

func (m *AuditEvent) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("severity")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("severity")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEvent) UnmarshalBinary(b []byte) error {
	var res AuditEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
