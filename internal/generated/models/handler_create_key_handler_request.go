// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HandlerCreateKeyHandlerRequest handler create key handler request
//
// swagger:model handler.CreateKeyHandlerRequest
type HandlerCreateKeyHandlerRequest struct {

	// algorithm
	// Example: RSA
	// Required: true
	Algorithm *string `json:"algorithm"`

	// certificate
	Certificate *HandlerCertificateHandlerRequest `json:"certificate,omitempty"`

	// curve
	// Example: P-256
	Curve string `json:"curve,omitempty"`

	// description
	// Example: Key for signing certificates
	Description string `json:"description,omitempty"`

	// is c a
	// Example: 0
	IsCA int64 `json:"isCA,omitempty"`

	// key size
	// Example: 2048
	KeySize int64 `json:"keySize,omitempty"`

	// name
	// Example: my-key
	// Required: true
	Name *string `json:"name"`

	// provider Id
	// Example: 1
	ProviderID int64 `json:"providerId,omitempty"`
}

// Validate validates this handler create key handler request
func (m *HandlerCreateKeyHandlerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerCreateKeyHandlerRequest) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *HandlerCreateKeyHandlerRequest) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("certificate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("certificate")
			}

			return err
		}
	}

	return nil
}

func (m *HandlerCreateKeyHandlerRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this handler create key handler request based on the context it is used
func (m *HandlerCreateKeyHandlerRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HandlerCreateKeyHandlerRequest) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("certificate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("certificate")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HandlerCreateKeyHandlerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HandlerCreateKeyHandlerRequest) UnmarshalBinary(b []byte) error {
	var res HandlerCreateKeyHandlerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
