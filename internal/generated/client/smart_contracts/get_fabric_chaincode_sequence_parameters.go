// Code generated by go-swagger; DO NOT EDIT.

package smart_contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFabricChaincodeSequenceParams creates a new GetFabricChaincodeSequenceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFabricChaincodeSequenceParams() *GetFabricChaincodeSequenceParams {
	return &GetFabricChaincodeSequenceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFabricChaincodeSequenceParamsWithTimeout creates a new GetFabricChaincodeSequenceParams object
// with the ability to set a timeout on a request.
func NewGetFabricChaincodeSequenceParamsWithTimeout(timeout time.Duration) *GetFabricChaincodeSequenceParams {
	return &GetFabricChaincodeSequenceParams{
		timeout: timeout,
	}
}

// NewGetFabricChaincodeSequenceParamsWithContext creates a new GetFabricChaincodeSequenceParams object
// with the ability to set a context for a request.
func NewGetFabricChaincodeSequenceParamsWithContext(ctx context.Context) *GetFabricChaincodeSequenceParams {
	return &GetFabricChaincodeSequenceParams{
		Context: ctx,
	}
}

// NewGetFabricChaincodeSequenceParamsWithHTTPClient creates a new GetFabricChaincodeSequenceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFabricChaincodeSequenceParamsWithHTTPClient(client *http.Client) *GetFabricChaincodeSequenceParams {
	return &GetFabricChaincodeSequenceParams{
		HTTPClient: client,
	}
}

/*
GetFabricChaincodeSequenceParams contains all the parameters to send to the API endpoint

	for the get fabric chaincode sequence operation.

	Typically these are written to a http.Request.
*/
type GetFabricChaincodeSequenceParams struct {

	/* ChaincodeName.

	   Chaincode name
	*/
	ChaincodeName string

	/* ChannelName.

	   Channel name
	*/
	ChannelName string

	/* PeerID.

	   Peer ID
	*/
	PeerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get fabric chaincode sequence params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFabricChaincodeSequenceParams) WithDefaults() *GetFabricChaincodeSequenceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get fabric chaincode sequence params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFabricChaincodeSequenceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithTimeout(timeout time.Duration) *GetFabricChaincodeSequenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithContext(ctx context.Context) *GetFabricChaincodeSequenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithHTTPClient(client *http.Client) *GetFabricChaincodeSequenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChaincodeName adds the chaincodeName to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithChaincodeName(chaincodeName string) *GetFabricChaincodeSequenceParams {
	o.SetChaincodeName(chaincodeName)
	return o
}

// SetChaincodeName adds the chaincodeName to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetChaincodeName(chaincodeName string) {
	o.ChaincodeName = chaincodeName
}

// WithChannelName adds the channelName to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithChannelName(channelName string) *GetFabricChaincodeSequenceParams {
	o.SetChannelName(channelName)
	return o
}

// SetChannelName adds the channelName to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetChannelName(channelName string) {
	o.ChannelName = channelName
}

// WithPeerID adds the peerID to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) WithPeerID(peerID string) *GetFabricChaincodeSequenceParams {
	o.SetPeerID(peerID)
	return o
}

// SetPeerID adds the peerId to the get fabric chaincode sequence params
func (o *GetFabricChaincodeSequenceParams) SetPeerID(peerID string) {
	o.PeerID = peerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFabricChaincodeSequenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param chaincodeName
	qrChaincodeName := o.ChaincodeName
	qChaincodeName := qrChaincodeName
	if qChaincodeName != "" {

		if err := r.SetQueryParam("chaincodeName", qChaincodeName); err != nil {
			return err
		}
	}

	// query param channelName
	qrChannelName := o.ChannelName
	qChannelName := qrChannelName
	if qChannelName != "" {

		if err := r.SetQueryParam("channelName", qChannelName); err != nil {
			return err
		}
	}

	// path param peerId
	if err := r.SetPathParam("peerId", o.PeerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
