// Code generated by go-swagger; DO NOT EDIT.

package smart_contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new smart contracts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new smart contracts API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new smart contracts API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for smart contracts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApproveFabricChaincode(params *ApproveFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveFabricChaincodeOK, error)

	CommitFabricChaincode(params *CommitFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CommitFabricChaincodeOK, error)

	DeployBesuContract(params *DeployBesuContractParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployBesuContractOK, error)

	DeployFabricChaincode(params *DeployFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployFabricChaincodeOK, error)

	GetFabricChaincodeDetail(params *GetFabricChaincodeDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChaincodeDetailOK, error)

	GetFabricChaincodeSequence(params *GetFabricChaincodeSequenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChaincodeSequenceOK, error)

	InstallFabricChaincode(params *InstallFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallFabricChaincodeOK, error)

	ListFabricChaincodes(params *ListFabricChaincodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricChaincodesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ApproveFabricChaincode approves fabric chaincode

Approve a chaincode definition on a Fabric peer
*/
func (a *Client) ApproveFabricChaincode(params *ApproveFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ApproveFabricChaincodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewApproveFabricChaincodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "approveFabricChaincode",
		Method:             "POST",
		PathPattern:        "/sc/fabric/peer/{peerId}/chaincode/approve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ApproveFabricChaincodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ApproveFabricChaincodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for approveFabricChaincode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CommitFabricChaincode commits fabric chaincode

Commit a chaincode definition to a Fabric channel
*/
func (a *Client) CommitFabricChaincode(params *CommitFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CommitFabricChaincodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCommitFabricChaincodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "commitFabricChaincode",
		Method:             "POST",
		PathPattern:        "/sc/fabric/peer/{peerId}/chaincode/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CommitFabricChaincodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CommitFabricChaincodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for commitFabricChaincode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeployBesuContract deploys besu contract

Deploy a smart contract to a Besu network
*/
func (a *Client) DeployBesuContract(params *DeployBesuContractParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployBesuContractOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeployBesuContractParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deployBesuContract",
		Method:             "POST",
		PathPattern:        "/sc/besu/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeployBesuContractReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeployBesuContractOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployBesuContract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeployFabricChaincode deploys fabric chaincode

Deploy a chaincode to a Fabric network (install, approve, commit)
*/
func (a *Client) DeployFabricChaincode(params *DeployFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployFabricChaincodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeployFabricChaincodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deployFabricChaincode",
		Method:             "POST",
		PathPattern:        "/sc/fabric/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeployFabricChaincodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeployFabricChaincodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployFabricChaincode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricChaincodeDetail gets fabric chaincode detail

Get detailed information about a specific chaincode
*/
func (a *Client) GetFabricChaincodeDetail(params *GetFabricChaincodeDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChaincodeDetailOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricChaincodeDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricChaincodeDetail",
		Method:             "GET",
		PathPattern:        "/sc/fabric/chaincodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricChaincodeDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricChaincodeDetailOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricChaincodeDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricChaincodeSequence gets fabric chaincode sequence

Get the current sequence number for a chaincode on a channel
*/
func (a *Client) GetFabricChaincodeSequence(params *GetFabricChaincodeSequenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChaincodeSequenceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricChaincodeSequenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricChaincodeSequence",
		Method:             "GET",
		PathPattern:        "/sc/fabric/peer/{peerId}/chaincode/sequence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricChaincodeSequenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricChaincodeSequenceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricChaincodeSequence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallFabricChaincode installs fabric chaincode

Install a chaincode package on a Fabric peer
*/
func (a *Client) InstallFabricChaincode(params *InstallFabricChaincodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallFabricChaincodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewInstallFabricChaincodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installFabricChaincode",
		Method:             "POST",
		PathPattern:        "/sc/fabric/peer/{peerId}/chaincode/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallFabricChaincodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*InstallFabricChaincodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for installFabricChaincode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFabricChaincodes lists fabric chaincodes

List all chaincodes in the system
*/
func (a *Client) ListFabricChaincodes(params *ListFabricChaincodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricChaincodesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListFabricChaincodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFabricChaincodes",
		Method:             "GET",
		PathPattern:        "/sc/fabric/chaincodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFabricChaincodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListFabricChaincodesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFabricChaincodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
