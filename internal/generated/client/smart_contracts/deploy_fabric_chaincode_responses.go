// Code generated by go-swagger; DO NOT EDIT.

package smart_contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DeployFabricChaincodeReader is a Reader for the DeployFabricChaincode structure.
type DeployFabricChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeployFabricChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeployFabricChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeployFabricChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeployFabricChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/deploy] deployFabricChaincode", response, response.Code())
	}
}

// NewDeployFabricChaincodeOK creates a DeployFabricChaincodeOK with default headers values
func NewDeployFabricChaincodeOK() *DeployFabricChaincodeOK {
	return &DeployFabricChaincodeOK{}
}

/*
DeployFabricChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type DeployFabricChaincodeOK struct {
	Payload *models.ChainlaunchdeployFabricDeployResponse
}

// IsSuccess returns true when this deploy fabric chaincode o k response has a 2xx status code
func (o *DeployFabricChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this deploy fabric chaincode o k response has a 3xx status code
func (o *DeployFabricChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deploy fabric chaincode o k response has a 4xx status code
func (o *DeployFabricChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this deploy fabric chaincode o k response has a 5xx status code
func (o *DeployFabricChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this deploy fabric chaincode o k response a status code equal to that given
func (o *DeployFabricChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the deploy fabric chaincode o k response
func (o *DeployFabricChaincodeOK) Code() int {
	return 200
}

func (o *DeployFabricChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeOK %s", 200, payload)
}

func (o *DeployFabricChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeOK %s", 200, payload)
}

func (o *DeployFabricChaincodeOK) GetPayload() *models.ChainlaunchdeployFabricDeployResponse {
	return o.Payload
}

func (o *DeployFabricChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployFabricDeployResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeployFabricChaincodeBadRequest creates a DeployFabricChaincodeBadRequest with default headers values
func NewDeployFabricChaincodeBadRequest() *DeployFabricChaincodeBadRequest {
	return &DeployFabricChaincodeBadRequest{}
}

/*
DeployFabricChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeployFabricChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this deploy fabric chaincode bad request response has a 2xx status code
func (o *DeployFabricChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deploy fabric chaincode bad request response has a 3xx status code
func (o *DeployFabricChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deploy fabric chaincode bad request response has a 4xx status code
func (o *DeployFabricChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this deploy fabric chaincode bad request response has a 5xx status code
func (o *DeployFabricChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this deploy fabric chaincode bad request response a status code equal to that given
func (o *DeployFabricChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the deploy fabric chaincode bad request response
func (o *DeployFabricChaincodeBadRequest) Code() int {
	return 400
}

func (o *DeployFabricChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeBadRequest %s", 400, payload)
}

func (o *DeployFabricChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeBadRequest %s", 400, payload)
}

func (o *DeployFabricChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *DeployFabricChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeployFabricChaincodeInternalServerError creates a DeployFabricChaincodeInternalServerError with default headers values
func NewDeployFabricChaincodeInternalServerError() *DeployFabricChaincodeInternalServerError {
	return &DeployFabricChaincodeInternalServerError{}
}

/*
DeployFabricChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeployFabricChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this deploy fabric chaincode internal server error response has a 2xx status code
func (o *DeployFabricChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this deploy fabric chaincode internal server error response has a 3xx status code
func (o *DeployFabricChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this deploy fabric chaincode internal server error response has a 4xx status code
func (o *DeployFabricChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this deploy fabric chaincode internal server error response has a 5xx status code
func (o *DeployFabricChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this deploy fabric chaincode internal server error response a status code equal to that given
func (o *DeployFabricChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the deploy fabric chaincode internal server error response
func (o *DeployFabricChaincodeInternalServerError) Code() int {
	return 500
}

func (o *DeployFabricChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeInternalServerError %s", 500, payload)
}

func (o *DeployFabricChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/deploy][%d] deployFabricChaincodeInternalServerError %s", 500, payload)
}

func (o *DeployFabricChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *DeployFabricChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
