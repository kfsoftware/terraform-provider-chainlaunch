// Code generated by go-swagger; DO NOT EDIT.

package smart_contracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ApproveFabricChaincodeReader is a Reader for the ApproveFabricChaincode structure.
type ApproveFabricChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveFabricChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewApproveFabricChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApproveFabricChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApproveFabricChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/peer/{peerId}/chaincode/approve] approveFabricChaincode", response, response.Code())
	}
}

// NewApproveFabricChaincodeOK creates a ApproveFabricChaincodeOK with default headers values
func NewApproveFabricChaincodeOK() *ApproveFabricChaincodeOK {
	return &ApproveFabricChaincodeOK{}
}

/*
ApproveFabricChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type ApproveFabricChaincodeOK struct {
	Payload *models.ChainlaunchdeployFabricApproveResponse
}

// IsSuccess returns true when this approve fabric chaincode o k response has a 2xx status code
func (o *ApproveFabricChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve fabric chaincode o k response has a 3xx status code
func (o *ApproveFabricChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve fabric chaincode o k response has a 4xx status code
func (o *ApproveFabricChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve fabric chaincode o k response has a 5xx status code
func (o *ApproveFabricChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve fabric chaincode o k response a status code equal to that given
func (o *ApproveFabricChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve fabric chaincode o k response
func (o *ApproveFabricChaincodeOK) Code() int {
	return 200
}

func (o *ApproveFabricChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeOK %s", 200, payload)
}

func (o *ApproveFabricChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeOK %s", 200, payload)
}

func (o *ApproveFabricChaincodeOK) GetPayload() *models.ChainlaunchdeployFabricApproveResponse {
	return o.Payload
}

func (o *ApproveFabricChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployFabricApproveResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewApproveFabricChaincodeBadRequest creates a ApproveFabricChaincodeBadRequest with default headers values
func NewApproveFabricChaincodeBadRequest() *ApproveFabricChaincodeBadRequest {
	return &ApproveFabricChaincodeBadRequest{}
}

/*
ApproveFabricChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApproveFabricChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this approve fabric chaincode bad request response has a 2xx status code
func (o *ApproveFabricChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve fabric chaincode bad request response has a 3xx status code
func (o *ApproveFabricChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve fabric chaincode bad request response has a 4xx status code
func (o *ApproveFabricChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve fabric chaincode bad request response has a 5xx status code
func (o *ApproveFabricChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this approve fabric chaincode bad request response a status code equal to that given
func (o *ApproveFabricChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the approve fabric chaincode bad request response
func (o *ApproveFabricChaincodeBadRequest) Code() int {
	return 400
}

func (o *ApproveFabricChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeBadRequest %s", 400, payload)
}

func (o *ApproveFabricChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeBadRequest %s", 400, payload)
}

func (o *ApproveFabricChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ApproveFabricChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewApproveFabricChaincodeInternalServerError creates a ApproveFabricChaincodeInternalServerError with default headers values
func NewApproveFabricChaincodeInternalServerError() *ApproveFabricChaincodeInternalServerError {
	return &ApproveFabricChaincodeInternalServerError{}
}

/*
ApproveFabricChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ApproveFabricChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this approve fabric chaincode internal server error response has a 2xx status code
func (o *ApproveFabricChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve fabric chaincode internal server error response has a 3xx status code
func (o *ApproveFabricChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve fabric chaincode internal server error response has a 4xx status code
func (o *ApproveFabricChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve fabric chaincode internal server error response has a 5xx status code
func (o *ApproveFabricChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this approve fabric chaincode internal server error response a status code equal to that given
func (o *ApproveFabricChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the approve fabric chaincode internal server error response
func (o *ApproveFabricChaincodeInternalServerError) Code() int {
	return 500
}

func (o *ApproveFabricChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeInternalServerError %s", 500, payload)
}

func (o *ApproveFabricChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/peer/{peerId}/chaincode/approve][%d] approveFabricChaincodeInternalServerError %s", 500, payload)
}

func (o *ApproveFabricChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ApproveFabricChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
