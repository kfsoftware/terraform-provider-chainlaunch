// Code generated by go-swagger; DO NOT EDIT.

package fabric_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetChainInfoReader is a Reader for the GetChainInfo structure.
type GetChainInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChainInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetChainInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetChainInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetChainInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChainInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /networks/fabric/{id}/info] getChainInfo", response, response.Code())
	}
}

// NewGetChainInfoOK creates a GetChainInfoOK with default headers values
func NewGetChainInfoOK() *GetChainInfoOK {
	return &GetChainInfoOK{}
}

/*
GetChainInfoOK describes a response with status code 200, with default header values.

OK
*/
type GetChainInfoOK struct {
	Payload *models.HTTPChainInfoResponse
}

// IsSuccess returns true when this get chain info o k response has a 2xx status code
func (o *GetChainInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get chain info o k response has a 3xx status code
func (o *GetChainInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chain info o k response has a 4xx status code
func (o *GetChainInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chain info o k response has a 5xx status code
func (o *GetChainInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get chain info o k response a status code equal to that given
func (o *GetChainInfoOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get chain info o k response
func (o *GetChainInfoOK) Code() int {
	return 200
}

func (o *GetChainInfoOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoOK %s", 200, payload)
}

func (o *GetChainInfoOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoOK %s", 200, payload)
}

func (o *GetChainInfoOK) GetPayload() *models.HTTPChainInfoResponse {
	return o.Payload
}

func (o *GetChainInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPChainInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetChainInfoBadRequest creates a GetChainInfoBadRequest with default headers values
func NewGetChainInfoBadRequest() *GetChainInfoBadRequest {
	return &GetChainInfoBadRequest{}
}

/*
GetChainInfoBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetChainInfoBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this get chain info bad request response has a 2xx status code
func (o *GetChainInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chain info bad request response has a 3xx status code
func (o *GetChainInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chain info bad request response has a 4xx status code
func (o *GetChainInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chain info bad request response has a 5xx status code
func (o *GetChainInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get chain info bad request response a status code equal to that given
func (o *GetChainInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get chain info bad request response
func (o *GetChainInfoBadRequest) Code() int {
	return 400
}

func (o *GetChainInfoBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoBadRequest %s", 400, payload)
}

func (o *GetChainInfoBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoBadRequest %s", 400, payload)
}

func (o *GetChainInfoBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *GetChainInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetChainInfoNotFound creates a GetChainInfoNotFound with default headers values
func NewGetChainInfoNotFound() *GetChainInfoNotFound {
	return &GetChainInfoNotFound{}
}

/*
GetChainInfoNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetChainInfoNotFound struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this get chain info not found response has a 2xx status code
func (o *GetChainInfoNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chain info not found response has a 3xx status code
func (o *GetChainInfoNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chain info not found response has a 4xx status code
func (o *GetChainInfoNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chain info not found response has a 5xx status code
func (o *GetChainInfoNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get chain info not found response a status code equal to that given
func (o *GetChainInfoNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get chain info not found response
func (o *GetChainInfoNotFound) Code() int {
	return 404
}

func (o *GetChainInfoNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoNotFound %s", 404, payload)
}

func (o *GetChainInfoNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoNotFound %s", 404, payload)
}

func (o *GetChainInfoNotFound) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *GetChainInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetChainInfoInternalServerError creates a GetChainInfoInternalServerError with default headers values
func NewGetChainInfoInternalServerError() *GetChainInfoInternalServerError {
	return &GetChainInfoInternalServerError{}
}

/*
GetChainInfoInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetChainInfoInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this get chain info internal server error response has a 2xx status code
func (o *GetChainInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chain info internal server error response has a 3xx status code
func (o *GetChainInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chain info internal server error response has a 4xx status code
func (o *GetChainInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chain info internal server error response has a 5xx status code
func (o *GetChainInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get chain info internal server error response a status code equal to that given
func (o *GetChainInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get chain info internal server error response
func (o *GetChainInfoInternalServerError) Code() int {
	return 500
}

func (o *GetChainInfoInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoInternalServerError %s", 500, payload)
}

func (o *GetChainInfoInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /networks/fabric/{id}/info][%d] getChainInfoInternalServerError %s", 500, payload)
}

func (o *GetChainInfoInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *GetChainInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
