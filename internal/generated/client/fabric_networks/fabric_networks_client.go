// Code generated by go-swagger; DO NOT EDIT.

package fabric_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new fabric networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new fabric networks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new fabric networks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for fabric networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextYaml sets the Accept header to "text/yaml".
func WithAcceptTextYaml(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/yaml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddFabricNetworkNode(params *AddFabricNetworkNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddFabricNetworkNodeOK, error)

	CreateFabricNetwork(params *CreateFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFabricNetworkCreated, error)

	DeleteFabricNetwork(params *DeleteFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricNetworkNoContent, error)

	DummyHandler(params *DummyHandlerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DummyHandlerOK, *DummyHandlerCreated, *DummyHandlerAccepted, *DummyHandlerRequestProcessed, *DummyHandlerNoContent, *DummyHandlerResetContent, *DummyHandlerPartialContent, *DummyHandlerMultiStatus, *DummyHandlerAlreadyReported, *DummyHandlerStatus209, *DummyHandlerStatus210, *DummyHandlerStatus211, *DummyHandlerStatus212, *DummyHandlerStatus213, *DummyHandlerStatus214, *DummyHandlerStatus215, *DummyHandlerStatus216, *DummyHandlerStatus217, error)

	GetChainInfo(params *GetChainInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChainInfoOK, error)

	GetFabricBlock(params *GetFabricBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricBlockOK, error)

	GetFabricBlocks(params *GetFabricBlocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricBlocksOK, error)

	GetFabricChannelConfig(params *GetFabricChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChannelConfigOK, error)

	GetFabricCurrentChannelConfig(params *GetFabricCurrentChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricCurrentChannelConfigOK, error)

	GetFabricNetwork(params *GetFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkOK, error)

	GetFabricNetworkByName(params *GetFabricNetworkByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkByNameOK, error)

	GetFabricNetworkNodes(params *GetFabricNetworkNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkNodesOK, error)

	GetFabricOrgConfig(params *GetFabricOrgConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrgConfigOK, error)

	GetFabricTransaction(params *GetFabricTransactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricTransactionOK, error)

	GetNetworkMap(params *GetNetworkMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMapOK, error)

	ImportFabricNetwork(params *ImportFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricNetworkOK, error)

	ImportFabricNetworkWithOrg(params *ImportFabricNetworkWithOrgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricNetworkWithOrgOK, error)

	JoinFabricOrderer(params *JoinFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JoinFabricOrdererOK, error)

	JoinFabricPeer(params *JoinFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JoinFabricPeerOK, error)

	ListFabricNetworks(params *ListFabricNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricNetworksOK, error)

	ReloadNetworkBlock(params *ReloadNetworkBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadNetworkBlockOK, error)

	RemoveFabricOrderer(params *RemoveFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFabricOrdererOK, error)

	RemoveFabricPeer(params *RemoveFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFabricPeerOK, error)

	SetFabricAnchorPeers(params *SetFabricAnchorPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetFabricAnchorPeersOK, error)

	UnjoinFabricOrderer(params *UnjoinFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnjoinFabricOrdererOK, error)

	UnjoinFabricPeer(params *UnjoinFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnjoinFabricPeerOK, error)

	UpdateFabricChannelConfig(params *UpdateFabricChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricChannelConfigOK, error)

	UpdateOrgCRL(params *UpdateOrgCRLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrgCRLOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddFabricNetworkNode adds node to network

Add a node (peer or orderer) to an existing network
*/
func (a *Client) AddFabricNetworkNode(params *AddFabricNetworkNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddFabricNetworkNodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewAddFabricNetworkNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addFabricNetworkNode",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddFabricNetworkNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*AddFabricNetworkNodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addFabricNetworkNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFabricNetwork creates a new fabric network

Create a new Hyperledger Fabric network with the specified configuration
*/
func (a *Client) CreateFabricNetwork(params *CreateFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFabricNetworkCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateFabricNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFabricNetwork",
		Method:             "POST",
		PathPattern:        "/networks/fabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFabricNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateFabricNetworkCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFabricNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFabricNetwork deletes a fabric network

Delete an existing Fabric network and all its resources
*/
func (a *Client) DeleteFabricNetwork(params *DeleteFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricNetworkNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteFabricNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFabricNetwork",
		Method:             "DELETE",
		PathPattern:        "/networks/fabric/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFabricNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteFabricNetworkNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFabricNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DummyHandler submits config update proposal

Submit a signed config update proposal for execution
*/
func (a *Client) DummyHandler(params *DummyHandlerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DummyHandlerOK, *DummyHandlerCreated, *DummyHandlerAccepted, *DummyHandlerRequestProcessed, *DummyHandlerNoContent, *DummyHandlerResetContent, *DummyHandlerPartialContent, *DummyHandlerMultiStatus, *DummyHandlerAlreadyReported, *DummyHandlerStatus209, *DummyHandlerStatus210, *DummyHandlerStatus211, *DummyHandlerStatus212, *DummyHandlerStatus213, *DummyHandlerStatus214, *DummyHandlerStatus215, *DummyHandlerStatus216, *DummyHandlerStatus217, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDummyHandlerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dummyHandler",
		Method:             "POST",
		PathPattern:        "/dummy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DummyHandlerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, err
	}

	// several success responses have to be checked
	switch value := result.(type) {
	case *DummyHandlerOK:
		return value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerCreated:
		return nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerAccepted:
		return nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerRequestProcessed:
		return nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerNoContent:
		return nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerResetContent:
		return nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerPartialContent:
		return nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerMultiStatus:
		return nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerAlreadyReported:
		return nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerStatus209:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerStatus210:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerStatus211:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil, nil
	case *DummyHandlerStatus212:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil, nil
	case *DummyHandlerStatus213:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil, nil
	case *DummyHandlerStatus214:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil, nil
	case *DummyHandlerStatus215:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil, nil
	case *DummyHandlerStatus216:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil, nil
	case *DummyHandlerStatus217:
		return nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, value, nil
	}

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fabric_networks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChainInfo gets fabric chain information

Retrieve detailed information about the Fabric blockchain including height and block hashes
*/
func (a *Client) GetChainInfo(params *GetChainInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetChainInfoOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetChainInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChainInfo",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChainInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetChainInfoOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChainInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricBlock gets transactions from a specific block

Get all transactions from a specific block in a Fabric network
*/
func (a *Client) GetFabricBlock(params *GetFabricBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricBlockOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricBlock",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/blocks/{blockNum}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricBlockOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricBlocks gets list of blocks from fabric network

Get a paginated list of blocks from a Fabric network
*/
func (a *Client) GetFabricBlocks(params *GetFabricBlocksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricBlocksOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricBlocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricBlocks",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/blocks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricBlocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricBlocksOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricBlocks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricChannelConfig gets fabric network channel configuration

Retrieve the channel configuration for a Fabric network
*/
func (a *Client) GetFabricChannelConfig(params *GetFabricChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricChannelConfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricChannelConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricChannelConfig",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/channel-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricChannelConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricChannelConfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricChannelConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricCurrentChannelConfig gets fabric network current channel configuration

Retrieve the current channel configuration for a Fabric network
*/
func (a *Client) GetFabricCurrentChannelConfig(params *GetFabricCurrentChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricCurrentChannelConfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricCurrentChannelConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricCurrentChannelConfig",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/current-channel-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricCurrentChannelConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricCurrentChannelConfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricCurrentChannelConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricNetwork gets a fabric network by ID

Get details of a specific Fabric network
*/
func (a *Client) GetFabricNetwork(params *GetFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricNetwork",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricNetworkOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricNetworkByName gets a fabric network by slug

Get details of a specific Fabric network using its slug
*/
func (a *Client) GetFabricNetworkByName(params *GetFabricNetworkByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkByNameOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricNetworkByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricNetworkByName",
		Method:             "GET",
		PathPattern:        "/networks/fabric/by-name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricNetworkByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricNetworkByNameOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricNetworkByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricNetworkNodes gets network nodes

Get all nodes associated with a network
*/
func (a *Client) GetFabricNetworkNodes(params *GetFabricNetworkNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricNetworkNodesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricNetworkNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricNetworkNodes",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricNetworkNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricNetworkNodesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricNetworkNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricOrgConfig gets network configuration

Get the network configuration as YAML
*/
func (a *Client) GetFabricOrgConfig(params *GetFabricOrgConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrgConfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricOrgConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricOrgConfig",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/organizations/{orgId}/config",
		ProducesMediaTypes: []string{"text/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricOrgConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricOrgConfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricOrgConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricTransaction gets transaction details by transaction ID

Get detailed information about a specific transaction in a Fabric network
*/
func (a *Client) GetFabricTransaction(params *GetFabricTransactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricTransactionOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricTransaction",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/transactions/{txId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricTransactionOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricTransaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetworkMap gets network map

Get a map of all nodes (peers/orderers/validators) for a network, including endpoints and optionally health status.
*/
func (a *Client) GetNetworkMap(params *GetNetworkMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMapOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetNetworkMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkMap",
		Method:             "GET",
		PathPattern:        "/networks/fabric/{id}/map",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetNetworkMapOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportFabricNetwork imports a fabric network

Import an existing Fabric network using its genesis block
*/
func (a *Client) ImportFabricNetwork(params *ImportFabricNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricNetworkOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewImportFabricNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importFabricNetwork",
		Method:             "POST",
		PathPattern:        "/networks/fabric/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportFabricNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ImportFabricNetworkOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importFabricNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportFabricNetworkWithOrg imports a fabric network with organization

Import an existing Fabric network using organization details
*/
func (a *Client) ImportFabricNetworkWithOrg(params *ImportFabricNetworkWithOrgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricNetworkWithOrgOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewImportFabricNetworkWithOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importFabricNetworkWithOrg",
		Method:             "POST",
		PathPattern:        "/networks/fabric/import-with-org",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportFabricNetworkWithOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ImportFabricNetworkWithOrgOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importFabricNetworkWithOrg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JoinFabricOrderer joins orderer to fabric network

Join an orderer node to an existing Fabric network
*/
func (a *Client) JoinFabricOrderer(params *JoinFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JoinFabricOrdererOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewJoinFabricOrdererParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "joinFabricOrderer",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/orderers/{ordererId}/join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JoinFabricOrdererReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*JoinFabricOrdererOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for joinFabricOrderer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JoinFabricPeer joins peer to fabric network

Join a peer node to an existing Fabric network
*/
func (a *Client) JoinFabricPeer(params *JoinFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*JoinFabricPeerOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewJoinFabricPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "joinFabricPeer",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/peers/{peerId}/join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JoinFabricPeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*JoinFabricPeerOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for joinFabricPeer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFabricNetworks lists fabric networks

Get a paginated list of Fabric networks
*/
func (a *Client) ListFabricNetworks(params *ListFabricNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricNetworksOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListFabricNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFabricNetworks",
		Method:             "GET",
		PathPattern:        "/networks/fabric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFabricNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListFabricNetworksOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFabricNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadNetworkBlock reloads network config block

Reloads the current config block for a network
*/
func (a *Client) ReloadNetworkBlock(params *ReloadNetworkBlockParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReloadNetworkBlockOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewReloadNetworkBlockParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadNetworkBlock",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/reload-block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReloadNetworkBlockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ReloadNetworkBlockOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadNetworkBlock: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveFabricOrderer removes orderer from fabric network

Remove an orderer node from an existing Fabric network
*/
func (a *Client) RemoveFabricOrderer(params *RemoveFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFabricOrdererOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRemoveFabricOrdererParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeFabricOrderer",
		Method:             "DELETE",
		PathPattern:        "/networks/fabric/{id}/orderers/{ordererId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveFabricOrdererReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RemoveFabricOrdererOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeFabricOrderer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveFabricPeer removes peer from fabric network

Remove a peer node from an existing Fabric network
*/
func (a *Client) RemoveFabricPeer(params *RemoveFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveFabricPeerOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRemoveFabricPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeFabricPeer",
		Method:             "DELETE",
		PathPattern:        "/networks/fabric/{id}/peers/{peerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveFabricPeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RemoveFabricPeerOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeFabricPeer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetFabricAnchorPeers sets anchor peers for an organization

Set the anchor peers for an organization in a Fabric network
*/
func (a *Client) SetFabricAnchorPeers(params *SetFabricAnchorPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetFabricAnchorPeersOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSetFabricAnchorPeersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setFabricAnchorPeers",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/anchor-peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetFabricAnchorPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SetFabricAnchorPeersOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setFabricAnchorPeers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnjoinFabricOrderer unjoins orderer from fabric network

Remove an orderer node from a channel but keep it in the network
*/
func (a *Client) UnjoinFabricOrderer(params *UnjoinFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnjoinFabricOrdererOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUnjoinFabricOrdererParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unjoinFabricOrderer",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/orderers/{ordererId}/unjoin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnjoinFabricOrdererReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UnjoinFabricOrdererOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unjoinFabricOrderer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnjoinFabricPeer unjoins peer from fabric network

Remove a peer node from a channel but keep it in the network
*/
func (a *Client) UnjoinFabricPeer(params *UnjoinFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnjoinFabricPeerOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUnjoinFabricPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unjoinFabricPeer",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/peers/{peerId}/unjoin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnjoinFabricPeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UnjoinFabricPeerOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unjoinFabricPeer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateFabricChannelConfig prepares a config update for a fabric network

	Prepare a config update proposal for a Fabric network using the provided operations and signing organization IDs.

The signing_org_ids field specifies which organizations should be used to sign the config update.
The following operation types are supported:
- add_org: Add a new organization to the channel
- remove_org: Remove an organization from the channel
- update_org_msp: Update an organization's MSP configuration
- set_anchor_peers: Set anchor peers for an organization
- add_consenter: Add a new consenter to the orderer (etcdraft)
- remove_consenter: Remove a consenter from the orderer (etcdraft)
- update_consenter: Update a consenter in the orderer (etcdraft)
- add_bft_consenter: Add a new BFT consenter to the orderer
- remove_bft_consenter: Remove a BFT consenter from the orderer
- update_bft_consenter: Update a BFT consenter in the orderer
- update_bft_options: Update BFT consensus options
- update_etcd_raft_options: Update etcd raft options for the orderer
- update_batch_size: Update batch size for the orderer
- update_batch_timeout: Update batch timeout for the orderer
*/
func (a *Client) UpdateFabricChannelConfig(params *UpdateFabricChannelConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricChannelConfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateFabricChannelConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFabricChannelConfig",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/update-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateFabricChannelConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateFabricChannelConfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFabricChannelConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrgCRL updates organization c r l

Update the Certificate Revocation List (CRL) for an organization in the network
*/
func (a *Client) UpdateOrgCRL(params *UpdateOrgCRLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrgCRLOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateOrgCRLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrgCRL",
		Method:             "POST",
		PathPattern:        "/networks/fabric/{id}/organization-crl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateOrgCRLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateOrgCRLOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrgCRL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
