// Code generated by go-swagger; DO NOT EDIT.

package fabric_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateOrgCRLReader is a Reader for the UpdateOrgCRL structure.
type UpdateOrgCRLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrgCRLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrgCRLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateOrgCRLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOrgCRLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateOrgCRLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /networks/fabric/{id}/organization-crl] updateOrgCRL", response, response.Code())
	}
}

// NewUpdateOrgCRLOK creates a UpdateOrgCRLOK with default headers values
func NewUpdateOrgCRLOK() *UpdateOrgCRLOK {
	return &UpdateOrgCRLOK{}
}

/*
UpdateOrgCRLOK describes a response with status code 200, with default header values.

OK
*/
type UpdateOrgCRLOK struct {
	Payload *models.HTTPUpdateOrganizationCRLResponse
}

// IsSuccess returns true when this update org c r l o k response has a 2xx status code
func (o *UpdateOrgCRLOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update org c r l o k response has a 3xx status code
func (o *UpdateOrgCRLOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org c r l o k response has a 4xx status code
func (o *UpdateOrgCRLOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update org c r l o k response has a 5xx status code
func (o *UpdateOrgCRLOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update org c r l o k response a status code equal to that given
func (o *UpdateOrgCRLOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update org c r l o k response
func (o *UpdateOrgCRLOK) Code() int {
	return 200
}

func (o *UpdateOrgCRLOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLOK %s", 200, payload)
}

func (o *UpdateOrgCRLOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLOK %s", 200, payload)
}

func (o *UpdateOrgCRLOK) GetPayload() *models.HTTPUpdateOrganizationCRLResponse {
	return o.Payload
}

func (o *UpdateOrgCRLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPUpdateOrganizationCRLResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateOrgCRLBadRequest creates a UpdateOrgCRLBadRequest with default headers values
func NewUpdateOrgCRLBadRequest() *UpdateOrgCRLBadRequest {
	return &UpdateOrgCRLBadRequest{}
}

/*
UpdateOrgCRLBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateOrgCRLBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this update org c r l bad request response has a 2xx status code
func (o *UpdateOrgCRLBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org c r l bad request response has a 3xx status code
func (o *UpdateOrgCRLBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org c r l bad request response has a 4xx status code
func (o *UpdateOrgCRLBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update org c r l bad request response has a 5xx status code
func (o *UpdateOrgCRLBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update org c r l bad request response a status code equal to that given
func (o *UpdateOrgCRLBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update org c r l bad request response
func (o *UpdateOrgCRLBadRequest) Code() int {
	return 400
}

func (o *UpdateOrgCRLBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLBadRequest %s", 400, payload)
}

func (o *UpdateOrgCRLBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLBadRequest %s", 400, payload)
}

func (o *UpdateOrgCRLBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateOrgCRLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateOrgCRLNotFound creates a UpdateOrgCRLNotFound with default headers values
func NewUpdateOrgCRLNotFound() *UpdateOrgCRLNotFound {
	return &UpdateOrgCRLNotFound{}
}

/*
UpdateOrgCRLNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateOrgCRLNotFound struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this update org c r l not found response has a 2xx status code
func (o *UpdateOrgCRLNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org c r l not found response has a 3xx status code
func (o *UpdateOrgCRLNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org c r l not found response has a 4xx status code
func (o *UpdateOrgCRLNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update org c r l not found response has a 5xx status code
func (o *UpdateOrgCRLNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update org c r l not found response a status code equal to that given
func (o *UpdateOrgCRLNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update org c r l not found response
func (o *UpdateOrgCRLNotFound) Code() int {
	return 404
}

func (o *UpdateOrgCRLNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLNotFound %s", 404, payload)
}

func (o *UpdateOrgCRLNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLNotFound %s", 404, payload)
}

func (o *UpdateOrgCRLNotFound) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateOrgCRLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateOrgCRLInternalServerError creates a UpdateOrgCRLInternalServerError with default headers values
func NewUpdateOrgCRLInternalServerError() *UpdateOrgCRLInternalServerError {
	return &UpdateOrgCRLInternalServerError{}
}

/*
UpdateOrgCRLInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateOrgCRLInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this update org c r l internal server error response has a 2xx status code
func (o *UpdateOrgCRLInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org c r l internal server error response has a 3xx status code
func (o *UpdateOrgCRLInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org c r l internal server error response has a 4xx status code
func (o *UpdateOrgCRLInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update org c r l internal server error response has a 5xx status code
func (o *UpdateOrgCRLInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update org c r l internal server error response a status code equal to that given
func (o *UpdateOrgCRLInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update org c r l internal server error response
func (o *UpdateOrgCRLInternalServerError) Code() int {
	return 500
}

func (o *UpdateOrgCRLInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLInternalServerError %s", 500, payload)
}

func (o *UpdateOrgCRLInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/organization-crl][%d] updateOrgCRLInternalServerError %s", 500, payload)
}

func (o *UpdateOrgCRLInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateOrgCRLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
