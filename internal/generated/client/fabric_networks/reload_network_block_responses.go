// Code generated by go-swagger; DO NOT EDIT.

package fabric_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ReloadNetworkBlockReader is a Reader for the ReloadNetworkBlock structure.
type ReloadNetworkBlockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReloadNetworkBlockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewReloadNetworkBlockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReloadNetworkBlockBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReloadNetworkBlockNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReloadNetworkBlockInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /networks/fabric/{id}/reload-block] reloadNetworkBlock", response, response.Code())
	}
}

// NewReloadNetworkBlockOK creates a ReloadNetworkBlockOK with default headers values
func NewReloadNetworkBlockOK() *ReloadNetworkBlockOK {
	return &ReloadNetworkBlockOK{}
}

/*
ReloadNetworkBlockOK describes a response with status code 200, with default header values.

OK
*/
type ReloadNetworkBlockOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this reload network block o k response has a 2xx status code
func (o *ReloadNetworkBlockOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reload network block o k response has a 3xx status code
func (o *ReloadNetworkBlockOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload network block o k response has a 4xx status code
func (o *ReloadNetworkBlockOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reload network block o k response has a 5xx status code
func (o *ReloadNetworkBlockOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reload network block o k response a status code equal to that given
func (o *ReloadNetworkBlockOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reload network block o k response
func (o *ReloadNetworkBlockOK) Code() int {
	return 200
}

func (o *ReloadNetworkBlockOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockOK %s", 200, payload)
}

func (o *ReloadNetworkBlockOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockOK %s", 200, payload)
}

func (o *ReloadNetworkBlockOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *ReloadNetworkBlockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReloadNetworkBlockBadRequest creates a ReloadNetworkBlockBadRequest with default headers values
func NewReloadNetworkBlockBadRequest() *ReloadNetworkBlockBadRequest {
	return &ReloadNetworkBlockBadRequest{}
}

/*
ReloadNetworkBlockBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReloadNetworkBlockBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this reload network block bad request response has a 2xx status code
func (o *ReloadNetworkBlockBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload network block bad request response has a 3xx status code
func (o *ReloadNetworkBlockBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload network block bad request response has a 4xx status code
func (o *ReloadNetworkBlockBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload network block bad request response has a 5xx status code
func (o *ReloadNetworkBlockBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this reload network block bad request response a status code equal to that given
func (o *ReloadNetworkBlockBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the reload network block bad request response
func (o *ReloadNetworkBlockBadRequest) Code() int {
	return 400
}

func (o *ReloadNetworkBlockBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockBadRequest %s", 400, payload)
}

func (o *ReloadNetworkBlockBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockBadRequest %s", 400, payload)
}

func (o *ReloadNetworkBlockBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *ReloadNetworkBlockBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReloadNetworkBlockNotFound creates a ReloadNetworkBlockNotFound with default headers values
func NewReloadNetworkBlockNotFound() *ReloadNetworkBlockNotFound {
	return &ReloadNetworkBlockNotFound{}
}

/*
ReloadNetworkBlockNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReloadNetworkBlockNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this reload network block not found response has a 2xx status code
func (o *ReloadNetworkBlockNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload network block not found response has a 3xx status code
func (o *ReloadNetworkBlockNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload network block not found response has a 4xx status code
func (o *ReloadNetworkBlockNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reload network block not found response has a 5xx status code
func (o *ReloadNetworkBlockNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reload network block not found response a status code equal to that given
func (o *ReloadNetworkBlockNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reload network block not found response
func (o *ReloadNetworkBlockNotFound) Code() int {
	return 404
}

func (o *ReloadNetworkBlockNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockNotFound %s", 404, payload)
}

func (o *ReloadNetworkBlockNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockNotFound %s", 404, payload)
}

func (o *ReloadNetworkBlockNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *ReloadNetworkBlockNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReloadNetworkBlockInternalServerError creates a ReloadNetworkBlockInternalServerError with default headers values
func NewReloadNetworkBlockInternalServerError() *ReloadNetworkBlockInternalServerError {
	return &ReloadNetworkBlockInternalServerError{}
}

/*
ReloadNetworkBlockInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReloadNetworkBlockInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this reload network block internal server error response has a 2xx status code
func (o *ReloadNetworkBlockInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reload network block internal server error response has a 3xx status code
func (o *ReloadNetworkBlockInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reload network block internal server error response has a 4xx status code
func (o *ReloadNetworkBlockInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reload network block internal server error response has a 5xx status code
func (o *ReloadNetworkBlockInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reload network block internal server error response a status code equal to that given
func (o *ReloadNetworkBlockInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reload network block internal server error response
func (o *ReloadNetworkBlockInternalServerError) Code() int {
	return 500
}

func (o *ReloadNetworkBlockInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockInternalServerError %s", 500, payload)
}

func (o *ReloadNetworkBlockInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/reload-block][%d] reloadNetworkBlockInternalServerError %s", 500, payload)
}

func (o *ReloadNetworkBlockInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *ReloadNetworkBlockInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
