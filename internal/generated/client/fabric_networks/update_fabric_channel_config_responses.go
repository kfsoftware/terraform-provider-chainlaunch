// Code generated by go-swagger; DO NOT EDIT.

package fabric_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateFabricChannelConfigReader is a Reader for the UpdateFabricChannelConfig structure.
type UpdateFabricChannelConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFabricChannelConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFabricChannelConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateFabricChannelConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateFabricChannelConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /networks/fabric/{id}/update-config] updateFabricChannelConfig", response, response.Code())
	}
}

// NewUpdateFabricChannelConfigOK creates a UpdateFabricChannelConfigOK with default headers values
func NewUpdateFabricChannelConfigOK() *UpdateFabricChannelConfigOK {
	return &UpdateFabricChannelConfigOK{}
}

/*
UpdateFabricChannelConfigOK describes a response with status code 200, with default header values.

OK
*/
type UpdateFabricChannelConfigOK struct {
	Payload *models.HTTPConfigUpdateResponse
}

// IsSuccess returns true when this update fabric channel config o k response has a 2xx status code
func (o *UpdateFabricChannelConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update fabric channel config o k response has a 3xx status code
func (o *UpdateFabricChannelConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric channel config o k response has a 4xx status code
func (o *UpdateFabricChannelConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update fabric channel config o k response has a 5xx status code
func (o *UpdateFabricChannelConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update fabric channel config o k response a status code equal to that given
func (o *UpdateFabricChannelConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update fabric channel config o k response
func (o *UpdateFabricChannelConfigOK) Code() int {
	return 200
}

func (o *UpdateFabricChannelConfigOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigOK %s", 200, payload)
}

func (o *UpdateFabricChannelConfigOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigOK %s", 200, payload)
}

func (o *UpdateFabricChannelConfigOK) GetPayload() *models.HTTPConfigUpdateResponse {
	return o.Payload
}

func (o *UpdateFabricChannelConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPConfigUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateFabricChannelConfigBadRequest creates a UpdateFabricChannelConfigBadRequest with default headers values
func NewUpdateFabricChannelConfigBadRequest() *UpdateFabricChannelConfigBadRequest {
	return &UpdateFabricChannelConfigBadRequest{}
}

/*
UpdateFabricChannelConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateFabricChannelConfigBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this update fabric channel config bad request response has a 2xx status code
func (o *UpdateFabricChannelConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update fabric channel config bad request response has a 3xx status code
func (o *UpdateFabricChannelConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric channel config bad request response has a 4xx status code
func (o *UpdateFabricChannelConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update fabric channel config bad request response has a 5xx status code
func (o *UpdateFabricChannelConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update fabric channel config bad request response a status code equal to that given
func (o *UpdateFabricChannelConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update fabric channel config bad request response
func (o *UpdateFabricChannelConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateFabricChannelConfigBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigBadRequest %s", 400, payload)
}

func (o *UpdateFabricChannelConfigBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigBadRequest %s", 400, payload)
}

func (o *UpdateFabricChannelConfigBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateFabricChannelConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateFabricChannelConfigInternalServerError creates a UpdateFabricChannelConfigInternalServerError with default headers values
func NewUpdateFabricChannelConfigInternalServerError() *UpdateFabricChannelConfigInternalServerError {
	return &UpdateFabricChannelConfigInternalServerError{}
}

/*
UpdateFabricChannelConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateFabricChannelConfigInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this update fabric channel config internal server error response has a 2xx status code
func (o *UpdateFabricChannelConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update fabric channel config internal server error response has a 3xx status code
func (o *UpdateFabricChannelConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update fabric channel config internal server error response has a 4xx status code
func (o *UpdateFabricChannelConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update fabric channel config internal server error response has a 5xx status code
func (o *UpdateFabricChannelConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update fabric channel config internal server error response a status code equal to that given
func (o *UpdateFabricChannelConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update fabric channel config internal server error response
func (o *UpdateFabricChannelConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateFabricChannelConfigInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigInternalServerError %s", 500, payload)
}

func (o *UpdateFabricChannelConfigInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/fabric/{id}/update-config][%d] updateFabricChannelConfigInternalServerError %s", 500, payload)
}

func (o *UpdateFabricChannelConfigInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateFabricChannelConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
