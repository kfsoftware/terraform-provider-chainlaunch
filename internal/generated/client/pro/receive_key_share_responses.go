// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ReceiveKeyShareReader is a Reader for the ReceiveKeyShare structure.
type ReceiveKeyShareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReceiveKeyShareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewReceiveKeyShareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReceiveKeyShareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReceiveKeyShareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/receive/key] receiveKeyShare", response, response.Code())
	}
}

// NewReceiveKeyShareOK creates a ReceiveKeyShareOK with default headers values
func NewReceiveKeyShareOK() *ReceiveKeyShareOK {
	return &ReceiveKeyShareOK{}
}

/*
ReceiveKeyShareOK describes a response with status code 200, with default header values.

OK
*/
type ReceiveKeyShareOK struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this receive key share o k response has a 2xx status code
func (o *ReceiveKeyShareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this receive key share o k response has a 3xx status code
func (o *ReceiveKeyShareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive key share o k response has a 4xx status code
func (o *ReceiveKeyShareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive key share o k response has a 5xx status code
func (o *ReceiveKeyShareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this receive key share o k response a status code equal to that given
func (o *ReceiveKeyShareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the receive key share o k response
func (o *ReceiveKeyShareOK) Code() int {
	return 200
}

func (o *ReceiveKeyShareOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareOK %s", 200, payload)
}

func (o *ReceiveKeyShareOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareOK %s", 200, payload)
}

func (o *ReceiveKeyShareOK) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ReceiveKeyShareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveKeyShareBadRequest creates a ReceiveKeyShareBadRequest with default headers values
func NewReceiveKeyShareBadRequest() *ReceiveKeyShareBadRequest {
	return &ReceiveKeyShareBadRequest{}
}

/*
ReceiveKeyShareBadRequest describes a response with status code 400, with default header values.

invalid request body
*/
type ReceiveKeyShareBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive key share bad request response has a 2xx status code
func (o *ReceiveKeyShareBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive key share bad request response has a 3xx status code
func (o *ReceiveKeyShareBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive key share bad request response has a 4xx status code
func (o *ReceiveKeyShareBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive key share bad request response has a 5xx status code
func (o *ReceiveKeyShareBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this receive key share bad request response a status code equal to that given
func (o *ReceiveKeyShareBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the receive key share bad request response
func (o *ReceiveKeyShareBadRequest) Code() int {
	return 400
}

func (o *ReceiveKeyShareBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareBadRequest %s", 400, payload)
}

func (o *ReceiveKeyShareBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareBadRequest %s", 400, payload)
}

func (o *ReceiveKeyShareBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveKeyShareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveKeyShareInternalServerError creates a ReceiveKeyShareInternalServerError with default headers values
func NewReceiveKeyShareInternalServerError() *ReceiveKeyShareInternalServerError {
	return &ReceiveKeyShareInternalServerError{}
}

/*
ReceiveKeyShareInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ReceiveKeyShareInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive key share internal server error response has a 2xx status code
func (o *ReceiveKeyShareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive key share internal server error response has a 3xx status code
func (o *ReceiveKeyShareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive key share internal server error response has a 4xx status code
func (o *ReceiveKeyShareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive key share internal server error response has a 5xx status code
func (o *ReceiveKeyShareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this receive key share internal server error response a status code equal to that given
func (o *ReceiveKeyShareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the receive key share internal server error response
func (o *ReceiveKeyShareInternalServerError) Code() int {
	return 500
}

func (o *ReceiveKeyShareInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareInternalServerError %s", 500, payload)
}

func (o *ReceiveKeyShareInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/key][%d] receiveKeyShareInternalServerError %s", 500, payload)
}

func (o *ReceiveKeyShareInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveKeyShareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
