// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ReceiveChaincodeShareReader is a Reader for the ReceiveChaincodeShare structure.
type ReceiveChaincodeShareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReceiveChaincodeShareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewReceiveChaincodeShareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReceiveChaincodeShareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReceiveChaincodeShareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/receive/chaincode] receiveChaincodeShare", response, response.Code())
	}
}

// NewReceiveChaincodeShareOK creates a ReceiveChaincodeShareOK with default headers values
func NewReceiveChaincodeShareOK() *ReceiveChaincodeShareOK {
	return &ReceiveChaincodeShareOK{}
}

/*
ReceiveChaincodeShareOK describes a response with status code 200, with default header values.

OK
*/
type ReceiveChaincodeShareOK struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this receive chaincode share o k response has a 2xx status code
func (o *ReceiveChaincodeShareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this receive chaincode share o k response has a 3xx status code
func (o *ReceiveChaincodeShareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive chaincode share o k response has a 4xx status code
func (o *ReceiveChaincodeShareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive chaincode share o k response has a 5xx status code
func (o *ReceiveChaincodeShareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this receive chaincode share o k response a status code equal to that given
func (o *ReceiveChaincodeShareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the receive chaincode share o k response
func (o *ReceiveChaincodeShareOK) Code() int {
	return 200
}

func (o *ReceiveChaincodeShareOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareOK %s", 200, payload)
}

func (o *ReceiveChaincodeShareOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareOK %s", 200, payload)
}

func (o *ReceiveChaincodeShareOK) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ReceiveChaincodeShareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveChaincodeShareBadRequest creates a ReceiveChaincodeShareBadRequest with default headers values
func NewReceiveChaincodeShareBadRequest() *ReceiveChaincodeShareBadRequest {
	return &ReceiveChaincodeShareBadRequest{}
}

/*
ReceiveChaincodeShareBadRequest describes a response with status code 400, with default header values.

invalid request body
*/
type ReceiveChaincodeShareBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive chaincode share bad request response has a 2xx status code
func (o *ReceiveChaincodeShareBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive chaincode share bad request response has a 3xx status code
func (o *ReceiveChaincodeShareBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive chaincode share bad request response has a 4xx status code
func (o *ReceiveChaincodeShareBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive chaincode share bad request response has a 5xx status code
func (o *ReceiveChaincodeShareBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this receive chaincode share bad request response a status code equal to that given
func (o *ReceiveChaincodeShareBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the receive chaincode share bad request response
func (o *ReceiveChaincodeShareBadRequest) Code() int {
	return 400
}

func (o *ReceiveChaincodeShareBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareBadRequest %s", 400, payload)
}

func (o *ReceiveChaincodeShareBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareBadRequest %s", 400, payload)
}

func (o *ReceiveChaincodeShareBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveChaincodeShareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveChaincodeShareInternalServerError creates a ReceiveChaincodeShareInternalServerError with default headers values
func NewReceiveChaincodeShareInternalServerError() *ReceiveChaincodeShareInternalServerError {
	return &ReceiveChaincodeShareInternalServerError{}
}

/*
ReceiveChaincodeShareInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ReceiveChaincodeShareInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive chaincode share internal server error response has a 2xx status code
func (o *ReceiveChaincodeShareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive chaincode share internal server error response has a 3xx status code
func (o *ReceiveChaincodeShareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive chaincode share internal server error response has a 4xx status code
func (o *ReceiveChaincodeShareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive chaincode share internal server error response has a 5xx status code
func (o *ReceiveChaincodeShareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this receive chaincode share internal server error response a status code equal to that given
func (o *ReceiveChaincodeShareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the receive chaincode share internal server error response
func (o *ReceiveChaincodeShareInternalServerError) Code() int {
	return 500
}

func (o *ReceiveChaincodeShareInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareInternalServerError %s", 500, payload)
}

func (o *ReceiveChaincodeShareInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/chaincode][%d] receiveChaincodeShareInternalServerError %s", 500, payload)
}

func (o *ReceiveChaincodeShareInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveChaincodeShareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
