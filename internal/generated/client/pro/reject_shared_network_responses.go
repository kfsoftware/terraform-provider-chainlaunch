// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RejectSharedNetworkReader is a Reader for the RejectSharedNetwork structure.
type RejectSharedNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectSharedNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRejectSharedNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRejectSharedNetworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectSharedNetworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRejectSharedNetworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/shared-networks/{shareId}/reject] rejectSharedNetwork", response, response.Code())
	}
}

// NewRejectSharedNetworkOK creates a RejectSharedNetworkOK with default headers values
func NewRejectSharedNetworkOK() *RejectSharedNetworkOK {
	return &RejectSharedNetworkOK{}
}

/*
RejectSharedNetworkOK describes a response with status code 200, with default header values.

OK
*/
type RejectSharedNetworkOK struct {
	Payload *models.ProRejectSharedNetworkResponse
}

// IsSuccess returns true when this reject shared network o k response has a 2xx status code
func (o *RejectSharedNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject shared network o k response has a 3xx status code
func (o *RejectSharedNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject shared network o k response has a 4xx status code
func (o *RejectSharedNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject shared network o k response has a 5xx status code
func (o *RejectSharedNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reject shared network o k response a status code equal to that given
func (o *RejectSharedNetworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reject shared network o k response
func (o *RejectSharedNetworkOK) Code() int {
	return 200
}

func (o *RejectSharedNetworkOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkOK %s", 200, payload)
}

func (o *RejectSharedNetworkOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkOK %s", 200, payload)
}

func (o *RejectSharedNetworkOK) GetPayload() *models.ProRejectSharedNetworkResponse {
	return o.Payload
}

func (o *RejectSharedNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProRejectSharedNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRejectSharedNetworkBadRequest creates a RejectSharedNetworkBadRequest with default headers values
func NewRejectSharedNetworkBadRequest() *RejectSharedNetworkBadRequest {
	return &RejectSharedNetworkBadRequest{}
}

/*
RejectSharedNetworkBadRequest describes a response with status code 400, with default header values.

invalid share ID
*/
type RejectSharedNetworkBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this reject shared network bad request response has a 2xx status code
func (o *RejectSharedNetworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject shared network bad request response has a 3xx status code
func (o *RejectSharedNetworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject shared network bad request response has a 4xx status code
func (o *RejectSharedNetworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject shared network bad request response has a 5xx status code
func (o *RejectSharedNetworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this reject shared network bad request response a status code equal to that given
func (o *RejectSharedNetworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the reject shared network bad request response
func (o *RejectSharedNetworkBadRequest) Code() int {
	return 400
}

func (o *RejectSharedNetworkBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkBadRequest %s", 400, payload)
}

func (o *RejectSharedNetworkBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkBadRequest %s", 400, payload)
}

func (o *RejectSharedNetworkBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RejectSharedNetworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRejectSharedNetworkNotFound creates a RejectSharedNetworkNotFound with default headers values
func NewRejectSharedNetworkNotFound() *RejectSharedNetworkNotFound {
	return &RejectSharedNetworkNotFound{}
}

/*
RejectSharedNetworkNotFound describes a response with status code 404, with default header values.

share not found
*/
type RejectSharedNetworkNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this reject shared network not found response has a 2xx status code
func (o *RejectSharedNetworkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject shared network not found response has a 3xx status code
func (o *RejectSharedNetworkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject shared network not found response has a 4xx status code
func (o *RejectSharedNetworkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject shared network not found response has a 5xx status code
func (o *RejectSharedNetworkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reject shared network not found response a status code equal to that given
func (o *RejectSharedNetworkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reject shared network not found response
func (o *RejectSharedNetworkNotFound) Code() int {
	return 404
}

func (o *RejectSharedNetworkNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkNotFound %s", 404, payload)
}

func (o *RejectSharedNetworkNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkNotFound %s", 404, payload)
}

func (o *RejectSharedNetworkNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RejectSharedNetworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRejectSharedNetworkInternalServerError creates a RejectSharedNetworkInternalServerError with default headers values
func NewRejectSharedNetworkInternalServerError() *RejectSharedNetworkInternalServerError {
	return &RejectSharedNetworkInternalServerError{}
}

/*
RejectSharedNetworkInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type RejectSharedNetworkInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this reject shared network internal server error response has a 2xx status code
func (o *RejectSharedNetworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject shared network internal server error response has a 3xx status code
func (o *RejectSharedNetworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject shared network internal server error response has a 4xx status code
func (o *RejectSharedNetworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject shared network internal server error response has a 5xx status code
func (o *RejectSharedNetworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reject shared network internal server error response a status code equal to that given
func (o *RejectSharedNetworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reject shared network internal server error response
func (o *RejectSharedNetworkInternalServerError) Code() int {
	return 500
}

func (o *RejectSharedNetworkInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkInternalServerError %s", 500, payload)
}

func (o *RejectSharedNetworkInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/reject][%d] rejectSharedNetworkInternalServerError %s", 500, payload)
}

func (o *RejectSharedNetworkInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RejectSharedNetworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
