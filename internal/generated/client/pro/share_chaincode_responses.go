// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ShareChaincodeReader is a Reader for the ShareChaincode structure.
type ShareChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShareChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewShareChaincodeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewShareChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewShareChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/sharing/chaincode] shareChaincode", response, response.Code())
	}
}

// NewShareChaincodeCreated creates a ShareChaincodeCreated with default headers values
func NewShareChaincodeCreated() *ShareChaincodeCreated {
	return &ShareChaincodeCreated{}
}

/*
ShareChaincodeCreated describes a response with status code 201, with default header values.

Created
*/
type ShareChaincodeCreated struct {
	Payload *models.ProChaincodeShareResponse
}

// IsSuccess returns true when this share chaincode created response has a 2xx status code
func (o *ShareChaincodeCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this share chaincode created response has a 3xx status code
func (o *ShareChaincodeCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode created response has a 4xx status code
func (o *ShareChaincodeCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this share chaincode created response has a 5xx status code
func (o *ShareChaincodeCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this share chaincode created response a status code equal to that given
func (o *ShareChaincodeCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the share chaincode created response
func (o *ShareChaincodeCreated) Code() int {
	return 201
}

func (o *ShareChaincodeCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeCreated %s", 201, payload)
}

func (o *ShareChaincodeCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeCreated %s", 201, payload)
}

func (o *ShareChaincodeCreated) GetPayload() *models.ProChaincodeShareResponse {
	return o.Payload
}

func (o *ShareChaincodeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProChaincodeShareResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareChaincodeBadRequest creates a ShareChaincodeBadRequest with default headers values
func NewShareChaincodeBadRequest() *ShareChaincodeBadRequest {
	return &ShareChaincodeBadRequest{}
}

/*
ShareChaincodeBadRequest describes a response with status code 400, with default header values.

invalid request body
*/
type ShareChaincodeBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share chaincode bad request response has a 2xx status code
func (o *ShareChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share chaincode bad request response has a 3xx status code
func (o *ShareChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode bad request response has a 4xx status code
func (o *ShareChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this share chaincode bad request response has a 5xx status code
func (o *ShareChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this share chaincode bad request response a status code equal to that given
func (o *ShareChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the share chaincode bad request response
func (o *ShareChaincodeBadRequest) Code() int {
	return 400
}

func (o *ShareChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeBadRequest %s", 400, payload)
}

func (o *ShareChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeBadRequest %s", 400, payload)
}

func (o *ShareChaincodeBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareChaincodeInternalServerError creates a ShareChaincodeInternalServerError with default headers values
func NewShareChaincodeInternalServerError() *ShareChaincodeInternalServerError {
	return &ShareChaincodeInternalServerError{}
}

/*
ShareChaincodeInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ShareChaincodeInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share chaincode internal server error response has a 2xx status code
func (o *ShareChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share chaincode internal server error response has a 3xx status code
func (o *ShareChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode internal server error response has a 4xx status code
func (o *ShareChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this share chaincode internal server error response has a 5xx status code
func (o *ShareChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this share chaincode internal server error response a status code equal to that given
func (o *ShareChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the share chaincode internal server error response
func (o *ShareChaincodeInternalServerError) Code() int {
	return 500
}

func (o *ShareChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeInternalServerError %s", 500, payload)
}

func (o *ShareChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/sharing/chaincode][%d] shareChaincodeInternalServerError %s", 500, payload)
}

func (o *ShareChaincodeInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
