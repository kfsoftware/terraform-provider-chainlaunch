// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ReceiveNetworkShareReader is a Reader for the ReceiveNetworkShare structure.
type ReceiveNetworkShareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReceiveNetworkShareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewReceiveNetworkShareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReceiveNetworkShareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReceiveNetworkShareInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/receive/network] receiveNetworkShare", response, response.Code())
	}
}

// NewReceiveNetworkShareOK creates a ReceiveNetworkShareOK with default headers values
func NewReceiveNetworkShareOK() *ReceiveNetworkShareOK {
	return &ReceiveNetworkShareOK{}
}

/*
ReceiveNetworkShareOK describes a response with status code 200, with default header values.

OK
*/
type ReceiveNetworkShareOK struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this receive network share o k response has a 2xx status code
func (o *ReceiveNetworkShareOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this receive network share o k response has a 3xx status code
func (o *ReceiveNetworkShareOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive network share o k response has a 4xx status code
func (o *ReceiveNetworkShareOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive network share o k response has a 5xx status code
func (o *ReceiveNetworkShareOK) IsServerError() bool {
	return false
}

// IsCode returns true when this receive network share o k response a status code equal to that given
func (o *ReceiveNetworkShareOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the receive network share o k response
func (o *ReceiveNetworkShareOK) Code() int {
	return 200
}

func (o *ReceiveNetworkShareOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareOK %s", 200, payload)
}

func (o *ReceiveNetworkShareOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareOK %s", 200, payload)
}

func (o *ReceiveNetworkShareOK) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ReceiveNetworkShareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveNetworkShareBadRequest creates a ReceiveNetworkShareBadRequest with default headers values
func NewReceiveNetworkShareBadRequest() *ReceiveNetworkShareBadRequest {
	return &ReceiveNetworkShareBadRequest{}
}

/*
ReceiveNetworkShareBadRequest describes a response with status code 400, with default header values.

invalid request body
*/
type ReceiveNetworkShareBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive network share bad request response has a 2xx status code
func (o *ReceiveNetworkShareBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive network share bad request response has a 3xx status code
func (o *ReceiveNetworkShareBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive network share bad request response has a 4xx status code
func (o *ReceiveNetworkShareBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this receive network share bad request response has a 5xx status code
func (o *ReceiveNetworkShareBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this receive network share bad request response a status code equal to that given
func (o *ReceiveNetworkShareBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the receive network share bad request response
func (o *ReceiveNetworkShareBadRequest) Code() int {
	return 400
}

func (o *ReceiveNetworkShareBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareBadRequest %s", 400, payload)
}

func (o *ReceiveNetworkShareBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareBadRequest %s", 400, payload)
}

func (o *ReceiveNetworkShareBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveNetworkShareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReceiveNetworkShareInternalServerError creates a ReceiveNetworkShareInternalServerError with default headers values
func NewReceiveNetworkShareInternalServerError() *ReceiveNetworkShareInternalServerError {
	return &ReceiveNetworkShareInternalServerError{}
}

/*
ReceiveNetworkShareInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type ReceiveNetworkShareInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this receive network share internal server error response has a 2xx status code
func (o *ReceiveNetworkShareInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this receive network share internal server error response has a 3xx status code
func (o *ReceiveNetworkShareInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this receive network share internal server error response has a 4xx status code
func (o *ReceiveNetworkShareInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this receive network share internal server error response has a 5xx status code
func (o *ReceiveNetworkShareInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this receive network share internal server error response a status code equal to that given
func (o *ReceiveNetworkShareInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the receive network share internal server error response
func (o *ReceiveNetworkShareInternalServerError) Code() int {
	return 500
}

func (o *ReceiveNetworkShareInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareInternalServerError %s", 500, payload)
}

func (o *ReceiveNetworkShareInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/receive/network][%d] receiveNetworkShareInternalServerError %s", 500, payload)
}

func (o *ReceiveNetworkShareInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReceiveNetworkShareInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
