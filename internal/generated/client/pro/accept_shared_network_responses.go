// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// AcceptSharedNetworkReader is a Reader for the AcceptSharedNetwork structure.
type AcceptSharedNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptSharedNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptSharedNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptSharedNetworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptSharedNetworkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAcceptSharedNetworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/shared-networks/{shareId}/accept] acceptSharedNetwork", response, response.Code())
	}
}

// NewAcceptSharedNetworkOK creates a AcceptSharedNetworkOK with default headers values
func NewAcceptSharedNetworkOK() *AcceptSharedNetworkOK {
	return &AcceptSharedNetworkOK{}
}

/*
AcceptSharedNetworkOK describes a response with status code 200, with default header values.

OK
*/
type AcceptSharedNetworkOK struct {
	Payload *models.ProAcceptSharedNetworkResponse
}

// IsSuccess returns true when this accept shared network o k response has a 2xx status code
func (o *AcceptSharedNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept shared network o k response has a 3xx status code
func (o *AcceptSharedNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept shared network o k response has a 4xx status code
func (o *AcceptSharedNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept shared network o k response has a 5xx status code
func (o *AcceptSharedNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept shared network o k response a status code equal to that given
func (o *AcceptSharedNetworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the accept shared network o k response
func (o *AcceptSharedNetworkOK) Code() int {
	return 200
}

func (o *AcceptSharedNetworkOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkOK %s", 200, payload)
}

func (o *AcceptSharedNetworkOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkOK %s", 200, payload)
}

func (o *AcceptSharedNetworkOK) GetPayload() *models.ProAcceptSharedNetworkResponse {
	return o.Payload
}

func (o *AcceptSharedNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProAcceptSharedNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptSharedNetworkBadRequest creates a AcceptSharedNetworkBadRequest with default headers values
func NewAcceptSharedNetworkBadRequest() *AcceptSharedNetworkBadRequest {
	return &AcceptSharedNetworkBadRequest{}
}

/*
AcceptSharedNetworkBadRequest describes a response with status code 400, with default header values.

invalid share ID
*/
type AcceptSharedNetworkBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept shared network bad request response has a 2xx status code
func (o *AcceptSharedNetworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept shared network bad request response has a 3xx status code
func (o *AcceptSharedNetworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept shared network bad request response has a 4xx status code
func (o *AcceptSharedNetworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept shared network bad request response has a 5xx status code
func (o *AcceptSharedNetworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this accept shared network bad request response a status code equal to that given
func (o *AcceptSharedNetworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the accept shared network bad request response
func (o *AcceptSharedNetworkBadRequest) Code() int {
	return 400
}

func (o *AcceptSharedNetworkBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkBadRequest %s", 400, payload)
}

func (o *AcceptSharedNetworkBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkBadRequest %s", 400, payload)
}

func (o *AcceptSharedNetworkBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptSharedNetworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptSharedNetworkNotFound creates a AcceptSharedNetworkNotFound with default headers values
func NewAcceptSharedNetworkNotFound() *AcceptSharedNetworkNotFound {
	return &AcceptSharedNetworkNotFound{}
}

/*
AcceptSharedNetworkNotFound describes a response with status code 404, with default header values.

share not found
*/
type AcceptSharedNetworkNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept shared network not found response has a 2xx status code
func (o *AcceptSharedNetworkNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept shared network not found response has a 3xx status code
func (o *AcceptSharedNetworkNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept shared network not found response has a 4xx status code
func (o *AcceptSharedNetworkNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept shared network not found response has a 5xx status code
func (o *AcceptSharedNetworkNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this accept shared network not found response a status code equal to that given
func (o *AcceptSharedNetworkNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the accept shared network not found response
func (o *AcceptSharedNetworkNotFound) Code() int {
	return 404
}

func (o *AcceptSharedNetworkNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkNotFound %s", 404, payload)
}

func (o *AcceptSharedNetworkNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkNotFound %s", 404, payload)
}

func (o *AcceptSharedNetworkNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptSharedNetworkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptSharedNetworkInternalServerError creates a AcceptSharedNetworkInternalServerError with default headers values
func NewAcceptSharedNetworkInternalServerError() *AcceptSharedNetworkInternalServerError {
	return &AcceptSharedNetworkInternalServerError{}
}

/*
AcceptSharedNetworkInternalServerError describes a response with status code 500, with default header values.

internal error
*/
type AcceptSharedNetworkInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept shared network internal server error response has a 2xx status code
func (o *AcceptSharedNetworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept shared network internal server error response has a 3xx status code
func (o *AcceptSharedNetworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept shared network internal server error response has a 4xx status code
func (o *AcceptSharedNetworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept shared network internal server error response has a 5xx status code
func (o *AcceptSharedNetworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this accept shared network internal server error response a status code equal to that given
func (o *AcceptSharedNetworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the accept shared network internal server error response
func (o *AcceptSharedNetworkInternalServerError) Code() int {
	return 500
}

func (o *AcceptSharedNetworkInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkInternalServerError %s", 500, payload)
}

func (o *AcceptSharedNetworkInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/shared-networks/{shareId}/accept][%d] acceptSharedNetworkInternalServerError %s", 500, payload)
}

func (o *AcceptSharedNetworkInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptSharedNetworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
