// Code generated by go-swagger; DO NOT EDIT.

package pro

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKeysSharedWithMeParams creates a new GetKeysSharedWithMeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKeysSharedWithMeParams() *GetKeysSharedWithMeParams {
	return &GetKeysSharedWithMeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKeysSharedWithMeParamsWithTimeout creates a new GetKeysSharedWithMeParams object
// with the ability to set a timeout on a request.
func NewGetKeysSharedWithMeParamsWithTimeout(timeout time.Duration) *GetKeysSharedWithMeParams {
	return &GetKeysSharedWithMeParams{
		timeout: timeout,
	}
}

// NewGetKeysSharedWithMeParamsWithContext creates a new GetKeysSharedWithMeParams object
// with the ability to set a context for a request.
func NewGetKeysSharedWithMeParamsWithContext(ctx context.Context) *GetKeysSharedWithMeParams {
	return &GetKeysSharedWithMeParams{
		Context: ctx,
	}
}

// NewGetKeysSharedWithMeParamsWithHTTPClient creates a new GetKeysSharedWithMeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKeysSharedWithMeParamsWithHTTPClient(client *http.Client) *GetKeysSharedWithMeParams {
	return &GetKeysSharedWithMeParams{
		HTTPClient: client,
	}
}

/*
GetKeysSharedWithMeParams contains all the parameters to send to the API endpoint

	for the get keys shared with me operation.

	Typically these are written to a http.Request.
*/
type GetKeysSharedWithMeParams struct {

	/* Expired.

	   Filter by expiration status
	*/
	Expired *bool

	/* Limit.

	   Number of results to return
	*/
	Limit *int64

	/* Offset.

	   Number of results to skip
	*/
	Offset *int64

	/* Status.

	   Filter by status (e.g., 'pending', 'active', 'expired')
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get keys shared with me params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKeysSharedWithMeParams) WithDefaults() *GetKeysSharedWithMeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get keys shared with me params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKeysSharedWithMeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithTimeout(timeout time.Duration) *GetKeysSharedWithMeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithContext(ctx context.Context) *GetKeysSharedWithMeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithHTTPClient(client *http.Client) *GetKeysSharedWithMeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpired adds the expired to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithExpired(expired *bool) *GetKeysSharedWithMeParams {
	o.SetExpired(expired)
	return o
}

// SetExpired adds the expired to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetExpired(expired *bool) {
	o.Expired = expired
}

// WithLimit adds the limit to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithLimit(limit *int64) *GetKeysSharedWithMeParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithOffset(offset *int64) *GetKeysSharedWithMeParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStatus adds the status to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) WithStatus(status *string) *GetKeysSharedWithMeParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get keys shared with me params
func (o *GetKeysSharedWithMeParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetKeysSharedWithMeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Expired != nil {

		// query param expired
		var qrExpired bool

		if o.Expired != nil {
			qrExpired = *o.Expired
		}
		qExpired := swag.FormatBool(qrExpired)
		if qExpired != "" {

			if err := r.SetQueryParam("expired", qExpired); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
