// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DeleteFileReader is a Reader for the DeleteFile structure.
type DeleteFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteFileConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewDeleteFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /projects/{projectId}/files/delete] deleteFile", response, response.Code())
	}
}

// NewDeleteFileOK creates a DeleteFileOK with default headers values
func NewDeleteFileOK() *DeleteFileOK {
	return &DeleteFileOK{}
}

/*
DeleteFileOK describes a response with status code 200, with default header values.

OK
*/
type DeleteFileOK struct {
	Payload *models.FilesDeleteFileResponse
}

// IsSuccess returns true when this delete file o k response has a 2xx status code
func (o *DeleteFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete file o k response has a 3xx status code
func (o *DeleteFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file o k response has a 4xx status code
func (o *DeleteFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file o k response has a 5xx status code
func (o *DeleteFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file o k response a status code equal to that given
func (o *DeleteFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete file o k response
func (o *DeleteFileOK) Code() int {
	return 200
}

func (o *DeleteFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileOK %s", 200, payload)
}

func (o *DeleteFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileOK %s", 200, payload)
}

func (o *DeleteFileOK) GetPayload() *models.FilesDeleteFileResponse {
	return o.Payload
}

func (o *DeleteFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FilesDeleteFileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileBadRequest creates a DeleteFileBadRequest with default headers values
func NewDeleteFileBadRequest() *DeleteFileBadRequest {
	return &DeleteFileBadRequest{}
}

/*
DeleteFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteFileBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file bad request response has a 2xx status code
func (o *DeleteFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file bad request response has a 3xx status code
func (o *DeleteFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file bad request response has a 4xx status code
func (o *DeleteFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file bad request response has a 5xx status code
func (o *DeleteFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file bad request response a status code equal to that given
func (o *DeleteFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete file bad request response
func (o *DeleteFileBadRequest) Code() int {
	return 400
}

func (o *DeleteFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileBadRequest %s", 400, payload)
}

func (o *DeleteFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileBadRequest %s", 400, payload)
}

func (o *DeleteFileBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileUnauthorized creates a DeleteFileUnauthorized with default headers values
func NewDeleteFileUnauthorized() *DeleteFileUnauthorized {
	return &DeleteFileUnauthorized{}
}

/*
DeleteFileUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteFileUnauthorized struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file unauthorized response has a 2xx status code
func (o *DeleteFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file unauthorized response has a 3xx status code
func (o *DeleteFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file unauthorized response has a 4xx status code
func (o *DeleteFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file unauthorized response has a 5xx status code
func (o *DeleteFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file unauthorized response a status code equal to that given
func (o *DeleteFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete file unauthorized response
func (o *DeleteFileUnauthorized) Code() int {
	return 401
}

func (o *DeleteFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileUnauthorized %s", 401, payload)
}

func (o *DeleteFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileUnauthorized %s", 401, payload)
}

func (o *DeleteFileUnauthorized) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileForbidden creates a DeleteFileForbidden with default headers values
func NewDeleteFileForbidden() *DeleteFileForbidden {
	return &DeleteFileForbidden{}
}

/*
DeleteFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteFileForbidden struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file forbidden response has a 2xx status code
func (o *DeleteFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file forbidden response has a 3xx status code
func (o *DeleteFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file forbidden response has a 4xx status code
func (o *DeleteFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file forbidden response has a 5xx status code
func (o *DeleteFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file forbidden response a status code equal to that given
func (o *DeleteFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete file forbidden response
func (o *DeleteFileForbidden) Code() int {
	return 403
}

func (o *DeleteFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileForbidden %s", 403, payload)
}

func (o *DeleteFileForbidden) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileNotFound creates a DeleteFileNotFound with default headers values
func NewDeleteFileNotFound() *DeleteFileNotFound {
	return &DeleteFileNotFound{}
}

/*
DeleteFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteFileNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file not found response has a 2xx status code
func (o *DeleteFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file not found response has a 3xx status code
func (o *DeleteFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file not found response has a 4xx status code
func (o *DeleteFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file not found response has a 5xx status code
func (o *DeleteFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file not found response a status code equal to that given
func (o *DeleteFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete file not found response
func (o *DeleteFileNotFound) Code() int {
	return 404
}

func (o *DeleteFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileNotFound %s", 404, payload)
}

func (o *DeleteFileNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileConflict creates a DeleteFileConflict with default headers values
func NewDeleteFileConflict() *DeleteFileConflict {
	return &DeleteFileConflict{}
}

/*
DeleteFileConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteFileConflict struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file conflict response has a 2xx status code
func (o *DeleteFileConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file conflict response has a 3xx status code
func (o *DeleteFileConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file conflict response has a 4xx status code
func (o *DeleteFileConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file conflict response has a 5xx status code
func (o *DeleteFileConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file conflict response a status code equal to that given
func (o *DeleteFileConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete file conflict response
func (o *DeleteFileConflict) Code() int {
	return 409
}

func (o *DeleteFileConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileConflict %s", 409, payload)
}

func (o *DeleteFileConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileConflict %s", 409, payload)
}

func (o *DeleteFileConflict) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileUnprocessableEntity creates a DeleteFileUnprocessableEntity with default headers values
func NewDeleteFileUnprocessableEntity() *DeleteFileUnprocessableEntity {
	return &DeleteFileUnprocessableEntity{}
}

/*
DeleteFileUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type DeleteFileUnprocessableEntity struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file unprocessable entity response has a 2xx status code
func (o *DeleteFileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file unprocessable entity response has a 3xx status code
func (o *DeleteFileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file unprocessable entity response has a 4xx status code
func (o *DeleteFileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete file unprocessable entity response has a 5xx status code
func (o *DeleteFileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this delete file unprocessable entity response a status code equal to that given
func (o *DeleteFileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the delete file unprocessable entity response
func (o *DeleteFileUnprocessableEntity) Code() int {
	return 422
}

func (o *DeleteFileUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileUnprocessableEntity %s", 422, payload)
}

func (o *DeleteFileUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileUnprocessableEntity %s", 422, payload)
}

func (o *DeleteFileUnprocessableEntity) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteFileInternalServerError creates a DeleteFileInternalServerError with default headers values
func NewDeleteFileInternalServerError() *DeleteFileInternalServerError {
	return &DeleteFileInternalServerError{}
}

/*
DeleteFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteFileInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete file internal server error response has a 2xx status code
func (o *DeleteFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete file internal server error response has a 3xx status code
func (o *DeleteFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete file internal server error response has a 4xx status code
func (o *DeleteFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete file internal server error response has a 5xx status code
func (o *DeleteFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete file internal server error response a status code equal to that given
func (o *DeleteFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete file internal server error response
func (o *DeleteFileInternalServerError) Code() int {
	return 500
}

func (o *DeleteFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /projects/{projectId}/files/delete][%d] deleteFileInternalServerError %s", 500, payload)
}

func (o *DeleteFileInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
