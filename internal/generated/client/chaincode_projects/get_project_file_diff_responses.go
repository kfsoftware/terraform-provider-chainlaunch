// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetProjectFileDiffReader is a Reader for the GetProjectFileDiff structure.
type GetProjectFileDiffReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectFileDiffReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectFileDiffOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectFileDiffBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectFileDiffNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectFileDiffInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/diff] getProjectFileDiff", response, response.Code())
	}
}

// NewGetProjectFileDiffOK creates a GetProjectFileDiffOK with default headers values
func NewGetProjectFileDiffOK() *GetProjectFileDiffOK {
	return &GetProjectFileDiffOK{}
}

/*
GetProjectFileDiffOK describes a response with status code 200, with default header values.

Diff
*/
type GetProjectFileDiffOK struct {
	Payload string
}

// IsSuccess returns true when this get project file diff o k response has a 2xx status code
func (o *GetProjectFileDiffOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project file diff o k response has a 3xx status code
func (o *GetProjectFileDiffOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file diff o k response has a 4xx status code
func (o *GetProjectFileDiffOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project file diff o k response has a 5xx status code
func (o *GetProjectFileDiffOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file diff o k response a status code equal to that given
func (o *GetProjectFileDiffOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project file diff o k response
func (o *GetProjectFileDiffOK) Code() int {
	return 200
}

func (o *GetProjectFileDiffOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffOK %s", 200, payload)
}

func (o *GetProjectFileDiffOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffOK %s", 200, payload)
}

func (o *GetProjectFileDiffOK) GetPayload() string {
	return o.Payload
}

func (o *GetProjectFileDiffOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileDiffBadRequest creates a GetProjectFileDiffBadRequest with default headers values
func NewGetProjectFileDiffBadRequest() *GetProjectFileDiffBadRequest {
	return &GetProjectFileDiffBadRequest{}
}

/*
GetProjectFileDiffBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectFileDiffBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file diff bad request response has a 2xx status code
func (o *GetProjectFileDiffBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file diff bad request response has a 3xx status code
func (o *GetProjectFileDiffBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file diff bad request response has a 4xx status code
func (o *GetProjectFileDiffBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project file diff bad request response has a 5xx status code
func (o *GetProjectFileDiffBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file diff bad request response a status code equal to that given
func (o *GetProjectFileDiffBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project file diff bad request response
func (o *GetProjectFileDiffBadRequest) Code() int {
	return 400
}

func (o *GetProjectFileDiffBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffBadRequest %s", 400, payload)
}

func (o *GetProjectFileDiffBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffBadRequest %s", 400, payload)
}

func (o *GetProjectFileDiffBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileDiffBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileDiffNotFound creates a GetProjectFileDiffNotFound with default headers values
func NewGetProjectFileDiffNotFound() *GetProjectFileDiffNotFound {
	return &GetProjectFileDiffNotFound{}
}

/*
GetProjectFileDiffNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectFileDiffNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file diff not found response has a 2xx status code
func (o *GetProjectFileDiffNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file diff not found response has a 3xx status code
func (o *GetProjectFileDiffNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file diff not found response has a 4xx status code
func (o *GetProjectFileDiffNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project file diff not found response has a 5xx status code
func (o *GetProjectFileDiffNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file diff not found response a status code equal to that given
func (o *GetProjectFileDiffNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project file diff not found response
func (o *GetProjectFileDiffNotFound) Code() int {
	return 404
}

func (o *GetProjectFileDiffNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffNotFound %s", 404, payload)
}

func (o *GetProjectFileDiffNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffNotFound %s", 404, payload)
}

func (o *GetProjectFileDiffNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileDiffNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileDiffInternalServerError creates a GetProjectFileDiffInternalServerError with default headers values
func NewGetProjectFileDiffInternalServerError() *GetProjectFileDiffInternalServerError {
	return &GetProjectFileDiffInternalServerError{}
}

/*
GetProjectFileDiffInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectFileDiffInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file diff internal server error response has a 2xx status code
func (o *GetProjectFileDiffInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file diff internal server error response has a 3xx status code
func (o *GetProjectFileDiffInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file diff internal server error response has a 4xx status code
func (o *GetProjectFileDiffInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project file diff internal server error response has a 5xx status code
func (o *GetProjectFileDiffInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project file diff internal server error response a status code equal to that given
func (o *GetProjectFileDiffInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project file diff internal server error response
func (o *GetProjectFileDiffInternalServerError) Code() int {
	return 500
}

func (o *GetProjectFileDiffInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffInternalServerError %s", 500, payload)
}

func (o *GetProjectFileDiffInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/diff][%d] getProjectFileDiffInternalServerError %s", 500, payload)
}

func (o *GetProjectFileDiffInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileDiffInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
