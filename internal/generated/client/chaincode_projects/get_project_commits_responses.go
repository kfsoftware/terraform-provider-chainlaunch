// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetProjectCommitsReader is a Reader for the GetProjectCommits structure.
type GetProjectCommitsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectCommitsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectCommitsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectCommitsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectCommitsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectCommitsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/commits] getProjectCommits", response, response.Code())
	}
}

// NewGetProjectCommitsOK creates a GetProjectCommitsOK with default headers values
func NewGetProjectCommitsOK() *GetProjectCommitsOK {
	return &GetProjectCommitsOK{}
}

/*
GetProjectCommitsOK describes a response with status code 200, with default header values.

OK
*/
type GetProjectCommitsOK struct {
	Payload *models.ProjectsCommitsListResponse
}

// IsSuccess returns true when this get project commits o k response has a 2xx status code
func (o *GetProjectCommitsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project commits o k response has a 3xx status code
func (o *GetProjectCommitsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commits o k response has a 4xx status code
func (o *GetProjectCommitsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project commits o k response has a 5xx status code
func (o *GetProjectCommitsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commits o k response a status code equal to that given
func (o *GetProjectCommitsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project commits o k response
func (o *GetProjectCommitsOK) Code() int {
	return 200
}

func (o *GetProjectCommitsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsOK %s", 200, payload)
}

func (o *GetProjectCommitsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsOK %s", 200, payload)
}

func (o *GetProjectCommitsOK) GetPayload() *models.ProjectsCommitsListResponse {
	return o.Payload
}

func (o *GetProjectCommitsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectsCommitsListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitsBadRequest creates a GetProjectCommitsBadRequest with default headers values
func NewGetProjectCommitsBadRequest() *GetProjectCommitsBadRequest {
	return &GetProjectCommitsBadRequest{}
}

/*
GetProjectCommitsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectCommitsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commits bad request response has a 2xx status code
func (o *GetProjectCommitsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commits bad request response has a 3xx status code
func (o *GetProjectCommitsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commits bad request response has a 4xx status code
func (o *GetProjectCommitsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project commits bad request response has a 5xx status code
func (o *GetProjectCommitsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commits bad request response a status code equal to that given
func (o *GetProjectCommitsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project commits bad request response
func (o *GetProjectCommitsBadRequest) Code() int {
	return 400
}

func (o *GetProjectCommitsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsBadRequest %s", 400, payload)
}

func (o *GetProjectCommitsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsBadRequest %s", 400, payload)
}

func (o *GetProjectCommitsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitsNotFound creates a GetProjectCommitsNotFound with default headers values
func NewGetProjectCommitsNotFound() *GetProjectCommitsNotFound {
	return &GetProjectCommitsNotFound{}
}

/*
GetProjectCommitsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectCommitsNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commits not found response has a 2xx status code
func (o *GetProjectCommitsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commits not found response has a 3xx status code
func (o *GetProjectCommitsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commits not found response has a 4xx status code
func (o *GetProjectCommitsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project commits not found response has a 5xx status code
func (o *GetProjectCommitsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commits not found response a status code equal to that given
func (o *GetProjectCommitsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project commits not found response
func (o *GetProjectCommitsNotFound) Code() int {
	return 404
}

func (o *GetProjectCommitsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsNotFound %s", 404, payload)
}

func (o *GetProjectCommitsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsNotFound %s", 404, payload)
}

func (o *GetProjectCommitsNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitsInternalServerError creates a GetProjectCommitsInternalServerError with default headers values
func NewGetProjectCommitsInternalServerError() *GetProjectCommitsInternalServerError {
	return &GetProjectCommitsInternalServerError{}
}

/*
GetProjectCommitsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectCommitsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commits internal server error response has a 2xx status code
func (o *GetProjectCommitsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commits internal server error response has a 3xx status code
func (o *GetProjectCommitsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commits internal server error response has a 4xx status code
func (o *GetProjectCommitsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project commits internal server error response has a 5xx status code
func (o *GetProjectCommitsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project commits internal server error response a status code equal to that given
func (o *GetProjectCommitsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project commits internal server error response
func (o *GetProjectCommitsInternalServerError) Code() int {
	return 500
}

func (o *GetProjectCommitsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsInternalServerError %s", 500, payload)
}

func (o *GetProjectCommitsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits][%d] getProjectCommitsInternalServerError %s", 500, payload)
}

func (o *GetProjectCommitsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
