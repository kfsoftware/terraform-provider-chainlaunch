// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProjectFileAtCommitParams creates a new GetProjectFileAtCommitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProjectFileAtCommitParams() *GetProjectFileAtCommitParams {
	return &GetProjectFileAtCommitParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProjectFileAtCommitParamsWithTimeout creates a new GetProjectFileAtCommitParams object
// with the ability to set a timeout on a request.
func NewGetProjectFileAtCommitParamsWithTimeout(timeout time.Duration) *GetProjectFileAtCommitParams {
	return &GetProjectFileAtCommitParams{
		timeout: timeout,
	}
}

// NewGetProjectFileAtCommitParamsWithContext creates a new GetProjectFileAtCommitParams object
// with the ability to set a context for a request.
func NewGetProjectFileAtCommitParamsWithContext(ctx context.Context) *GetProjectFileAtCommitParams {
	return &GetProjectFileAtCommitParams{
		Context: ctx,
	}
}

// NewGetProjectFileAtCommitParamsWithHTTPClient creates a new GetProjectFileAtCommitParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProjectFileAtCommitParamsWithHTTPClient(client *http.Client) *GetProjectFileAtCommitParams {
	return &GetProjectFileAtCommitParams{
		HTTPClient: client,
	}
}

/*
GetProjectFileAtCommitParams contains all the parameters to send to the API endpoint

	for the get project file at commit operation.

	Typically these are written to a http.Request.
*/
type GetProjectFileAtCommitParams struct {

	/* Commit.

	   Commit hash
	*/
	Commit string

	/* File.

	   File path (relative to project root)
	*/
	File string

	/* ID.

	   Project ID
	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get project file at commit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProjectFileAtCommitParams) WithDefaults() *GetProjectFileAtCommitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get project file at commit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProjectFileAtCommitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithTimeout(timeout time.Duration) *GetProjectFileAtCommitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithContext(ctx context.Context) *GetProjectFileAtCommitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithHTTPClient(client *http.Client) *GetProjectFileAtCommitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommit adds the commit to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithCommit(commit string) *GetProjectFileAtCommitParams {
	o.SetCommit(commit)
	return o
}

// SetCommit adds the commit to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetCommit(commit string) {
	o.Commit = commit
}

// WithFile adds the file to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithFile(file string) *GetProjectFileAtCommitParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetFile(file string) {
	o.File = file
}

// WithID adds the id to the get project file at commit params
func (o *GetProjectFileAtCommitParams) WithID(id int64) *GetProjectFileAtCommitParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get project file at commit params
func (o *GetProjectFileAtCommitParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetProjectFileAtCommitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param commit
	qrCommit := o.Commit
	qCommit := qrCommit
	if qCommit != "" {

		if err := r.SetQueryParam("commit", qCommit); err != nil {
			return err
		}
	}

	// query param file
	qrFile := o.File
	qFile := qrFile
	if qFile != "" {

		if err := r.SetQueryParam("file", qFile); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
