// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DownloadProjectReader is a Reader for the DownloadProject structure.
type DownloadProjectReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *DownloadProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadProjectOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDownloadProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/download] downloadProject", response, response.Code())
	}
}

// NewDownloadProjectOK creates a DownloadProjectOK with default headers values
func NewDownloadProjectOK(writer io.Writer) *DownloadProjectOK {
	return &DownloadProjectOK{

		Payload: writer,
	}
}

/*
DownloadProjectOK describes a response with status code 200, with default header values.

OK
*/
type DownloadProjectOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this download project o k response has a 2xx status code
func (o *DownloadProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download project o k response has a 3xx status code
func (o *DownloadProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download project o k response has a 4xx status code
func (o *DownloadProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download project o k response has a 5xx status code
func (o *DownloadProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download project o k response a status code equal to that given
func (o *DownloadProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download project o k response
func (o *DownloadProjectOK) Code() int {
	return 200
}

func (o *DownloadProjectOK) Error() string {
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectOK", 200)
}

func (o *DownloadProjectOK) String() string {
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectOK", 200)
}

func (o *DownloadProjectOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *DownloadProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDownloadProjectBadRequest creates a DownloadProjectBadRequest with default headers values
func NewDownloadProjectBadRequest() *DownloadProjectBadRequest {
	return &DownloadProjectBadRequest{}
}

/*
DownloadProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DownloadProjectBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this download project bad request response has a 2xx status code
func (o *DownloadProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download project bad request response has a 3xx status code
func (o *DownloadProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download project bad request response has a 4xx status code
func (o *DownloadProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this download project bad request response has a 5xx status code
func (o *DownloadProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this download project bad request response a status code equal to that given
func (o *DownloadProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the download project bad request response
func (o *DownloadProjectBadRequest) Code() int {
	return 400
}

func (o *DownloadProjectBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectBadRequest %s", 400, payload)
}

func (o *DownloadProjectBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectBadRequest %s", 400, payload)
}

func (o *DownloadProjectBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DownloadProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDownloadProjectNotFound creates a DownloadProjectNotFound with default headers values
func NewDownloadProjectNotFound() *DownloadProjectNotFound {
	return &DownloadProjectNotFound{}
}

/*
DownloadProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DownloadProjectNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this download project not found response has a 2xx status code
func (o *DownloadProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download project not found response has a 3xx status code
func (o *DownloadProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download project not found response has a 4xx status code
func (o *DownloadProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download project not found response has a 5xx status code
func (o *DownloadProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download project not found response a status code equal to that given
func (o *DownloadProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download project not found response
func (o *DownloadProjectNotFound) Code() int {
	return 404
}

func (o *DownloadProjectNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectNotFound %s", 404, payload)
}

func (o *DownloadProjectNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectNotFound %s", 404, payload)
}

func (o *DownloadProjectNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DownloadProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDownloadProjectInternalServerError creates a DownloadProjectInternalServerError with default headers values
func NewDownloadProjectInternalServerError() *DownloadProjectInternalServerError {
	return &DownloadProjectInternalServerError{}
}

/*
DownloadProjectInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DownloadProjectInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this download project internal server error response has a 2xx status code
func (o *DownloadProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download project internal server error response has a 3xx status code
func (o *DownloadProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download project internal server error response has a 4xx status code
func (o *DownloadProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this download project internal server error response has a 5xx status code
func (o *DownloadProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this download project internal server error response a status code equal to that given
func (o *DownloadProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the download project internal server error response
func (o *DownloadProjectInternalServerError) Code() int {
	return 500
}

func (o *DownloadProjectInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectInternalServerError %s", 500, payload)
}

func (o *DownloadProjectInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/download][%d] downloadProjectInternalServerError %s", 500, payload)
}

func (o *DownloadProjectInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DownloadProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
