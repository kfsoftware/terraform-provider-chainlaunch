// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ReadFileReader is a Reader for the ReadFile structure.
type ReadFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewReadFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReadFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReadFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReadFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReadFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewReadFileConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewReadFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReadFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /projects/{projectId}/files/read] readFile", response, response.Code())
	}
}

// NewReadFileOK creates a ReadFileOK with default headers values
func NewReadFileOK() *ReadFileOK {
	return &ReadFileOK{}
}

/*
ReadFileOK describes a response with status code 200, with default header values.

OK
*/
type ReadFileOK struct {
	Payload *models.FilesReadFileResponse
}

// IsSuccess returns true when this read file o k response has a 2xx status code
func (o *ReadFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this read file o k response has a 3xx status code
func (o *ReadFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file o k response has a 4xx status code
func (o *ReadFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this read file o k response has a 5xx status code
func (o *ReadFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this read file o k response a status code equal to that given
func (o *ReadFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the read file o k response
func (o *ReadFileOK) Code() int {
	return 200
}

func (o *ReadFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileOK %s", 200, payload)
}

func (o *ReadFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileOK %s", 200, payload)
}

func (o *ReadFileOK) GetPayload() *models.FilesReadFileResponse {
	return o.Payload
}

func (o *ReadFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FilesReadFileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileBadRequest creates a ReadFileBadRequest with default headers values
func NewReadFileBadRequest() *ReadFileBadRequest {
	return &ReadFileBadRequest{}
}

/*
ReadFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReadFileBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file bad request response has a 2xx status code
func (o *ReadFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file bad request response has a 3xx status code
func (o *ReadFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file bad request response has a 4xx status code
func (o *ReadFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file bad request response has a 5xx status code
func (o *ReadFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this read file bad request response a status code equal to that given
func (o *ReadFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the read file bad request response
func (o *ReadFileBadRequest) Code() int {
	return 400
}

func (o *ReadFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileBadRequest %s", 400, payload)
}

func (o *ReadFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileBadRequest %s", 400, payload)
}

func (o *ReadFileBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileUnauthorized creates a ReadFileUnauthorized with default headers values
func NewReadFileUnauthorized() *ReadFileUnauthorized {
	return &ReadFileUnauthorized{}
}

/*
ReadFileUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReadFileUnauthorized struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file unauthorized response has a 2xx status code
func (o *ReadFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file unauthorized response has a 3xx status code
func (o *ReadFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file unauthorized response has a 4xx status code
func (o *ReadFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file unauthorized response has a 5xx status code
func (o *ReadFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this read file unauthorized response a status code equal to that given
func (o *ReadFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the read file unauthorized response
func (o *ReadFileUnauthorized) Code() int {
	return 401
}

func (o *ReadFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileUnauthorized %s", 401, payload)
}

func (o *ReadFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileUnauthorized %s", 401, payload)
}

func (o *ReadFileUnauthorized) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileForbidden creates a ReadFileForbidden with default headers values
func NewReadFileForbidden() *ReadFileForbidden {
	return &ReadFileForbidden{}
}

/*
ReadFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReadFileForbidden struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file forbidden response has a 2xx status code
func (o *ReadFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file forbidden response has a 3xx status code
func (o *ReadFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file forbidden response has a 4xx status code
func (o *ReadFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file forbidden response has a 5xx status code
func (o *ReadFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this read file forbidden response a status code equal to that given
func (o *ReadFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the read file forbidden response
func (o *ReadFileForbidden) Code() int {
	return 403
}

func (o *ReadFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileForbidden %s", 403, payload)
}

func (o *ReadFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileForbidden %s", 403, payload)
}

func (o *ReadFileForbidden) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileNotFound creates a ReadFileNotFound with default headers values
func NewReadFileNotFound() *ReadFileNotFound {
	return &ReadFileNotFound{}
}

/*
ReadFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ReadFileNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file not found response has a 2xx status code
func (o *ReadFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file not found response has a 3xx status code
func (o *ReadFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file not found response has a 4xx status code
func (o *ReadFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file not found response has a 5xx status code
func (o *ReadFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this read file not found response a status code equal to that given
func (o *ReadFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the read file not found response
func (o *ReadFileNotFound) Code() int {
	return 404
}

func (o *ReadFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileNotFound %s", 404, payload)
}

func (o *ReadFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileNotFound %s", 404, payload)
}

func (o *ReadFileNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileConflict creates a ReadFileConflict with default headers values
func NewReadFileConflict() *ReadFileConflict {
	return &ReadFileConflict{}
}

/*
ReadFileConflict describes a response with status code 409, with default header values.

Conflict
*/
type ReadFileConflict struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file conflict response has a 2xx status code
func (o *ReadFileConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file conflict response has a 3xx status code
func (o *ReadFileConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file conflict response has a 4xx status code
func (o *ReadFileConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file conflict response has a 5xx status code
func (o *ReadFileConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this read file conflict response a status code equal to that given
func (o *ReadFileConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the read file conflict response
func (o *ReadFileConflict) Code() int {
	return 409
}

func (o *ReadFileConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileConflict %s", 409, payload)
}

func (o *ReadFileConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileConflict %s", 409, payload)
}

func (o *ReadFileConflict) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileUnprocessableEntity creates a ReadFileUnprocessableEntity with default headers values
func NewReadFileUnprocessableEntity() *ReadFileUnprocessableEntity {
	return &ReadFileUnprocessableEntity{}
}

/*
ReadFileUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ReadFileUnprocessableEntity struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file unprocessable entity response has a 2xx status code
func (o *ReadFileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file unprocessable entity response has a 3xx status code
func (o *ReadFileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file unprocessable entity response has a 4xx status code
func (o *ReadFileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this read file unprocessable entity response has a 5xx status code
func (o *ReadFileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this read file unprocessable entity response a status code equal to that given
func (o *ReadFileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the read file unprocessable entity response
func (o *ReadFileUnprocessableEntity) Code() int {
	return 422
}

func (o *ReadFileUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileUnprocessableEntity %s", 422, payload)
}

func (o *ReadFileUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileUnprocessableEntity %s", 422, payload)
}

func (o *ReadFileUnprocessableEntity) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewReadFileInternalServerError creates a ReadFileInternalServerError with default headers values
func NewReadFileInternalServerError() *ReadFileInternalServerError {
	return &ReadFileInternalServerError{}
}

/*
ReadFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReadFileInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this read file internal server error response has a 2xx status code
func (o *ReadFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this read file internal server error response has a 3xx status code
func (o *ReadFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this read file internal server error response has a 4xx status code
func (o *ReadFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this read file internal server error response has a 5xx status code
func (o *ReadFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this read file internal server error response a status code equal to that given
func (o *ReadFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the read file internal server error response
func (o *ReadFileInternalServerError) Code() int {
	return 500
}

func (o *ReadFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileInternalServerError %s", 500, payload)
}

func (o *ReadFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /projects/{projectId}/files/read][%d] readFileInternalServerError %s", 500, payload)
}

func (o *ReadFileInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ReadFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
