// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StopProjectServerReader is a Reader for the StopProjectServer structure.
type StopProjectServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopProjectServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStopProjectServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopProjectServerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopProjectServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopProjectServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /chaincode-projects/{id}/stop] stopProjectServer", response, response.Code())
	}
}

// NewStopProjectServerOK creates a StopProjectServerOK with default headers values
func NewStopProjectServerOK() *StopProjectServerOK {
	return &StopProjectServerOK{}
}

/*
StopProjectServerOK describes a response with status code 200, with default header values.

OK
*/
type StopProjectServerOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this stop project server o k response has a 2xx status code
func (o *StopProjectServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop project server o k response has a 3xx status code
func (o *StopProjectServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop project server o k response has a 4xx status code
func (o *StopProjectServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop project server o k response has a 5xx status code
func (o *StopProjectServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop project server o k response a status code equal to that given
func (o *StopProjectServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop project server o k response
func (o *StopProjectServerOK) Code() int {
	return 200
}

func (o *StopProjectServerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerOK %s", 200, payload)
}

func (o *StopProjectServerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerOK %s", 200, payload)
}

func (o *StopProjectServerOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *StopProjectServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopProjectServerBadRequest creates a StopProjectServerBadRequest with default headers values
func NewStopProjectServerBadRequest() *StopProjectServerBadRequest {
	return &StopProjectServerBadRequest{}
}

/*
StopProjectServerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StopProjectServerBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop project server bad request response has a 2xx status code
func (o *StopProjectServerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop project server bad request response has a 3xx status code
func (o *StopProjectServerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop project server bad request response has a 4xx status code
func (o *StopProjectServerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop project server bad request response has a 5xx status code
func (o *StopProjectServerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop project server bad request response a status code equal to that given
func (o *StopProjectServerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop project server bad request response
func (o *StopProjectServerBadRequest) Code() int {
	return 400
}

func (o *StopProjectServerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerBadRequest %s", 400, payload)
}

func (o *StopProjectServerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerBadRequest %s", 400, payload)
}

func (o *StopProjectServerBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopProjectServerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopProjectServerNotFound creates a StopProjectServerNotFound with default headers values
func NewStopProjectServerNotFound() *StopProjectServerNotFound {
	return &StopProjectServerNotFound{}
}

/*
StopProjectServerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StopProjectServerNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop project server not found response has a 2xx status code
func (o *StopProjectServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop project server not found response has a 3xx status code
func (o *StopProjectServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop project server not found response has a 4xx status code
func (o *StopProjectServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop project server not found response has a 5xx status code
func (o *StopProjectServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop project server not found response a status code equal to that given
func (o *StopProjectServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop project server not found response
func (o *StopProjectServerNotFound) Code() int {
	return 404
}

func (o *StopProjectServerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerNotFound %s", 404, payload)
}

func (o *StopProjectServerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerNotFound %s", 404, payload)
}

func (o *StopProjectServerNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopProjectServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopProjectServerInternalServerError creates a StopProjectServerInternalServerError with default headers values
func NewStopProjectServerInternalServerError() *StopProjectServerInternalServerError {
	return &StopProjectServerInternalServerError{}
}

/*
StopProjectServerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StopProjectServerInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop project server internal server error response has a 2xx status code
func (o *StopProjectServerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop project server internal server error response has a 3xx status code
func (o *StopProjectServerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop project server internal server error response has a 4xx status code
func (o *StopProjectServerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop project server internal server error response has a 5xx status code
func (o *StopProjectServerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop project server internal server error response a status code equal to that given
func (o *StopProjectServerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop project server internal server error response
func (o *StopProjectServerInternalServerError) Code() int {
	return 500
}

func (o *StopProjectServerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerInternalServerError %s", 500, payload)
}

func (o *StopProjectServerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/stop][%d] stopProjectServerInternalServerError %s", 500, payload)
}

func (o *StopProjectServerInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopProjectServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
