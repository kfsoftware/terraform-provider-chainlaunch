// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetProjectCommitDetailReader is a Reader for the GetProjectCommitDetail structure.
type GetProjectCommitDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectCommitDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectCommitDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectCommitDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectCommitDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectCommitDetailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/commits/{commitHash}] getProjectCommitDetail", response, response.Code())
	}
}

// NewGetProjectCommitDetailOK creates a GetProjectCommitDetailOK with default headers values
func NewGetProjectCommitDetailOK() *GetProjectCommitDetailOK {
	return &GetProjectCommitDetailOK{}
}

/*
GetProjectCommitDetailOK describes a response with status code 200, with default header values.

OK
*/
type GetProjectCommitDetailOK struct {
	Payload *models.ProjectsCommitDetailAPI
}

// IsSuccess returns true when this get project commit detail o k response has a 2xx status code
func (o *GetProjectCommitDetailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project commit detail o k response has a 3xx status code
func (o *GetProjectCommitDetailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commit detail o k response has a 4xx status code
func (o *GetProjectCommitDetailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project commit detail o k response has a 5xx status code
func (o *GetProjectCommitDetailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commit detail o k response a status code equal to that given
func (o *GetProjectCommitDetailOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project commit detail o k response
func (o *GetProjectCommitDetailOK) Code() int {
	return 200
}

func (o *GetProjectCommitDetailOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailOK %s", 200, payload)
}

func (o *GetProjectCommitDetailOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailOK %s", 200, payload)
}

func (o *GetProjectCommitDetailOK) GetPayload() *models.ProjectsCommitDetailAPI {
	return o.Payload
}

func (o *GetProjectCommitDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectsCommitDetailAPI)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitDetailBadRequest creates a GetProjectCommitDetailBadRequest with default headers values
func NewGetProjectCommitDetailBadRequest() *GetProjectCommitDetailBadRequest {
	return &GetProjectCommitDetailBadRequest{}
}

/*
GetProjectCommitDetailBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectCommitDetailBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commit detail bad request response has a 2xx status code
func (o *GetProjectCommitDetailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commit detail bad request response has a 3xx status code
func (o *GetProjectCommitDetailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commit detail bad request response has a 4xx status code
func (o *GetProjectCommitDetailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project commit detail bad request response has a 5xx status code
func (o *GetProjectCommitDetailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commit detail bad request response a status code equal to that given
func (o *GetProjectCommitDetailBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project commit detail bad request response
func (o *GetProjectCommitDetailBadRequest) Code() int {
	return 400
}

func (o *GetProjectCommitDetailBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailBadRequest %s", 400, payload)
}

func (o *GetProjectCommitDetailBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailBadRequest %s", 400, payload)
}

func (o *GetProjectCommitDetailBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitDetailNotFound creates a GetProjectCommitDetailNotFound with default headers values
func NewGetProjectCommitDetailNotFound() *GetProjectCommitDetailNotFound {
	return &GetProjectCommitDetailNotFound{}
}

/*
GetProjectCommitDetailNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectCommitDetailNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commit detail not found response has a 2xx status code
func (o *GetProjectCommitDetailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commit detail not found response has a 3xx status code
func (o *GetProjectCommitDetailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commit detail not found response has a 4xx status code
func (o *GetProjectCommitDetailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project commit detail not found response has a 5xx status code
func (o *GetProjectCommitDetailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project commit detail not found response a status code equal to that given
func (o *GetProjectCommitDetailNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project commit detail not found response
func (o *GetProjectCommitDetailNotFound) Code() int {
	return 404
}

func (o *GetProjectCommitDetailNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailNotFound %s", 404, payload)
}

func (o *GetProjectCommitDetailNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailNotFound %s", 404, payload)
}

func (o *GetProjectCommitDetailNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectCommitDetailInternalServerError creates a GetProjectCommitDetailInternalServerError with default headers values
func NewGetProjectCommitDetailInternalServerError() *GetProjectCommitDetailInternalServerError {
	return &GetProjectCommitDetailInternalServerError{}
}

/*
GetProjectCommitDetailInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectCommitDetailInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project commit detail internal server error response has a 2xx status code
func (o *GetProjectCommitDetailInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project commit detail internal server error response has a 3xx status code
func (o *GetProjectCommitDetailInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project commit detail internal server error response has a 4xx status code
func (o *GetProjectCommitDetailInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project commit detail internal server error response has a 5xx status code
func (o *GetProjectCommitDetailInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project commit detail internal server error response a status code equal to that given
func (o *GetProjectCommitDetailInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project commit detail internal server error response
func (o *GetProjectCommitDetailInternalServerError) Code() int {
	return 500
}

func (o *GetProjectCommitDetailInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailInternalServerError %s", 500, payload)
}

func (o *GetProjectCommitDetailInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/commits/{commitHash}][%d] getProjectCommitDetailInternalServerError %s", 500, payload)
}

func (o *GetProjectCommitDetailInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectCommitDetailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
