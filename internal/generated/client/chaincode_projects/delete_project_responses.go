// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DeleteProjectReader is a Reader for the DeleteProject structure.
type DeleteProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /chaincode-projects/{id}] deleteProject", response, response.Code())
	}
}

// NewDeleteProjectOK creates a DeleteProjectOK with default headers values
func NewDeleteProjectOK() *DeleteProjectOK {
	return &DeleteProjectOK{}
}

/*
DeleteProjectOK describes a response with status code 200, with default header values.

OK
*/
type DeleteProjectOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete project o k response has a 2xx status code
func (o *DeleteProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete project o k response has a 3xx status code
func (o *DeleteProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project o k response has a 4xx status code
func (o *DeleteProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project o k response has a 5xx status code
func (o *DeleteProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project o k response a status code equal to that given
func (o *DeleteProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete project o k response
func (o *DeleteProjectOK) Code() int {
	return 200
}

func (o *DeleteProjectOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectOK %s", 200, payload)
}

func (o *DeleteProjectOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectOK %s", 200, payload)
}

func (o *DeleteProjectOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteProjectBadRequest creates a DeleteProjectBadRequest with default headers values
func NewDeleteProjectBadRequest() *DeleteProjectBadRequest {
	return &DeleteProjectBadRequest{}
}

/*
DeleteProjectBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteProjectBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete project bad request response has a 2xx status code
func (o *DeleteProjectBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project bad request response has a 3xx status code
func (o *DeleteProjectBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project bad request response has a 4xx status code
func (o *DeleteProjectBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project bad request response has a 5xx status code
func (o *DeleteProjectBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project bad request response a status code equal to that given
func (o *DeleteProjectBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete project bad request response
func (o *DeleteProjectBadRequest) Code() int {
	return 400
}

func (o *DeleteProjectBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectBadRequest %s", 400, payload)
}

func (o *DeleteProjectBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectBadRequest %s", 400, payload)
}

func (o *DeleteProjectBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteProjectNotFound creates a DeleteProjectNotFound with default headers values
func NewDeleteProjectNotFound() *DeleteProjectNotFound {
	return &DeleteProjectNotFound{}
}

/*
DeleteProjectNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteProjectNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete project not found response has a 2xx status code
func (o *DeleteProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project not found response has a 3xx status code
func (o *DeleteProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project not found response has a 4xx status code
func (o *DeleteProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project not found response has a 5xx status code
func (o *DeleteProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project not found response a status code equal to that given
func (o *DeleteProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete project not found response
func (o *DeleteProjectNotFound) Code() int {
	return 404
}

func (o *DeleteProjectNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectNotFound %s", 404, payload)
}

func (o *DeleteProjectNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectNotFound %s", 404, payload)
}

func (o *DeleteProjectNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteProjectInternalServerError creates a DeleteProjectInternalServerError with default headers values
func NewDeleteProjectInternalServerError() *DeleteProjectInternalServerError {
	return &DeleteProjectInternalServerError{}
}

/*
DeleteProjectInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteProjectInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete project internal server error response has a 2xx status code
func (o *DeleteProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project internal server error response has a 3xx status code
func (o *DeleteProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project internal server error response has a 4xx status code
func (o *DeleteProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project internal server error response has a 5xx status code
func (o *DeleteProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete project internal server error response a status code equal to that given
func (o *DeleteProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete project internal server error response
func (o *DeleteProjectInternalServerError) Code() int {
	return 500
}

func (o *DeleteProjectInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectInternalServerError %s", 500, payload)
}

func (o *DeleteProjectInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}][%d] deleteProjectInternalServerError %s", 500, payload)
}

func (o *DeleteProjectInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
