// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetProjectLogsReader is a Reader for the GetProjectLogs structure.
type GetProjectLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/logs] getProjectLogs", response, response.Code())
	}
}

// NewGetProjectLogsOK creates a GetProjectLogsOK with default headers values
func NewGetProjectLogsOK() *GetProjectLogsOK {
	return &GetProjectLogsOK{}
}

/*
GetProjectLogsOK describes a response with status code 200, with default header values.

Logs
*/
type GetProjectLogsOK struct {
	Payload string
}

// IsSuccess returns true when this get project logs o k response has a 2xx status code
func (o *GetProjectLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project logs o k response has a 3xx status code
func (o *GetProjectLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project logs o k response has a 4xx status code
func (o *GetProjectLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project logs o k response has a 5xx status code
func (o *GetProjectLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project logs o k response a status code equal to that given
func (o *GetProjectLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project logs o k response
func (o *GetProjectLogsOK) Code() int {
	return 200
}

func (o *GetProjectLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsOK %s", 200, payload)
}

func (o *GetProjectLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsOK %s", 200, payload)
}

func (o *GetProjectLogsOK) GetPayload() string {
	return o.Payload
}

func (o *GetProjectLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectLogsBadRequest creates a GetProjectLogsBadRequest with default headers values
func NewGetProjectLogsBadRequest() *GetProjectLogsBadRequest {
	return &GetProjectLogsBadRequest{}
}

/*
GetProjectLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectLogsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project logs bad request response has a 2xx status code
func (o *GetProjectLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project logs bad request response has a 3xx status code
func (o *GetProjectLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project logs bad request response has a 4xx status code
func (o *GetProjectLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project logs bad request response has a 5xx status code
func (o *GetProjectLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project logs bad request response a status code equal to that given
func (o *GetProjectLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project logs bad request response
func (o *GetProjectLogsBadRequest) Code() int {
	return 400
}

func (o *GetProjectLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsBadRequest %s", 400, payload)
}

func (o *GetProjectLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsBadRequest %s", 400, payload)
}

func (o *GetProjectLogsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectLogsNotFound creates a GetProjectLogsNotFound with default headers values
func NewGetProjectLogsNotFound() *GetProjectLogsNotFound {
	return &GetProjectLogsNotFound{}
}

/*
GetProjectLogsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectLogsNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project logs not found response has a 2xx status code
func (o *GetProjectLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project logs not found response has a 3xx status code
func (o *GetProjectLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project logs not found response has a 4xx status code
func (o *GetProjectLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project logs not found response has a 5xx status code
func (o *GetProjectLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project logs not found response a status code equal to that given
func (o *GetProjectLogsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project logs not found response
func (o *GetProjectLogsNotFound) Code() int {
	return 404
}

func (o *GetProjectLogsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsNotFound %s", 404, payload)
}

func (o *GetProjectLogsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsNotFound %s", 404, payload)
}

func (o *GetProjectLogsNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectLogsInternalServerError creates a GetProjectLogsInternalServerError with default headers values
func NewGetProjectLogsInternalServerError() *GetProjectLogsInternalServerError {
	return &GetProjectLogsInternalServerError{}
}

/*
GetProjectLogsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectLogsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project logs internal server error response has a 2xx status code
func (o *GetProjectLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project logs internal server error response has a 3xx status code
func (o *GetProjectLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project logs internal server error response has a 4xx status code
func (o *GetProjectLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project logs internal server error response has a 5xx status code
func (o *GetProjectLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project logs internal server error response a status code equal to that given
func (o *GetProjectLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project logs internal server error response
func (o *GetProjectLogsInternalServerError) Code() int {
	return 500
}

func (o *GetProjectLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsInternalServerError %s", 500, payload)
}

func (o *GetProjectLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs][%d] getProjectLogsInternalServerError %s", 500, payload)
}

func (o *GetProjectLogsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
