// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// WriteFileReader is a Reader for the WriteFile structure.
type WriteFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WriteFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewWriteFileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewWriteFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewWriteFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewWriteFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewWriteFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewWriteFileConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewWriteFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWriteFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /projects/{projectId}/files/write] writeFile", response, response.Code())
	}
}

// NewWriteFileCreated creates a WriteFileCreated with default headers values
func NewWriteFileCreated() *WriteFileCreated {
	return &WriteFileCreated{}
}

/*
WriteFileCreated describes a response with status code 201, with default header values.

Created
*/
type WriteFileCreated struct {
	Payload *models.FilesWriteFileResponse
}

// IsSuccess returns true when this write file created response has a 2xx status code
func (o *WriteFileCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this write file created response has a 3xx status code
func (o *WriteFileCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file created response has a 4xx status code
func (o *WriteFileCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this write file created response has a 5xx status code
func (o *WriteFileCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this write file created response a status code equal to that given
func (o *WriteFileCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the write file created response
func (o *WriteFileCreated) Code() int {
	return 201
}

func (o *WriteFileCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileCreated %s", 201, payload)
}

func (o *WriteFileCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileCreated %s", 201, payload)
}

func (o *WriteFileCreated) GetPayload() *models.FilesWriteFileResponse {
	return o.Payload
}

func (o *WriteFileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FilesWriteFileResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileBadRequest creates a WriteFileBadRequest with default headers values
func NewWriteFileBadRequest() *WriteFileBadRequest {
	return &WriteFileBadRequest{}
}

/*
WriteFileBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type WriteFileBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file bad request response has a 2xx status code
func (o *WriteFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file bad request response has a 3xx status code
func (o *WriteFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file bad request response has a 4xx status code
func (o *WriteFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file bad request response has a 5xx status code
func (o *WriteFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this write file bad request response a status code equal to that given
func (o *WriteFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the write file bad request response
func (o *WriteFileBadRequest) Code() int {
	return 400
}

func (o *WriteFileBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileBadRequest %s", 400, payload)
}

func (o *WriteFileBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileBadRequest %s", 400, payload)
}

func (o *WriteFileBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileUnauthorized creates a WriteFileUnauthorized with default headers values
func NewWriteFileUnauthorized() *WriteFileUnauthorized {
	return &WriteFileUnauthorized{}
}

/*
WriteFileUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type WriteFileUnauthorized struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file unauthorized response has a 2xx status code
func (o *WriteFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file unauthorized response has a 3xx status code
func (o *WriteFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file unauthorized response has a 4xx status code
func (o *WriteFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file unauthorized response has a 5xx status code
func (o *WriteFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this write file unauthorized response a status code equal to that given
func (o *WriteFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the write file unauthorized response
func (o *WriteFileUnauthorized) Code() int {
	return 401
}

func (o *WriteFileUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileUnauthorized %s", 401, payload)
}

func (o *WriteFileUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileUnauthorized %s", 401, payload)
}

func (o *WriteFileUnauthorized) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileForbidden creates a WriteFileForbidden with default headers values
func NewWriteFileForbidden() *WriteFileForbidden {
	return &WriteFileForbidden{}
}

/*
WriteFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type WriteFileForbidden struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file forbidden response has a 2xx status code
func (o *WriteFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file forbidden response has a 3xx status code
func (o *WriteFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file forbidden response has a 4xx status code
func (o *WriteFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file forbidden response has a 5xx status code
func (o *WriteFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this write file forbidden response a status code equal to that given
func (o *WriteFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the write file forbidden response
func (o *WriteFileForbidden) Code() int {
	return 403
}

func (o *WriteFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileForbidden %s", 403, payload)
}

func (o *WriteFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileForbidden %s", 403, payload)
}

func (o *WriteFileForbidden) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileNotFound creates a WriteFileNotFound with default headers values
func NewWriteFileNotFound() *WriteFileNotFound {
	return &WriteFileNotFound{}
}

/*
WriteFileNotFound describes a response with status code 404, with default header values.

Not Found
*/
type WriteFileNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file not found response has a 2xx status code
func (o *WriteFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file not found response has a 3xx status code
func (o *WriteFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file not found response has a 4xx status code
func (o *WriteFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file not found response has a 5xx status code
func (o *WriteFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this write file not found response a status code equal to that given
func (o *WriteFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the write file not found response
func (o *WriteFileNotFound) Code() int {
	return 404
}

func (o *WriteFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileNotFound %s", 404, payload)
}

func (o *WriteFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileNotFound %s", 404, payload)
}

func (o *WriteFileNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileConflict creates a WriteFileConflict with default headers values
func NewWriteFileConflict() *WriteFileConflict {
	return &WriteFileConflict{}
}

/*
WriteFileConflict describes a response with status code 409, with default header values.

Conflict
*/
type WriteFileConflict struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file conflict response has a 2xx status code
func (o *WriteFileConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file conflict response has a 3xx status code
func (o *WriteFileConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file conflict response has a 4xx status code
func (o *WriteFileConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file conflict response has a 5xx status code
func (o *WriteFileConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this write file conflict response a status code equal to that given
func (o *WriteFileConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the write file conflict response
func (o *WriteFileConflict) Code() int {
	return 409
}

func (o *WriteFileConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileConflict %s", 409, payload)
}

func (o *WriteFileConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileConflict %s", 409, payload)
}

func (o *WriteFileConflict) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileUnprocessableEntity creates a WriteFileUnprocessableEntity with default headers values
func NewWriteFileUnprocessableEntity() *WriteFileUnprocessableEntity {
	return &WriteFileUnprocessableEntity{}
}

/*
WriteFileUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type WriteFileUnprocessableEntity struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file unprocessable entity response has a 2xx status code
func (o *WriteFileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file unprocessable entity response has a 3xx status code
func (o *WriteFileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file unprocessable entity response has a 4xx status code
func (o *WriteFileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this write file unprocessable entity response has a 5xx status code
func (o *WriteFileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this write file unprocessable entity response a status code equal to that given
func (o *WriteFileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the write file unprocessable entity response
func (o *WriteFileUnprocessableEntity) Code() int {
	return 422
}

func (o *WriteFileUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileUnprocessableEntity %s", 422, payload)
}

func (o *WriteFileUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileUnprocessableEntity %s", 422, payload)
}

func (o *WriteFileUnprocessableEntity) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewWriteFileInternalServerError creates a WriteFileInternalServerError with default headers values
func NewWriteFileInternalServerError() *WriteFileInternalServerError {
	return &WriteFileInternalServerError{}
}

/*
WriteFileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type WriteFileInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this write file internal server error response has a 2xx status code
func (o *WriteFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this write file internal server error response has a 3xx status code
func (o *WriteFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this write file internal server error response has a 4xx status code
func (o *WriteFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this write file internal server error response has a 5xx status code
func (o *WriteFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this write file internal server error response a status code equal to that given
func (o *WriteFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the write file internal server error response
func (o *WriteFileInternalServerError) Code() int {
	return 500
}

func (o *WriteFileInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileInternalServerError %s", 500, payload)
}

func (o *WriteFileInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /projects/{projectId}/files/write][%d] writeFileInternalServerError %s", 500, payload)
}

func (o *WriteFileInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *WriteFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
