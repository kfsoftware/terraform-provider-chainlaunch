// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// QueryChaincodeTransactionReader is a Reader for the QueryChaincodeTransaction structure.
type QueryChaincodeTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryChaincodeTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewQueryChaincodeTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryChaincodeTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryChaincodeTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryChaincodeTransactionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /chaincode-projects/{id}/query] queryChaincodeTransaction", response, response.Code())
	}
}

// NewQueryChaincodeTransactionOK creates a QueryChaincodeTransactionOK with default headers values
func NewQueryChaincodeTransactionOK() *QueryChaincodeTransactionOK {
	return &QueryChaincodeTransactionOK{}
}

/*
QueryChaincodeTransactionOK describes a response with status code 200, with default header values.

Query result
*/
type QueryChaincodeTransactionOK struct {
	Payload *models.ProjectsHandlerResponse
}

// IsSuccess returns true when this query chaincode transaction o k response has a 2xx status code
func (o *QueryChaincodeTransactionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query chaincode transaction o k response has a 3xx status code
func (o *QueryChaincodeTransactionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode transaction o k response has a 4xx status code
func (o *QueryChaincodeTransactionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query chaincode transaction o k response has a 5xx status code
func (o *QueryChaincodeTransactionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query chaincode transaction o k response a status code equal to that given
func (o *QueryChaincodeTransactionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query chaincode transaction o k response
func (o *QueryChaincodeTransactionOK) Code() int {
	return 200
}

func (o *QueryChaincodeTransactionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionOK %s", 200, payload)
}

func (o *QueryChaincodeTransactionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionOK %s", 200, payload)
}

func (o *QueryChaincodeTransactionOK) GetPayload() *models.ProjectsHandlerResponse {
	return o.Payload
}

func (o *QueryChaincodeTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectsHandlerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewQueryChaincodeTransactionBadRequest creates a QueryChaincodeTransactionBadRequest with default headers values
func NewQueryChaincodeTransactionBadRequest() *QueryChaincodeTransactionBadRequest {
	return &QueryChaincodeTransactionBadRequest{}
}

/*
QueryChaincodeTransactionBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type QueryChaincodeTransactionBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this query chaincode transaction bad request response has a 2xx status code
func (o *QueryChaincodeTransactionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query chaincode transaction bad request response has a 3xx status code
func (o *QueryChaincodeTransactionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode transaction bad request response has a 4xx status code
func (o *QueryChaincodeTransactionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query chaincode transaction bad request response has a 5xx status code
func (o *QueryChaincodeTransactionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query chaincode transaction bad request response a status code equal to that given
func (o *QueryChaincodeTransactionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query chaincode transaction bad request response
func (o *QueryChaincodeTransactionBadRequest) Code() int {
	return 400
}

func (o *QueryChaincodeTransactionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionBadRequest %s", 400, payload)
}

func (o *QueryChaincodeTransactionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionBadRequest %s", 400, payload)
}

func (o *QueryChaincodeTransactionBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *QueryChaincodeTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewQueryChaincodeTransactionNotFound creates a QueryChaincodeTransactionNotFound with default headers values
func NewQueryChaincodeTransactionNotFound() *QueryChaincodeTransactionNotFound {
	return &QueryChaincodeTransactionNotFound{}
}

/*
QueryChaincodeTransactionNotFound describes a response with status code 404, with default header values.

Project not found
*/
type QueryChaincodeTransactionNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this query chaincode transaction not found response has a 2xx status code
func (o *QueryChaincodeTransactionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query chaincode transaction not found response has a 3xx status code
func (o *QueryChaincodeTransactionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode transaction not found response has a 4xx status code
func (o *QueryChaincodeTransactionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this query chaincode transaction not found response has a 5xx status code
func (o *QueryChaincodeTransactionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this query chaincode transaction not found response a status code equal to that given
func (o *QueryChaincodeTransactionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the query chaincode transaction not found response
func (o *QueryChaincodeTransactionNotFound) Code() int {
	return 404
}

func (o *QueryChaincodeTransactionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionNotFound %s", 404, payload)
}

func (o *QueryChaincodeTransactionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionNotFound %s", 404, payload)
}

func (o *QueryChaincodeTransactionNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *QueryChaincodeTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewQueryChaincodeTransactionInternalServerError creates a QueryChaincodeTransactionInternalServerError with default headers values
func NewQueryChaincodeTransactionInternalServerError() *QueryChaincodeTransactionInternalServerError {
	return &QueryChaincodeTransactionInternalServerError{}
}

/*
QueryChaincodeTransactionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type QueryChaincodeTransactionInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this query chaincode transaction internal server error response has a 2xx status code
func (o *QueryChaincodeTransactionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query chaincode transaction internal server error response has a 3xx status code
func (o *QueryChaincodeTransactionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode transaction internal server error response has a 4xx status code
func (o *QueryChaincodeTransactionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query chaincode transaction internal server error response has a 5xx status code
func (o *QueryChaincodeTransactionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query chaincode transaction internal server error response a status code equal to that given
func (o *QueryChaincodeTransactionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query chaincode transaction internal server error response
func (o *QueryChaincodeTransactionInternalServerError) Code() int {
	return 500
}

func (o *QueryChaincodeTransactionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionInternalServerError %s", 500, payload)
}

func (o *QueryChaincodeTransactionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/query][%d] queryChaincodeTransactionInternalServerError %s", 500, payload)
}

func (o *QueryChaincodeTransactionInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *QueryChaincodeTransactionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
