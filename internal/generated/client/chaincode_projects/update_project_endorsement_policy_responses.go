// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateProjectEndorsementPolicyReader is a Reader for the UpdateProjectEndorsementPolicy structure.
type UpdateProjectEndorsementPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectEndorsementPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProjectEndorsementPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProjectEndorsementPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProjectEndorsementPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProjectEndorsementPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /chaincode-projects/{id}/endorsement-policy] updateProjectEndorsementPolicy", response, response.Code())
	}
}

// NewUpdateProjectEndorsementPolicyOK creates a UpdateProjectEndorsementPolicyOK with default headers values
func NewUpdateProjectEndorsementPolicyOK() *UpdateProjectEndorsementPolicyOK {
	return &UpdateProjectEndorsementPolicyOK{}
}

/*
UpdateProjectEndorsementPolicyOK describes a response with status code 200, with default header values.

OK
*/
type UpdateProjectEndorsementPolicyOK struct {
	Payload *models.ProjectsProject
}

// IsSuccess returns true when this update project endorsement policy o k response has a 2xx status code
func (o *UpdateProjectEndorsementPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update project endorsement policy o k response has a 3xx status code
func (o *UpdateProjectEndorsementPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project endorsement policy o k response has a 4xx status code
func (o *UpdateProjectEndorsementPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project endorsement policy o k response has a 5xx status code
func (o *UpdateProjectEndorsementPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update project endorsement policy o k response a status code equal to that given
func (o *UpdateProjectEndorsementPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update project endorsement policy o k response
func (o *UpdateProjectEndorsementPolicyOK) Code() int {
	return 200
}

func (o *UpdateProjectEndorsementPolicyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyOK %s", 200, payload)
}

func (o *UpdateProjectEndorsementPolicyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyOK %s", 200, payload)
}

func (o *UpdateProjectEndorsementPolicyOK) GetPayload() *models.ProjectsProject {
	return o.Payload
}

func (o *UpdateProjectEndorsementPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectsProject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateProjectEndorsementPolicyBadRequest creates a UpdateProjectEndorsementPolicyBadRequest with default headers values
func NewUpdateProjectEndorsementPolicyBadRequest() *UpdateProjectEndorsementPolicyBadRequest {
	return &UpdateProjectEndorsementPolicyBadRequest{}
}

/*
UpdateProjectEndorsementPolicyBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProjectEndorsementPolicyBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update project endorsement policy bad request response has a 2xx status code
func (o *UpdateProjectEndorsementPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project endorsement policy bad request response has a 3xx status code
func (o *UpdateProjectEndorsementPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project endorsement policy bad request response has a 4xx status code
func (o *UpdateProjectEndorsementPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project endorsement policy bad request response has a 5xx status code
func (o *UpdateProjectEndorsementPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update project endorsement policy bad request response a status code equal to that given
func (o *UpdateProjectEndorsementPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update project endorsement policy bad request response
func (o *UpdateProjectEndorsementPolicyBadRequest) Code() int {
	return 400
}

func (o *UpdateProjectEndorsementPolicyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyBadRequest %s", 400, payload)
}

func (o *UpdateProjectEndorsementPolicyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyBadRequest %s", 400, payload)
}

func (o *UpdateProjectEndorsementPolicyBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateProjectEndorsementPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateProjectEndorsementPolicyNotFound creates a UpdateProjectEndorsementPolicyNotFound with default headers values
func NewUpdateProjectEndorsementPolicyNotFound() *UpdateProjectEndorsementPolicyNotFound {
	return &UpdateProjectEndorsementPolicyNotFound{}
}

/*
UpdateProjectEndorsementPolicyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProjectEndorsementPolicyNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update project endorsement policy not found response has a 2xx status code
func (o *UpdateProjectEndorsementPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project endorsement policy not found response has a 3xx status code
func (o *UpdateProjectEndorsementPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project endorsement policy not found response has a 4xx status code
func (o *UpdateProjectEndorsementPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update project endorsement policy not found response has a 5xx status code
func (o *UpdateProjectEndorsementPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update project endorsement policy not found response a status code equal to that given
func (o *UpdateProjectEndorsementPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update project endorsement policy not found response
func (o *UpdateProjectEndorsementPolicyNotFound) Code() int {
	return 404
}

func (o *UpdateProjectEndorsementPolicyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyNotFound %s", 404, payload)
}

func (o *UpdateProjectEndorsementPolicyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyNotFound %s", 404, payload)
}

func (o *UpdateProjectEndorsementPolicyNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateProjectEndorsementPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateProjectEndorsementPolicyInternalServerError creates a UpdateProjectEndorsementPolicyInternalServerError with default headers values
func NewUpdateProjectEndorsementPolicyInternalServerError() *UpdateProjectEndorsementPolicyInternalServerError {
	return &UpdateProjectEndorsementPolicyInternalServerError{}
}

/*
UpdateProjectEndorsementPolicyInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateProjectEndorsementPolicyInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update project endorsement policy internal server error response has a 2xx status code
func (o *UpdateProjectEndorsementPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update project endorsement policy internal server error response has a 3xx status code
func (o *UpdateProjectEndorsementPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update project endorsement policy internal server error response has a 4xx status code
func (o *UpdateProjectEndorsementPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update project endorsement policy internal server error response has a 5xx status code
func (o *UpdateProjectEndorsementPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update project endorsement policy internal server error response a status code equal to that given
func (o *UpdateProjectEndorsementPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update project endorsement policy internal server error response
func (o *UpdateProjectEndorsementPolicyInternalServerError) Code() int {
	return 500
}

func (o *UpdateProjectEndorsementPolicyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyInternalServerError %s", 500, payload)
}

func (o *UpdateProjectEndorsementPolicyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /chaincode-projects/{id}/endorsement-policy][%d] updateProjectEndorsementPolicyInternalServerError %s", 500, payload)
}

func (o *UpdateProjectEndorsementPolicyInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateProjectEndorsementPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
