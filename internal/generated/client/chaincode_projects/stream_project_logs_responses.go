// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StreamProjectLogsReader is a Reader for the StreamProjectLogs structure.
type StreamProjectLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StreamProjectLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStreamProjectLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStreamProjectLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStreamProjectLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStreamProjectLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/logs/stream] streamProjectLogs", response, response.Code())
	}
}

// NewStreamProjectLogsOK creates a StreamProjectLogsOK with default headers values
func NewStreamProjectLogsOK() *StreamProjectLogsOK {
	return &StreamProjectLogsOK{}
}

/*
StreamProjectLogsOK describes a response with status code 200, with default header values.

SSE stream of logs
*/
type StreamProjectLogsOK struct {
	Payload string
}

// IsSuccess returns true when this stream project logs o k response has a 2xx status code
func (o *StreamProjectLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stream project logs o k response has a 3xx status code
func (o *StreamProjectLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream project logs o k response has a 4xx status code
func (o *StreamProjectLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stream project logs o k response has a 5xx status code
func (o *StreamProjectLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stream project logs o k response a status code equal to that given
func (o *StreamProjectLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stream project logs o k response
func (o *StreamProjectLogsOK) Code() int {
	return 200
}

func (o *StreamProjectLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsOK %s", 200, payload)
}

func (o *StreamProjectLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsOK %s", 200, payload)
}

func (o *StreamProjectLogsOK) GetPayload() string {
	return o.Payload
}

func (o *StreamProjectLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStreamProjectLogsBadRequest creates a StreamProjectLogsBadRequest with default headers values
func NewStreamProjectLogsBadRequest() *StreamProjectLogsBadRequest {
	return &StreamProjectLogsBadRequest{}
}

/*
StreamProjectLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type StreamProjectLogsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stream project logs bad request response has a 2xx status code
func (o *StreamProjectLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream project logs bad request response has a 3xx status code
func (o *StreamProjectLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream project logs bad request response has a 4xx status code
func (o *StreamProjectLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream project logs bad request response has a 5xx status code
func (o *StreamProjectLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stream project logs bad request response a status code equal to that given
func (o *StreamProjectLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stream project logs bad request response
func (o *StreamProjectLogsBadRequest) Code() int {
	return 400
}

func (o *StreamProjectLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsBadRequest %s", 400, payload)
}

func (o *StreamProjectLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsBadRequest %s", 400, payload)
}

func (o *StreamProjectLogsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StreamProjectLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStreamProjectLogsNotFound creates a StreamProjectLogsNotFound with default headers values
func NewStreamProjectLogsNotFound() *StreamProjectLogsNotFound {
	return &StreamProjectLogsNotFound{}
}

/*
StreamProjectLogsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StreamProjectLogsNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stream project logs not found response has a 2xx status code
func (o *StreamProjectLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream project logs not found response has a 3xx status code
func (o *StreamProjectLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream project logs not found response has a 4xx status code
func (o *StreamProjectLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stream project logs not found response has a 5xx status code
func (o *StreamProjectLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stream project logs not found response a status code equal to that given
func (o *StreamProjectLogsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stream project logs not found response
func (o *StreamProjectLogsNotFound) Code() int {
	return 404
}

func (o *StreamProjectLogsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsNotFound %s", 404, payload)
}

func (o *StreamProjectLogsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsNotFound %s", 404, payload)
}

func (o *StreamProjectLogsNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StreamProjectLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStreamProjectLogsInternalServerError creates a StreamProjectLogsInternalServerError with default headers values
func NewStreamProjectLogsInternalServerError() *StreamProjectLogsInternalServerError {
	return &StreamProjectLogsInternalServerError{}
}

/*
StreamProjectLogsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StreamProjectLogsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stream project logs internal server error response has a 2xx status code
func (o *StreamProjectLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stream project logs internal server error response has a 3xx status code
func (o *StreamProjectLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stream project logs internal server error response has a 4xx status code
func (o *StreamProjectLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stream project logs internal server error response has a 5xx status code
func (o *StreamProjectLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stream project logs internal server error response a status code equal to that given
func (o *StreamProjectLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stream project logs internal server error response
func (o *StreamProjectLogsInternalServerError) Code() int {
	return 500
}

func (o *StreamProjectLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsInternalServerError %s", 500, payload)
}

func (o *StreamProjectLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/logs/stream][%d] streamProjectLogsInternalServerError %s", 500, payload)
}

func (o *StreamProjectLogsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StreamProjectLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
