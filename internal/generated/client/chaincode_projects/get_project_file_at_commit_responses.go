// Code generated by go-swagger; DO NOT EDIT.

package chaincode_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetProjectFileAtCommitReader is a Reader for the GetProjectFileAtCommit structure.
type GetProjectFileAtCommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectFileAtCommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectFileAtCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectFileAtCommitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectFileAtCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectFileAtCommitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/file_at_commit] getProjectFileAtCommit", response, response.Code())
	}
}

// NewGetProjectFileAtCommitOK creates a GetProjectFileAtCommitOK with default headers values
func NewGetProjectFileAtCommitOK() *GetProjectFileAtCommitOK {
	return &GetProjectFileAtCommitOK{}
}

/*
GetProjectFileAtCommitOK describes a response with status code 200, with default header values.

File contents
*/
type GetProjectFileAtCommitOK struct {
	Payload string
}

// IsSuccess returns true when this get project file at commit o k response has a 2xx status code
func (o *GetProjectFileAtCommitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project file at commit o k response has a 3xx status code
func (o *GetProjectFileAtCommitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file at commit o k response has a 4xx status code
func (o *GetProjectFileAtCommitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project file at commit o k response has a 5xx status code
func (o *GetProjectFileAtCommitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file at commit o k response a status code equal to that given
func (o *GetProjectFileAtCommitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get project file at commit o k response
func (o *GetProjectFileAtCommitOK) Code() int {
	return 200
}

func (o *GetProjectFileAtCommitOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitOK %s", 200, payload)
}

func (o *GetProjectFileAtCommitOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitOK %s", 200, payload)
}

func (o *GetProjectFileAtCommitOK) GetPayload() string {
	return o.Payload
}

func (o *GetProjectFileAtCommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileAtCommitBadRequest creates a GetProjectFileAtCommitBadRequest with default headers values
func NewGetProjectFileAtCommitBadRequest() *GetProjectFileAtCommitBadRequest {
	return &GetProjectFileAtCommitBadRequest{}
}

/*
GetProjectFileAtCommitBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProjectFileAtCommitBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file at commit bad request response has a 2xx status code
func (o *GetProjectFileAtCommitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file at commit bad request response has a 3xx status code
func (o *GetProjectFileAtCommitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file at commit bad request response has a 4xx status code
func (o *GetProjectFileAtCommitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project file at commit bad request response has a 5xx status code
func (o *GetProjectFileAtCommitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file at commit bad request response a status code equal to that given
func (o *GetProjectFileAtCommitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get project file at commit bad request response
func (o *GetProjectFileAtCommitBadRequest) Code() int {
	return 400
}

func (o *GetProjectFileAtCommitBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitBadRequest %s", 400, payload)
}

func (o *GetProjectFileAtCommitBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitBadRequest %s", 400, payload)
}

func (o *GetProjectFileAtCommitBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileAtCommitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileAtCommitNotFound creates a GetProjectFileAtCommitNotFound with default headers values
func NewGetProjectFileAtCommitNotFound() *GetProjectFileAtCommitNotFound {
	return &GetProjectFileAtCommitNotFound{}
}

/*
GetProjectFileAtCommitNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectFileAtCommitNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file at commit not found response has a 2xx status code
func (o *GetProjectFileAtCommitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file at commit not found response has a 3xx status code
func (o *GetProjectFileAtCommitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file at commit not found response has a 4xx status code
func (o *GetProjectFileAtCommitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project file at commit not found response has a 5xx status code
func (o *GetProjectFileAtCommitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project file at commit not found response a status code equal to that given
func (o *GetProjectFileAtCommitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get project file at commit not found response
func (o *GetProjectFileAtCommitNotFound) Code() int {
	return 404
}

func (o *GetProjectFileAtCommitNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitNotFound %s", 404, payload)
}

func (o *GetProjectFileAtCommitNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitNotFound %s", 404, payload)
}

func (o *GetProjectFileAtCommitNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileAtCommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetProjectFileAtCommitInternalServerError creates a GetProjectFileAtCommitInternalServerError with default headers values
func NewGetProjectFileAtCommitInternalServerError() *GetProjectFileAtCommitInternalServerError {
	return &GetProjectFileAtCommitInternalServerError{}
}

/*
GetProjectFileAtCommitInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProjectFileAtCommitInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get project file at commit internal server error response has a 2xx status code
func (o *GetProjectFileAtCommitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project file at commit internal server error response has a 3xx status code
func (o *GetProjectFileAtCommitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project file at commit internal server error response has a 4xx status code
func (o *GetProjectFileAtCommitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project file at commit internal server error response has a 5xx status code
func (o *GetProjectFileAtCommitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project file at commit internal server error response a status code equal to that given
func (o *GetProjectFileAtCommitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get project file at commit internal server error response
func (o *GetProjectFileAtCommitInternalServerError) Code() int {
	return 500
}

func (o *GetProjectFileAtCommitInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitInternalServerError %s", 500, payload)
}

func (o *GetProjectFileAtCommitInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/file_at_commit][%d] getProjectFileAtCommitInternalServerError %s", 500, payload)
}

func (o *GetProjectFileAtCommitInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetProjectFileAtCommitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
