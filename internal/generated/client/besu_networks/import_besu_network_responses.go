// Code generated by go-swagger; DO NOT EDIT.

package besu_networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ImportBesuNetworkReader is a Reader for the ImportBesuNetwork structure.
type ImportBesuNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportBesuNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewImportBesuNetworkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportBesuNetworkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImportBesuNetworkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /networks/besu/import] importBesuNetwork", response, response.Code())
	}
}

// NewImportBesuNetworkOK creates a ImportBesuNetworkOK with default headers values
func NewImportBesuNetworkOK() *ImportBesuNetworkOK {
	return &ImportBesuNetworkOK{}
}

/*
ImportBesuNetworkOK describes a response with status code 200, with default header values.

OK
*/
type ImportBesuNetworkOK struct {
	Payload *models.HTTPImportNetworkResponse
}

// IsSuccess returns true when this import besu network o k response has a 2xx status code
func (o *ImportBesuNetworkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import besu network o k response has a 3xx status code
func (o *ImportBesuNetworkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import besu network o k response has a 4xx status code
func (o *ImportBesuNetworkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import besu network o k response has a 5xx status code
func (o *ImportBesuNetworkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import besu network o k response a status code equal to that given
func (o *ImportBesuNetworkOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import besu network o k response
func (o *ImportBesuNetworkOK) Code() int {
	return 200
}

func (o *ImportBesuNetworkOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkOK %s", 200, payload)
}

func (o *ImportBesuNetworkOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkOK %s", 200, payload)
}

func (o *ImportBesuNetworkOK) GetPayload() *models.HTTPImportNetworkResponse {
	return o.Payload
}

func (o *ImportBesuNetworkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPImportNetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewImportBesuNetworkBadRequest creates a ImportBesuNetworkBadRequest with default headers values
func NewImportBesuNetworkBadRequest() *ImportBesuNetworkBadRequest {
	return &ImportBesuNetworkBadRequest{}
}

/*
ImportBesuNetworkBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ImportBesuNetworkBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this import besu network bad request response has a 2xx status code
func (o *ImportBesuNetworkBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import besu network bad request response has a 3xx status code
func (o *ImportBesuNetworkBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import besu network bad request response has a 4xx status code
func (o *ImportBesuNetworkBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import besu network bad request response has a 5xx status code
func (o *ImportBesuNetworkBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import besu network bad request response a status code equal to that given
func (o *ImportBesuNetworkBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import besu network bad request response
func (o *ImportBesuNetworkBadRequest) Code() int {
	return 400
}

func (o *ImportBesuNetworkBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkBadRequest %s", 400, payload)
}

func (o *ImportBesuNetworkBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkBadRequest %s", 400, payload)
}

func (o *ImportBesuNetworkBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *ImportBesuNetworkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewImportBesuNetworkInternalServerError creates a ImportBesuNetworkInternalServerError with default headers values
func NewImportBesuNetworkInternalServerError() *ImportBesuNetworkInternalServerError {
	return &ImportBesuNetworkInternalServerError{}
}

/*
ImportBesuNetworkInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ImportBesuNetworkInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse
}

// IsSuccess returns true when this import besu network internal server error response has a 2xx status code
func (o *ImportBesuNetworkInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import besu network internal server error response has a 3xx status code
func (o *ImportBesuNetworkInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import besu network internal server error response has a 4xx status code
func (o *ImportBesuNetworkInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this import besu network internal server error response has a 5xx status code
func (o *ImportBesuNetworkInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this import besu network internal server error response a status code equal to that given
func (o *ImportBesuNetworkInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the import besu network internal server error response
func (o *ImportBesuNetworkInternalServerError) Code() int {
	return 500
}

func (o *ImportBesuNetworkInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkInternalServerError %s", 500, payload)
}

func (o *ImportBesuNetworkInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /networks/besu/import][%d] importBesuNetworkInternalServerError %s", 500, payload)
}

func (o *ImportBesuNetworkInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse {
	return o.Payload
}

func (o *ImportBesuNetworkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNetworksHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
