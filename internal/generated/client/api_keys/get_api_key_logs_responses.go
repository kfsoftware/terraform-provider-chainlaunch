// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetAPIKeyLogsReader is a Reader for the GetAPIKeyLogs structure.
type GetAPIKeyLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIKeyLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIKeyLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIKeyLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAPIKeyLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAPIKeyLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIKeyLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api-keys/{id}/logs] getAPIKeyLogs", response, response.Code())
	}
}

// NewGetAPIKeyLogsOK creates a GetAPIKeyLogsOK with default headers values
func NewGetAPIKeyLogsOK() *GetAPIKeyLogsOK {
	return &GetAPIKeyLogsOK{}
}

/*
GetAPIKeyLogsOK describes a response with status code 200, with default header values.

OK
*/
type GetAPIKeyLogsOK struct {
	Payload []*models.AuthAPIKeyLogEntry
}

// IsSuccess returns true when this get Api key logs o k response has a 2xx status code
func (o *GetAPIKeyLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api key logs o k response has a 3xx status code
func (o *GetAPIKeyLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key logs o k response has a 4xx status code
func (o *GetAPIKeyLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api key logs o k response has a 5xx status code
func (o *GetAPIKeyLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key logs o k response a status code equal to that given
func (o *GetAPIKeyLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api key logs o k response
func (o *GetAPIKeyLogsOK) Code() int {
	return 200
}

func (o *GetAPIKeyLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsOK %s", 200, payload)
}

func (o *GetAPIKeyLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsOK %s", 200, payload)
}

func (o *GetAPIKeyLogsOK) GetPayload() []*models.AuthAPIKeyLogEntry {
	return o.Payload
}

func (o *GetAPIKeyLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyLogsBadRequest creates a GetAPIKeyLogsBadRequest with default headers values
func NewGetAPIKeyLogsBadRequest() *GetAPIKeyLogsBadRequest {
	return &GetAPIKeyLogsBadRequest{}
}

/*
GetAPIKeyLogsBadRequest describes a response with status code 400, with default header values.

Invalid parameters
*/
type GetAPIKeyLogsBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key logs bad request response has a 2xx status code
func (o *GetAPIKeyLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key logs bad request response has a 3xx status code
func (o *GetAPIKeyLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key logs bad request response has a 4xx status code
func (o *GetAPIKeyLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key logs bad request response has a 5xx status code
func (o *GetAPIKeyLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key logs bad request response a status code equal to that given
func (o *GetAPIKeyLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Api key logs bad request response
func (o *GetAPIKeyLogsBadRequest) Code() int {
	return 400
}

func (o *GetAPIKeyLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsBadRequest %s", 400, payload)
}

func (o *GetAPIKeyLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsBadRequest %s", 400, payload)
}

func (o *GetAPIKeyLogsBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyLogsUnauthorized creates a GetAPIKeyLogsUnauthorized with default headers values
func NewGetAPIKeyLogsUnauthorized() *GetAPIKeyLogsUnauthorized {
	return &GetAPIKeyLogsUnauthorized{}
}

/*
GetAPIKeyLogsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAPIKeyLogsUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key logs unauthorized response has a 2xx status code
func (o *GetAPIKeyLogsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key logs unauthorized response has a 3xx status code
func (o *GetAPIKeyLogsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key logs unauthorized response has a 4xx status code
func (o *GetAPIKeyLogsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key logs unauthorized response has a 5xx status code
func (o *GetAPIKeyLogsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key logs unauthorized response a status code equal to that given
func (o *GetAPIKeyLogsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api key logs unauthorized response
func (o *GetAPIKeyLogsUnauthorized) Code() int {
	return 401
}

func (o *GetAPIKeyLogsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsUnauthorized %s", 401, payload)
}

func (o *GetAPIKeyLogsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsUnauthorized %s", 401, payload)
}

func (o *GetAPIKeyLogsUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyLogsForbidden creates a GetAPIKeyLogsForbidden with default headers values
func NewGetAPIKeyLogsForbidden() *GetAPIKeyLogsForbidden {
	return &GetAPIKeyLogsForbidden{}
}

/*
GetAPIKeyLogsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAPIKeyLogsForbidden struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key logs forbidden response has a 2xx status code
func (o *GetAPIKeyLogsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key logs forbidden response has a 3xx status code
func (o *GetAPIKeyLogsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key logs forbidden response has a 4xx status code
func (o *GetAPIKeyLogsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key logs forbidden response has a 5xx status code
func (o *GetAPIKeyLogsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key logs forbidden response a status code equal to that given
func (o *GetAPIKeyLogsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get Api key logs forbidden response
func (o *GetAPIKeyLogsForbidden) Code() int {
	return 403
}

func (o *GetAPIKeyLogsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsForbidden %s", 403, payload)
}

func (o *GetAPIKeyLogsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsForbidden %s", 403, payload)
}

func (o *GetAPIKeyLogsForbidden) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyLogsInternalServerError creates a GetAPIKeyLogsInternalServerError with default headers values
func NewGetAPIKeyLogsInternalServerError() *GetAPIKeyLogsInternalServerError {
	return &GetAPIKeyLogsInternalServerError{}
}

/*
GetAPIKeyLogsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetAPIKeyLogsInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key logs internal server error response has a 2xx status code
func (o *GetAPIKeyLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key logs internal server error response has a 3xx status code
func (o *GetAPIKeyLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key logs internal server error response has a 4xx status code
func (o *GetAPIKeyLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api key logs internal server error response has a 5xx status code
func (o *GetAPIKeyLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Api key logs internal server error response a status code equal to that given
func (o *GetAPIKeyLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Api key logs internal server error response
func (o *GetAPIKeyLogsInternalServerError) Code() int {
	return 500
}

func (o *GetAPIKeyLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsInternalServerError %s", 500, payload)
}

func (o *GetAPIKeyLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}/logs][%d] getApiKeyLogsInternalServerError %s", 500, payload)
}

func (o *GetAPIKeyLogsInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
