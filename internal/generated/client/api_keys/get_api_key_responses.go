// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetAPIKeyReader is a Reader for the GetAPIKey structure.
type GetAPIKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAPIKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAPIKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAPIKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAPIKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAPIKeyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api-keys/{id}] getAPIKey", response, response.Code())
	}
}

// NewGetAPIKeyOK creates a GetAPIKeyOK with default headers values
func NewGetAPIKeyOK() *GetAPIKeyOK {
	return &GetAPIKeyOK{}
}

/*
GetAPIKeyOK describes a response with status code 200, with default header values.

OK
*/
type GetAPIKeyOK struct {
	Payload *models.AuthAPIKey
}

// IsSuccess returns true when this get Api key o k response has a 2xx status code
func (o *GetAPIKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api key o k response has a 3xx status code
func (o *GetAPIKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key o k response has a 4xx status code
func (o *GetAPIKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api key o k response has a 5xx status code
func (o *GetAPIKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key o k response a status code equal to that given
func (o *GetAPIKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api key o k response
func (o *GetAPIKeyOK) Code() int {
	return 200
}

func (o *GetAPIKeyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyOK %s", 200, payload)
}

func (o *GetAPIKeyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyOK %s", 200, payload)
}

func (o *GetAPIKeyOK) GetPayload() *models.AuthAPIKey {
	return o.Payload
}

func (o *GetAPIKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthAPIKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyBadRequest creates a GetAPIKeyBadRequest with default headers values
func NewGetAPIKeyBadRequest() *GetAPIKeyBadRequest {
	return &GetAPIKeyBadRequest{}
}

/*
GetAPIKeyBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type GetAPIKeyBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key bad request response has a 2xx status code
func (o *GetAPIKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key bad request response has a 3xx status code
func (o *GetAPIKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key bad request response has a 4xx status code
func (o *GetAPIKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key bad request response has a 5xx status code
func (o *GetAPIKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key bad request response a status code equal to that given
func (o *GetAPIKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get Api key bad request response
func (o *GetAPIKeyBadRequest) Code() int {
	return 400
}

func (o *GetAPIKeyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyBadRequest %s", 400, payload)
}

func (o *GetAPIKeyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyBadRequest %s", 400, payload)
}

func (o *GetAPIKeyBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyUnauthorized creates a GetAPIKeyUnauthorized with default headers values
func NewGetAPIKeyUnauthorized() *GetAPIKeyUnauthorized {
	return &GetAPIKeyUnauthorized{}
}

/*
GetAPIKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAPIKeyUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key unauthorized response has a 2xx status code
func (o *GetAPIKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key unauthorized response has a 3xx status code
func (o *GetAPIKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key unauthorized response has a 4xx status code
func (o *GetAPIKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key unauthorized response has a 5xx status code
func (o *GetAPIKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key unauthorized response a status code equal to that given
func (o *GetAPIKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api key unauthorized response
func (o *GetAPIKeyUnauthorized) Code() int {
	return 401
}

func (o *GetAPIKeyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyUnauthorized %s", 401, payload)
}

func (o *GetAPIKeyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyUnauthorized %s", 401, payload)
}

func (o *GetAPIKeyUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyForbidden creates a GetAPIKeyForbidden with default headers values
func NewGetAPIKeyForbidden() *GetAPIKeyForbidden {
	return &GetAPIKeyForbidden{}
}

/*
GetAPIKeyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAPIKeyForbidden struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key forbidden response has a 2xx status code
func (o *GetAPIKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key forbidden response has a 3xx status code
func (o *GetAPIKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key forbidden response has a 4xx status code
func (o *GetAPIKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key forbidden response has a 5xx status code
func (o *GetAPIKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key forbidden response a status code equal to that given
func (o *GetAPIKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get Api key forbidden response
func (o *GetAPIKeyForbidden) Code() int {
	return 403
}

func (o *GetAPIKeyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyForbidden %s", 403, payload)
}

func (o *GetAPIKeyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyForbidden %s", 403, payload)
}

func (o *GetAPIKeyForbidden) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyNotFound creates a GetAPIKeyNotFound with default headers values
func NewGetAPIKeyNotFound() *GetAPIKeyNotFound {
	return &GetAPIKeyNotFound{}
}

/*
GetAPIKeyNotFound describes a response with status code 404, with default header values.

API key not found
*/
type GetAPIKeyNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key not found response has a 2xx status code
func (o *GetAPIKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key not found response has a 3xx status code
func (o *GetAPIKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key not found response has a 4xx status code
func (o *GetAPIKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api key not found response has a 5xx status code
func (o *GetAPIKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api key not found response a status code equal to that given
func (o *GetAPIKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get Api key not found response
func (o *GetAPIKeyNotFound) Code() int {
	return 404
}

func (o *GetAPIKeyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyNotFound %s", 404, payload)
}

func (o *GetAPIKeyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyNotFound %s", 404, payload)
}

func (o *GetAPIKeyNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAPIKeyInternalServerError creates a GetAPIKeyInternalServerError with default headers values
func NewGetAPIKeyInternalServerError() *GetAPIKeyInternalServerError {
	return &GetAPIKeyInternalServerError{}
}

/*
GetAPIKeyInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetAPIKeyInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get Api key internal server error response has a 2xx status code
func (o *GetAPIKeyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api key internal server error response has a 3xx status code
func (o *GetAPIKeyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api key internal server error response has a 4xx status code
func (o *GetAPIKeyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api key internal server error response has a 5xx status code
func (o *GetAPIKeyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Api key internal server error response a status code equal to that given
func (o *GetAPIKeyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get Api key internal server error response
func (o *GetAPIKeyInternalServerError) Code() int {
	return 500
}

func (o *GetAPIKeyInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyInternalServerError %s", 500, payload)
}

func (o *GetAPIKeyInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api-keys/{id}][%d] getApiKeyInternalServerError %s", 500, payload)
}

func (o *GetAPIKeyInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAPIKeyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
