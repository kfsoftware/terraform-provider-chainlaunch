// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// SignCertificateReader is a Reader for the SignCertificate structure.
type SignCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewSignCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSignCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSignCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSignCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /keys/{keyID}/sign] signCertificate", response, response.Code())
	}
}

// NewSignCertificateOK creates a SignCertificateOK with default headers values
func NewSignCertificateOK() *SignCertificateOK {
	return &SignCertificateOK{}
}

/*
SignCertificateOK describes a response with status code 200, with default header values.

OK
*/
type SignCertificateOK struct {
	Payload *models.HandlerSignCertificateResponse
}

// IsSuccess returns true when this sign certificate o k response has a 2xx status code
func (o *SignCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sign certificate o k response has a 3xx status code
func (o *SignCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign certificate o k response has a 4xx status code
func (o *SignCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign certificate o k response has a 5xx status code
func (o *SignCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sign certificate o k response a status code equal to that given
func (o *SignCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sign certificate o k response
func (o *SignCertificateOK) Code() int {
	return 200
}

func (o *SignCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateOK %s", 200, payload)
}

func (o *SignCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateOK %s", 200, payload)
}

func (o *SignCertificateOK) GetPayload() *models.HandlerSignCertificateResponse {
	return o.Payload
}

func (o *SignCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerSignCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSignCertificateBadRequest creates a SignCertificateBadRequest with default headers values
func NewSignCertificateBadRequest() *SignCertificateBadRequest {
	return &SignCertificateBadRequest{}
}

/*
SignCertificateBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type SignCertificateBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this sign certificate bad request response has a 2xx status code
func (o *SignCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign certificate bad request response has a 3xx status code
func (o *SignCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign certificate bad request response has a 4xx status code
func (o *SignCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign certificate bad request response has a 5xx status code
func (o *SignCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sign certificate bad request response a status code equal to that given
func (o *SignCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sign certificate bad request response
func (o *SignCertificateBadRequest) Code() int {
	return 400
}

func (o *SignCertificateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateBadRequest %s", 400, payload)
}

func (o *SignCertificateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateBadRequest %s", 400, payload)
}

func (o *SignCertificateBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *SignCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSignCertificateNotFound creates a SignCertificateNotFound with default headers values
func NewSignCertificateNotFound() *SignCertificateNotFound {
	return &SignCertificateNotFound{}
}

/*
SignCertificateNotFound describes a response with status code 404, with default header values.

Key not found
*/
type SignCertificateNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this sign certificate not found response has a 2xx status code
func (o *SignCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign certificate not found response has a 3xx status code
func (o *SignCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign certificate not found response has a 4xx status code
func (o *SignCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign certificate not found response has a 5xx status code
func (o *SignCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sign certificate not found response a status code equal to that given
func (o *SignCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sign certificate not found response
func (o *SignCertificateNotFound) Code() int {
	return 404
}

func (o *SignCertificateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateNotFound %s", 404, payload)
}

func (o *SignCertificateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateNotFound %s", 404, payload)
}

func (o *SignCertificateNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *SignCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSignCertificateInternalServerError creates a SignCertificateInternalServerError with default headers values
func NewSignCertificateInternalServerError() *SignCertificateInternalServerError {
	return &SignCertificateInternalServerError{}
}

/*
SignCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SignCertificateInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this sign certificate internal server error response has a 2xx status code
func (o *SignCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign certificate internal server error response has a 3xx status code
func (o *SignCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign certificate internal server error response has a 4xx status code
func (o *SignCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign certificate internal server error response has a 5xx status code
func (o *SignCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sign certificate internal server error response a status code equal to that given
func (o *SignCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sign certificate internal server error response
func (o *SignCertificateInternalServerError) Code() int {
	return 500
}

func (o *SignCertificateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateInternalServerError %s", 500, payload)
}

func (o *SignCertificateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /keys/{keyID}/sign][%d] signCertificateInternalServerError %s", 500, payload)
}

func (o *SignCertificateInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *SignCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
