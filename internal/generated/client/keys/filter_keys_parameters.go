// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFilterKeysParams creates a new FilterKeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFilterKeysParams() *FilterKeysParams {
	return &FilterKeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFilterKeysParamsWithTimeout creates a new FilterKeysParams object
// with the ability to set a timeout on a request.
func NewFilterKeysParamsWithTimeout(timeout time.Duration) *FilterKeysParams {
	return &FilterKeysParams{
		timeout: timeout,
	}
}

// NewFilterKeysParamsWithContext creates a new FilterKeysParams object
// with the ability to set a context for a request.
func NewFilterKeysParamsWithContext(ctx context.Context) *FilterKeysParams {
	return &FilterKeysParams{
		Context: ctx,
	}
}

// NewFilterKeysParamsWithHTTPClient creates a new FilterKeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewFilterKeysParamsWithHTTPClient(client *http.Client) *FilterKeysParams {
	return &FilterKeysParams{
		HTTPClient: client,
	}
}

/*
FilterKeysParams contains all the parameters to send to the API endpoint

	for the filter keys operation.

	Typically these are written to a http.Request.
*/
type FilterKeysParams struct {

	/* Algorithm.

	   Algorithm type (e.g., RSA, ECDSA)
	*/
	Algorithm *string

	/* Curve.

	   Curve type (e.g., P256, P384, P521)
	*/
	Curve *string

	/* Page.

	   Page number

	   Default: 1
	*/
	Page *int64

	/* PageSize.

	   Page size

	   Default: 10
	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the filter keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FilterKeysParams) WithDefaults() *FilterKeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the filter keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FilterKeysParams) SetDefaults() {
	var (
		pageDefault = int64(1)

		pageSizeDefault = int64(10)
	)

	val := FilterKeysParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the filter keys params
func (o *FilterKeysParams) WithTimeout(timeout time.Duration) *FilterKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filter keys params
func (o *FilterKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filter keys params
func (o *FilterKeysParams) WithContext(ctx context.Context) *FilterKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filter keys params
func (o *FilterKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the filter keys params
func (o *FilterKeysParams) WithHTTPClient(client *http.Client) *FilterKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the filter keys params
func (o *FilterKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlgorithm adds the algorithm to the filter keys params
func (o *FilterKeysParams) WithAlgorithm(algorithm *string) *FilterKeysParams {
	o.SetAlgorithm(algorithm)
	return o
}

// SetAlgorithm adds the algorithm to the filter keys params
func (o *FilterKeysParams) SetAlgorithm(algorithm *string) {
	o.Algorithm = algorithm
}

// WithCurve adds the curve to the filter keys params
func (o *FilterKeysParams) WithCurve(curve *string) *FilterKeysParams {
	o.SetCurve(curve)
	return o
}

// SetCurve adds the curve to the filter keys params
func (o *FilterKeysParams) SetCurve(curve *string) {
	o.Curve = curve
}

// WithPage adds the page to the filter keys params
func (o *FilterKeysParams) WithPage(page *int64) *FilterKeysParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the filter keys params
func (o *FilterKeysParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the filter keys params
func (o *FilterKeysParams) WithPageSize(pageSize *int64) *FilterKeysParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the filter keys params
func (o *FilterKeysParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *FilterKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Algorithm != nil {

		// query param algorithm
		var qrAlgorithm string

		if o.Algorithm != nil {
			qrAlgorithm = *o.Algorithm
		}
		qAlgorithm := qrAlgorithm
		if qAlgorithm != "" {

			if err := r.SetQueryParam("algorithm", qAlgorithm); err != nil {
				return err
			}
		}
	}

	if o.Curve != nil {

		// query param curve
		var qrCurve string

		if o.Curve != nil {
			qrCurve = *o.Curve
		}
		qCurve := qrCurve
		if qCurve != "" {

			if err := r.SetQueryParam("curve", qCurve); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
