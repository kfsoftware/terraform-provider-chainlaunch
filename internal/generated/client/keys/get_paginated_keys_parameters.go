// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPaginatedKeysParams creates a new GetPaginatedKeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPaginatedKeysParams() *GetPaginatedKeysParams {
	return &GetPaginatedKeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPaginatedKeysParamsWithTimeout creates a new GetPaginatedKeysParams object
// with the ability to set a timeout on a request.
func NewGetPaginatedKeysParamsWithTimeout(timeout time.Duration) *GetPaginatedKeysParams {
	return &GetPaginatedKeysParams{
		timeout: timeout,
	}
}

// NewGetPaginatedKeysParamsWithContext creates a new GetPaginatedKeysParams object
// with the ability to set a context for a request.
func NewGetPaginatedKeysParamsWithContext(ctx context.Context) *GetPaginatedKeysParams {
	return &GetPaginatedKeysParams{
		Context: ctx,
	}
}

// NewGetPaginatedKeysParamsWithHTTPClient creates a new GetPaginatedKeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPaginatedKeysParamsWithHTTPClient(client *http.Client) *GetPaginatedKeysParams {
	return &GetPaginatedKeysParams{
		HTTPClient: client,
	}
}

/*
GetPaginatedKeysParams contains all the parameters to send to the API endpoint

	for the get paginated keys operation.

	Typically these are written to a http.Request.
*/
type GetPaginatedKeysParams struct {

	/* Page.

	   Page number

	   Default: 1
	*/
	Page *int64

	/* PageSize.

	   Page size

	   Default: 10
	*/
	PageSize *int64

	/* ProviderID.

	   Filter by provider ID
	*/
	ProviderID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get paginated keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPaginatedKeysParams) WithDefaults() *GetPaginatedKeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get paginated keys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPaginatedKeysParams) SetDefaults() {
	var (
		pageDefault = int64(1)

		pageSizeDefault = int64(10)
	)

	val := GetPaginatedKeysParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get paginated keys params
func (o *GetPaginatedKeysParams) WithTimeout(timeout time.Duration) *GetPaginatedKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get paginated keys params
func (o *GetPaginatedKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get paginated keys params
func (o *GetPaginatedKeysParams) WithContext(ctx context.Context) *GetPaginatedKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get paginated keys params
func (o *GetPaginatedKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get paginated keys params
func (o *GetPaginatedKeysParams) WithHTTPClient(client *http.Client) *GetPaginatedKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get paginated keys params
func (o *GetPaginatedKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPage adds the page to the get paginated keys params
func (o *GetPaginatedKeysParams) WithPage(page *int64) *GetPaginatedKeysParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get paginated keys params
func (o *GetPaginatedKeysParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get paginated keys params
func (o *GetPaginatedKeysParams) WithPageSize(pageSize *int64) *GetPaginatedKeysParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get paginated keys params
func (o *GetPaginatedKeysParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithProviderID adds the providerID to the get paginated keys params
func (o *GetPaginatedKeysParams) WithProviderID(providerID *int64) *GetPaginatedKeysParams {
	o.SetProviderID(providerID)
	return o
}

// SetProviderID adds the providerId to the get paginated keys params
func (o *GetPaginatedKeysParams) SetProviderID(providerID *int64) {
	o.ProviderID = providerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPaginatedKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ProviderID != nil {

		// query param provider_id
		var qrProviderID int64

		if o.ProviderID != nil {
			qrProviderID = *o.ProviderID
		}
		qProviderID := swag.FormatInt64(qrProviderID)
		if qProviderID != "" {

			if err := r.SetQueryParam("provider_id", qProviderID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
