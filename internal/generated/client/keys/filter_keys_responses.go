// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// FilterKeysReader is a Reader for the FilterKeys structure.
type FilterKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FilterKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewFilterKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFilterKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFilterKeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /keys/filter] filterKeys", response, response.Code())
	}
}

// NewFilterKeysOK creates a FilterKeysOK with default headers values
func NewFilterKeysOK() *FilterKeysOK {
	return &FilterKeysOK{}
}

/*
FilterKeysOK describes a response with status code 200, with default header values.

OK
*/
type FilterKeysOK struct {
	Payload *models.ModelsPaginatedResponse
}

// IsSuccess returns true when this filter keys o k response has a 2xx status code
func (o *FilterKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this filter keys o k response has a 3xx status code
func (o *FilterKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter keys o k response has a 4xx status code
func (o *FilterKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter keys o k response has a 5xx status code
func (o *FilterKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this filter keys o k response a status code equal to that given
func (o *FilterKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the filter keys o k response
func (o *FilterKeysOK) Code() int {
	return 200
}

func (o *FilterKeysOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysOK %s", 200, payload)
}

func (o *FilterKeysOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysOK %s", 200, payload)
}

func (o *FilterKeysOK) GetPayload() *models.ModelsPaginatedResponse {
	return o.Payload
}

func (o *FilterKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsPaginatedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewFilterKeysBadRequest creates a FilterKeysBadRequest with default headers values
func NewFilterKeysBadRequest() *FilterKeysBadRequest {
	return &FilterKeysBadRequest{}
}

/*
FilterKeysBadRequest describes a response with status code 400, with default header values.

Invalid parameters
*/
type FilterKeysBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this filter keys bad request response has a 2xx status code
func (o *FilterKeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter keys bad request response has a 3xx status code
func (o *FilterKeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter keys bad request response has a 4xx status code
func (o *FilterKeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this filter keys bad request response has a 5xx status code
func (o *FilterKeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this filter keys bad request response a status code equal to that given
func (o *FilterKeysBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the filter keys bad request response
func (o *FilterKeysBadRequest) Code() int {
	return 400
}

func (o *FilterKeysBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysBadRequest %s", 400, payload)
}

func (o *FilterKeysBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysBadRequest %s", 400, payload)
}

func (o *FilterKeysBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *FilterKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewFilterKeysInternalServerError creates a FilterKeysInternalServerError with default headers values
func NewFilterKeysInternalServerError() *FilterKeysInternalServerError {
	return &FilterKeysInternalServerError{}
}

/*
FilterKeysInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type FilterKeysInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this filter keys internal server error response has a 2xx status code
func (o *FilterKeysInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this filter keys internal server error response has a 3xx status code
func (o *FilterKeysInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this filter keys internal server error response has a 4xx status code
func (o *FilterKeysInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this filter keys internal server error response has a 5xx status code
func (o *FilterKeysInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this filter keys internal server error response a status code equal to that given
func (o *FilterKeysInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the filter keys internal server error response
func (o *FilterKeysInternalServerError) Code() int {
	return 500
}

func (o *FilterKeysInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysInternalServerError %s", 500, payload)
}

func (o *FilterKeysInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /keys/filter][%d] filterKeysInternalServerError %s", 500, payload)
}

func (o *FilterKeysInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *FilterKeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
