// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new keys API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new keys API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateKey(params *CreateKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKeyCreated, error)

	DeleteKey(params *DeleteKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKeyNoContent, error)

	FilterKeys(params *FilterKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterKeysOK, error)

	GetAllKeys(params *GetAllKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKeysOK, error)

	GetKeyByID(params *GetKeyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKeyByIDOK, error)

	GetPaginatedKeys(params *GetPaginatedKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaginatedKeysOK, error)

	SignCertificate(params *SignCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignCertificateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateKey creates a new key

Create a new key pair with specified algorithm and parameters
*/
func (a *Client) CreateKey(params *CreateKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKeyCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createKey",
		Method:             "POST",
		PathPattern:        "/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateKeyCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteKey deletes a key

Delete a specific key by ID
*/
func (a *Client) DeleteKey(params *DeleteKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKeyNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteKey",
		Method:             "DELETE",
		PathPattern:        "/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteKeyNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FilterKeys filters keys by algorithm and curve

Get keys filtered by algorithm type and/or curve type
*/
func (a *Client) FilterKeys(params *FilterKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FilterKeysOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewFilterKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "filterKeys",
		Method:             "GET",
		PathPattern:        "/keys/filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilterKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*FilterKeysOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for filterKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllKeys gets all keys

Get all keys with their certificates and metadata
*/
func (a *Client) GetAllKeys(params *GetAllKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKeysOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetAllKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllKeys",
		Method:             "GET",
		PathPattern:        "/keys/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetAllKeysOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKeyByID gets a specific key by ID

Get detailed information about a specific key
*/
func (a *Client) GetKeyByID(params *GetKeyByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKeyByIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetKeyByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKeyById",
		Method:             "GET",
		PathPattern:        "/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKeyByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetKeyByIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKeyById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaginatedKeys gets paginated keys

Get a paginated list of keys
*/
func (a *Client) GetPaginatedKeys(params *GetPaginatedKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaginatedKeysOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetPaginatedKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaginatedKeys",
		Method:             "GET",
		PathPattern:        "/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPaginatedKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetPaginatedKeysOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaginatedKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignCertificate signs a certificate

Sign a certificate for a key using a CA key
*/
func (a *Client) SignCertificate(params *SignCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignCertificateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSignCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signCertificate",
		Method:             "POST",
		PathPattern:        "/keys/{keyID}/sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SignCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SignCertificateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for signCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
