// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// NewSignCertificateParams creates a new SignCertificateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSignCertificateParams() *SignCertificateParams {
	return &SignCertificateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSignCertificateParamsWithTimeout creates a new SignCertificateParams object
// with the ability to set a timeout on a request.
func NewSignCertificateParamsWithTimeout(timeout time.Duration) *SignCertificateParams {
	return &SignCertificateParams{
		timeout: timeout,
	}
}

// NewSignCertificateParamsWithContext creates a new SignCertificateParams object
// with the ability to set a context for a request.
func NewSignCertificateParamsWithContext(ctx context.Context) *SignCertificateParams {
	return &SignCertificateParams{
		Context: ctx,
	}
}

// NewSignCertificateParamsWithHTTPClient creates a new SignCertificateParams object
// with the ability to set a custom HTTPClient for a request.
func NewSignCertificateParamsWithHTTPClient(client *http.Client) *SignCertificateParams {
	return &SignCertificateParams{
		HTTPClient: client,
	}
}

/*
SignCertificateParams contains all the parameters to send to the API endpoint

	for the sign certificate operation.

	Typically these are written to a http.Request.
*/
type SignCertificateParams struct {

	/* KeyID.

	   Key ID to sign
	*/
	KeyID int64

	/* Request.

	   Certificate signing request
	*/
	Request *models.HandlerSignCertificateHandlerRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sign certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignCertificateParams) WithDefaults() *SignCertificateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sign certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SignCertificateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the sign certificate params
func (o *SignCertificateParams) WithTimeout(timeout time.Duration) *SignCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sign certificate params
func (o *SignCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sign certificate params
func (o *SignCertificateParams) WithContext(ctx context.Context) *SignCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sign certificate params
func (o *SignCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sign certificate params
func (o *SignCertificateParams) WithHTTPClient(client *http.Client) *SignCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sign certificate params
func (o *SignCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyID adds the keyID to the sign certificate params
func (o *SignCertificateParams) WithKeyID(keyID int64) *SignCertificateParams {
	o.SetKeyID(keyID)
	return o
}

// SetKeyID adds the keyId to the sign certificate params
func (o *SignCertificateParams) SetKeyID(keyID int64) {
	o.KeyID = keyID
}

// WithRequest adds the request to the sign certificate params
func (o *SignCertificateParams) WithRequest(request *models.HandlerSignCertificateHandlerRequest) *SignCertificateParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the sign certificate params
func (o *SignCertificateParams) SetRequest(request *models.HandlerSignCertificateHandlerRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *SignCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param keyID
	if err := r.SetPathParam("keyID", swag.FormatInt64(o.KeyID)); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
