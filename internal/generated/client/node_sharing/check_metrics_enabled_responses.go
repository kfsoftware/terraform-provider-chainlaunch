// Code generated by go-swagger; DO NOT EDIT.

package node_sharing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// CheckMetricsEnabledReader is a Reader for the CheckMetricsEnabled structure.
type CheckMetricsEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckMetricsEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewCheckMetricsEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckMetricsEnabledBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCheckMetricsEnabledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCheckMetricsEnabledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /node/metrics-enabled] checkMetricsEnabled", response, response.Code())
	}
}

// NewCheckMetricsEnabledOK creates a CheckMetricsEnabledOK with default headers values
func NewCheckMetricsEnabledOK() *CheckMetricsEnabledOK {
	return &CheckMetricsEnabledOK{}
}

/*
CheckMetricsEnabledOK describes a response with status code 200, with default header values.

Metrics status response
*/
type CheckMetricsEnabledOK struct {
	Payload *models.CommunicationMetricsEnabledResponse
}

// IsSuccess returns true when this check metrics enabled o k response has a 2xx status code
func (o *CheckMetricsEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check metrics enabled o k response has a 3xx status code
func (o *CheckMetricsEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check metrics enabled o k response has a 4xx status code
func (o *CheckMetricsEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check metrics enabled o k response has a 5xx status code
func (o *CheckMetricsEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check metrics enabled o k response a status code equal to that given
func (o *CheckMetricsEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check metrics enabled o k response
func (o *CheckMetricsEnabledOK) Code() int {
	return 200
}

func (o *CheckMetricsEnabledOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledOK %s", 200, payload)
}

func (o *CheckMetricsEnabledOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledOK %s", 200, payload)
}

func (o *CheckMetricsEnabledOK) GetPayload() *models.CommunicationMetricsEnabledResponse {
	return o.Payload
}

func (o *CheckMetricsEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationMetricsEnabledResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCheckMetricsEnabledBadRequest creates a CheckMetricsEnabledBadRequest with default headers values
func NewCheckMetricsEnabledBadRequest() *CheckMetricsEnabledBadRequest {
	return &CheckMetricsEnabledBadRequest{}
}

/*
CheckMetricsEnabledBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckMetricsEnabledBadRequest struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this check metrics enabled bad request response has a 2xx status code
func (o *CheckMetricsEnabledBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check metrics enabled bad request response has a 3xx status code
func (o *CheckMetricsEnabledBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check metrics enabled bad request response has a 4xx status code
func (o *CheckMetricsEnabledBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this check metrics enabled bad request response has a 5xx status code
func (o *CheckMetricsEnabledBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this check metrics enabled bad request response a status code equal to that given
func (o *CheckMetricsEnabledBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the check metrics enabled bad request response
func (o *CheckMetricsEnabledBadRequest) Code() int {
	return 400
}

func (o *CheckMetricsEnabledBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledBadRequest %s", 400, payload)
}

func (o *CheckMetricsEnabledBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledBadRequest %s", 400, payload)
}

func (o *CheckMetricsEnabledBadRequest) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *CheckMetricsEnabledBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCheckMetricsEnabledUnauthorized creates a CheckMetricsEnabledUnauthorized with default headers values
func NewCheckMetricsEnabledUnauthorized() *CheckMetricsEnabledUnauthorized {
	return &CheckMetricsEnabledUnauthorized{}
}

/*
CheckMetricsEnabledUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckMetricsEnabledUnauthorized struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this check metrics enabled unauthorized response has a 2xx status code
func (o *CheckMetricsEnabledUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check metrics enabled unauthorized response has a 3xx status code
func (o *CheckMetricsEnabledUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check metrics enabled unauthorized response has a 4xx status code
func (o *CheckMetricsEnabledUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this check metrics enabled unauthorized response has a 5xx status code
func (o *CheckMetricsEnabledUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this check metrics enabled unauthorized response a status code equal to that given
func (o *CheckMetricsEnabledUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the check metrics enabled unauthorized response
func (o *CheckMetricsEnabledUnauthorized) Code() int {
	return 401
}

func (o *CheckMetricsEnabledUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledUnauthorized %s", 401, payload)
}

func (o *CheckMetricsEnabledUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledUnauthorized %s", 401, payload)
}

func (o *CheckMetricsEnabledUnauthorized) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *CheckMetricsEnabledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCheckMetricsEnabledInternalServerError creates a CheckMetricsEnabledInternalServerError with default headers values
func NewCheckMetricsEnabledInternalServerError() *CheckMetricsEnabledInternalServerError {
	return &CheckMetricsEnabledInternalServerError{}
}

/*
CheckMetricsEnabledInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CheckMetricsEnabledInternalServerError struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this check metrics enabled internal server error response has a 2xx status code
func (o *CheckMetricsEnabledInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check metrics enabled internal server error response has a 3xx status code
func (o *CheckMetricsEnabledInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check metrics enabled internal server error response has a 4xx status code
func (o *CheckMetricsEnabledInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this check metrics enabled internal server error response has a 5xx status code
func (o *CheckMetricsEnabledInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this check metrics enabled internal server error response a status code equal to that given
func (o *CheckMetricsEnabledInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the check metrics enabled internal server error response
func (o *CheckMetricsEnabledInternalServerError) Code() int {
	return 500
}

func (o *CheckMetricsEnabledInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledInternalServerError %s", 500, payload)
}

func (o *CheckMetricsEnabledInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-enabled][%d] checkMetricsEnabledInternalServerError %s", 500, payload)
}

func (o *CheckMetricsEnabledInternalServerError) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *CheckMetricsEnabledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
