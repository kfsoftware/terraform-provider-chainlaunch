// Code generated by go-swagger; DO NOT EDIT.

package node_sharing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// MetricsFederationReader is a Reader for the MetricsFederation structure.
type MetricsFederationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MetricsFederationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewMetricsFederationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMetricsFederationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMetricsFederationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /node/metrics-federation] metricsFederation", response, response.Code())
	}
}

// NewMetricsFederationOK creates a MetricsFederationOK with default headers values
func NewMetricsFederationOK() *MetricsFederationOK {
	return &MetricsFederationOK{}
}

/*
MetricsFederationOK describes a response with status code 200, with default header values.

Success response
*/
type MetricsFederationOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this metrics federation o k response has a 2xx status code
func (o *MetricsFederationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this metrics federation o k response has a 3xx status code
func (o *MetricsFederationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this metrics federation o k response has a 4xx status code
func (o *MetricsFederationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this metrics federation o k response has a 5xx status code
func (o *MetricsFederationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this metrics federation o k response a status code equal to that given
func (o *MetricsFederationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the metrics federation o k response
func (o *MetricsFederationOK) Code() int {
	return 200
}

func (o *MetricsFederationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationOK %s", 200, payload)
}

func (o *MetricsFederationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationOK %s", 200, payload)
}

func (o *MetricsFederationOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *MetricsFederationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewMetricsFederationBadRequest creates a MetricsFederationBadRequest with default headers values
func NewMetricsFederationBadRequest() *MetricsFederationBadRequest {
	return &MetricsFederationBadRequest{}
}

/*
MetricsFederationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type MetricsFederationBadRequest struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this metrics federation bad request response has a 2xx status code
func (o *MetricsFederationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this metrics federation bad request response has a 3xx status code
func (o *MetricsFederationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this metrics federation bad request response has a 4xx status code
func (o *MetricsFederationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this metrics federation bad request response has a 5xx status code
func (o *MetricsFederationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this metrics federation bad request response a status code equal to that given
func (o *MetricsFederationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the metrics federation bad request response
func (o *MetricsFederationBadRequest) Code() int {
	return 400
}

func (o *MetricsFederationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationBadRequest %s", 400, payload)
}

func (o *MetricsFederationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationBadRequest %s", 400, payload)
}

func (o *MetricsFederationBadRequest) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *MetricsFederationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewMetricsFederationInternalServerError creates a MetricsFederationInternalServerError with default headers values
func NewMetricsFederationInternalServerError() *MetricsFederationInternalServerError {
	return &MetricsFederationInternalServerError{}
}

/*
MetricsFederationInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type MetricsFederationInternalServerError struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this metrics federation internal server error response has a 2xx status code
func (o *MetricsFederationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this metrics federation internal server error response has a 3xx status code
func (o *MetricsFederationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this metrics federation internal server error response has a 4xx status code
func (o *MetricsFederationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this metrics federation internal server error response has a 5xx status code
func (o *MetricsFederationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this metrics federation internal server error response a status code equal to that given
func (o *MetricsFederationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the metrics federation internal server error response
func (o *MetricsFederationInternalServerError) Code() int {
	return 500
}

func (o *MetricsFederationInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationInternalServerError %s", 500, payload)
}

func (o *MetricsFederationInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/metrics-federation][%d] metricsFederationInternalServerError %s", 500, payload)
}

func (o *MetricsFederationInternalServerError) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *MetricsFederationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
