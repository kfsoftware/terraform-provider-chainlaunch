// Code generated by go-swagger; DO NOT EDIT.

package node_sharing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RemoveConnectedPeerReader is a Reader for the RemoveConnectedPeer structure.
type RemoveConnectedPeerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveConnectedPeerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveConnectedPeerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveConnectedPeerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveConnectedPeerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /node/connected-peers/{node_id}] removeConnectedPeer", response, response.Code())
	}
}

// NewRemoveConnectedPeerOK creates a RemoveConnectedPeerOK with default headers values
func NewRemoveConnectedPeerOK() *RemoveConnectedPeerOK {
	return &RemoveConnectedPeerOK{}
}

/*
RemoveConnectedPeerOK describes a response with status code 200, with default header values.

Success response
*/
type RemoveConnectedPeerOK struct {
	Payload *models.CommunicationRemoveConnectedPeerResponse
}

// IsSuccess returns true when this remove connected peer o k response has a 2xx status code
func (o *RemoveConnectedPeerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove connected peer o k response has a 3xx status code
func (o *RemoveConnectedPeerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove connected peer o k response has a 4xx status code
func (o *RemoveConnectedPeerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove connected peer o k response has a 5xx status code
func (o *RemoveConnectedPeerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this remove connected peer o k response a status code equal to that given
func (o *RemoveConnectedPeerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the remove connected peer o k response
func (o *RemoveConnectedPeerOK) Code() int {
	return 200
}

func (o *RemoveConnectedPeerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerOK %s", 200, payload)
}

func (o *RemoveConnectedPeerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerOK %s", 200, payload)
}

func (o *RemoveConnectedPeerOK) GetPayload() *models.CommunicationRemoveConnectedPeerResponse {
	return o.Payload
}

func (o *RemoveConnectedPeerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationRemoveConnectedPeerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRemoveConnectedPeerBadRequest creates a RemoveConnectedPeerBadRequest with default headers values
func NewRemoveConnectedPeerBadRequest() *RemoveConnectedPeerBadRequest {
	return &RemoveConnectedPeerBadRequest{}
}

/*
RemoveConnectedPeerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveConnectedPeerBadRequest struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this remove connected peer bad request response has a 2xx status code
func (o *RemoveConnectedPeerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove connected peer bad request response has a 3xx status code
func (o *RemoveConnectedPeerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove connected peer bad request response has a 4xx status code
func (o *RemoveConnectedPeerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove connected peer bad request response has a 5xx status code
func (o *RemoveConnectedPeerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove connected peer bad request response a status code equal to that given
func (o *RemoveConnectedPeerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove connected peer bad request response
func (o *RemoveConnectedPeerBadRequest) Code() int {
	return 400
}

func (o *RemoveConnectedPeerBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerBadRequest %s", 400, payload)
}

func (o *RemoveConnectedPeerBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerBadRequest %s", 400, payload)
}

func (o *RemoveConnectedPeerBadRequest) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *RemoveConnectedPeerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRemoveConnectedPeerInternalServerError creates a RemoveConnectedPeerInternalServerError with default headers values
func NewRemoveConnectedPeerInternalServerError() *RemoveConnectedPeerInternalServerError {
	return &RemoveConnectedPeerInternalServerError{}
}

/*
RemoveConnectedPeerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RemoveConnectedPeerInternalServerError struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this remove connected peer internal server error response has a 2xx status code
func (o *RemoveConnectedPeerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove connected peer internal server error response has a 3xx status code
func (o *RemoveConnectedPeerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove connected peer internal server error response has a 4xx status code
func (o *RemoveConnectedPeerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove connected peer internal server error response has a 5xx status code
func (o *RemoveConnectedPeerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove connected peer internal server error response a status code equal to that given
func (o *RemoveConnectedPeerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove connected peer internal server error response
func (o *RemoveConnectedPeerInternalServerError) Code() int {
	return 500
}

func (o *RemoveConnectedPeerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerInternalServerError %s", 500, payload)
}

func (o *RemoveConnectedPeerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /node/connected-peers/{node_id}][%d] removeConnectedPeerInternalServerError %s", 500, payload)
}

func (o *RemoveConnectedPeerInternalServerError) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *RemoveConnectedPeerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
