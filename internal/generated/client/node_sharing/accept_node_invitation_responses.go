// Code generated by go-swagger; DO NOT EDIT.

package node_sharing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// AcceptNodeInvitationReader is a Reader for the AcceptNodeInvitation structure.
type AcceptNodeInvitationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptNodeInvitationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptNodeInvitationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptNodeInvitationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /node/accept-invitation] acceptNodeInvitation", response, response.Code())
	}
}

// NewAcceptNodeInvitationOK creates a AcceptNodeInvitationOK with default headers values
func NewAcceptNodeInvitationOK() *AcceptNodeInvitationOK {
	return &AcceptNodeInvitationOK{}
}

/*
AcceptNodeInvitationOK describes a response with status code 200, with default header values.

OK
*/
type AcceptNodeInvitationOK struct {
	Payload *models.CommunicationNodeAcceptInvitationResponse
}

// IsSuccess returns true when this accept node invitation o k response has a 2xx status code
func (o *AcceptNodeInvitationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept node invitation o k response has a 3xx status code
func (o *AcceptNodeInvitationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept node invitation o k response has a 4xx status code
func (o *AcceptNodeInvitationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept node invitation o k response has a 5xx status code
func (o *AcceptNodeInvitationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept node invitation o k response a status code equal to that given
func (o *AcceptNodeInvitationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the accept node invitation o k response
func (o *AcceptNodeInvitationOK) Code() int {
	return 200
}

func (o *AcceptNodeInvitationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/accept-invitation][%d] acceptNodeInvitationOK %s", 200, payload)
}

func (o *AcceptNodeInvitationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/accept-invitation][%d] acceptNodeInvitationOK %s", 200, payload)
}

func (o *AcceptNodeInvitationOK) GetPayload() *models.CommunicationNodeAcceptInvitationResponse {
	return o.Payload
}

func (o *AcceptNodeInvitationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationNodeAcceptInvitationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptNodeInvitationBadRequest creates a AcceptNodeInvitationBadRequest with default headers values
func NewAcceptNodeInvitationBadRequest() *AcceptNodeInvitationBadRequest {
	return &AcceptNodeInvitationBadRequest{}
}

/*
AcceptNodeInvitationBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AcceptNodeInvitationBadRequest struct {
	Payload *models.CommunicationErrorResponse
}

// IsSuccess returns true when this accept node invitation bad request response has a 2xx status code
func (o *AcceptNodeInvitationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept node invitation bad request response has a 3xx status code
func (o *AcceptNodeInvitationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept node invitation bad request response has a 4xx status code
func (o *AcceptNodeInvitationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept node invitation bad request response has a 5xx status code
func (o *AcceptNodeInvitationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this accept node invitation bad request response a status code equal to that given
func (o *AcceptNodeInvitationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the accept node invitation bad request response
func (o *AcceptNodeInvitationBadRequest) Code() int {
	return 400
}

func (o *AcceptNodeInvitationBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/accept-invitation][%d] acceptNodeInvitationBadRequest %s", 400, payload)
}

func (o *AcceptNodeInvitationBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /node/accept-invitation][%d] acceptNodeInvitationBadRequest %s", 400, payload)
}

func (o *AcceptNodeInvitationBadRequest) GetPayload() *models.CommunicationErrorResponse {
	return o.Payload
}

func (o *AcceptNodeInvitationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CommunicationErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
