// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RenewOrganizationCertificateReader is a Reader for the RenewOrganizationCertificate structure.
type RenewOrganizationCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenewOrganizationCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRenewOrganizationCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenewOrganizationCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenewOrganizationCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenewOrganizationCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{id}/keys/renew] renewOrganizationCertificate", response, response.Code())
	}
}

// NewRenewOrganizationCertificateOK creates a RenewOrganizationCertificateOK with default headers values
func NewRenewOrganizationCertificateOK() *RenewOrganizationCertificateOK {
	return &RenewOrganizationCertificateOK{}
}

/*
RenewOrganizationCertificateOK describes a response with status code 200, with default header values.

OK
*/
type RenewOrganizationCertificateOK struct {
	Payload *models.HandlerKeyResponse
}

// IsSuccess returns true when this renew organization certificate o k response has a 2xx status code
func (o *RenewOrganizationCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this renew organization certificate o k response has a 3xx status code
func (o *RenewOrganizationCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew organization certificate o k response has a 4xx status code
func (o *RenewOrganizationCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this renew organization certificate o k response has a 5xx status code
func (o *RenewOrganizationCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this renew organization certificate o k response a status code equal to that given
func (o *RenewOrganizationCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the renew organization certificate o k response
func (o *RenewOrganizationCertificateOK) Code() int {
	return 200
}

func (o *RenewOrganizationCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateOK %s", 200, payload)
}

func (o *RenewOrganizationCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateOK %s", 200, payload)
}

func (o *RenewOrganizationCertificateOK) GetPayload() *models.HandlerKeyResponse {
	return o.Payload
}

func (o *RenewOrganizationCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerKeyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewOrganizationCertificateBadRequest creates a RenewOrganizationCertificateBadRequest with default headers values
func NewRenewOrganizationCertificateBadRequest() *RenewOrganizationCertificateBadRequest {
	return &RenewOrganizationCertificateBadRequest{}
}

/*
RenewOrganizationCertificateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RenewOrganizationCertificateBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this renew organization certificate bad request response has a 2xx status code
func (o *RenewOrganizationCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew organization certificate bad request response has a 3xx status code
func (o *RenewOrganizationCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew organization certificate bad request response has a 4xx status code
func (o *RenewOrganizationCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this renew organization certificate bad request response has a 5xx status code
func (o *RenewOrganizationCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this renew organization certificate bad request response a status code equal to that given
func (o *RenewOrganizationCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the renew organization certificate bad request response
func (o *RenewOrganizationCertificateBadRequest) Code() int {
	return 400
}

func (o *RenewOrganizationCertificateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateBadRequest %s", 400, payload)
}

func (o *RenewOrganizationCertificateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateBadRequest %s", 400, payload)
}

func (o *RenewOrganizationCertificateBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *RenewOrganizationCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewOrganizationCertificateNotFound creates a RenewOrganizationCertificateNotFound with default headers values
func NewRenewOrganizationCertificateNotFound() *RenewOrganizationCertificateNotFound {
	return &RenewOrganizationCertificateNotFound{}
}

/*
RenewOrganizationCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenewOrganizationCertificateNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this renew organization certificate not found response has a 2xx status code
func (o *RenewOrganizationCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew organization certificate not found response has a 3xx status code
func (o *RenewOrganizationCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew organization certificate not found response has a 4xx status code
func (o *RenewOrganizationCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this renew organization certificate not found response has a 5xx status code
func (o *RenewOrganizationCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this renew organization certificate not found response a status code equal to that given
func (o *RenewOrganizationCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the renew organization certificate not found response
func (o *RenewOrganizationCertificateNotFound) Code() int {
	return 404
}

func (o *RenewOrganizationCertificateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateNotFound %s", 404, payload)
}

func (o *RenewOrganizationCertificateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateNotFound %s", 404, payload)
}

func (o *RenewOrganizationCertificateNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *RenewOrganizationCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewOrganizationCertificateInternalServerError creates a RenewOrganizationCertificateInternalServerError with default headers values
func NewRenewOrganizationCertificateInternalServerError() *RenewOrganizationCertificateInternalServerError {
	return &RenewOrganizationCertificateInternalServerError{}
}

/*
RenewOrganizationCertificateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RenewOrganizationCertificateInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this renew organization certificate internal server error response has a 2xx status code
func (o *RenewOrganizationCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew organization certificate internal server error response has a 3xx status code
func (o *RenewOrganizationCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew organization certificate internal server error response has a 4xx status code
func (o *RenewOrganizationCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this renew organization certificate internal server error response has a 5xx status code
func (o *RenewOrganizationCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this renew organization certificate internal server error response a status code equal to that given
func (o *RenewOrganizationCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the renew organization certificate internal server error response
func (o *RenewOrganizationCertificateInternalServerError) Code() int {
	return 500
}

func (o *RenewOrganizationCertificateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateInternalServerError %s", 500, payload)
}

func (o *RenewOrganizationCertificateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/keys/renew][%d] renewOrganizationCertificateInternalServerError %s", 500, payload)
}

func (o *RenewOrganizationCertificateInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *RenewOrganizationCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
