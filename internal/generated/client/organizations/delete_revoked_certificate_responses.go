// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRevokedCertificateReader is a Reader for the DeleteRevokedCertificate structure.
type DeleteRevokedCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRevokedCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRevokedCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteRevokedCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRevokedCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRevokedCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /organizations/{id}/crl/revoke/serial] deleteRevokedCertificate", response, response.Code())
	}
}

// NewDeleteRevokedCertificateOK creates a DeleteRevokedCertificateOK with default headers values
func NewDeleteRevokedCertificateOK() *DeleteRevokedCertificateOK {
	return &DeleteRevokedCertificateOK{}
}

/*
DeleteRevokedCertificateOK describes a response with status code 200, with default header values.

OK
*/
type DeleteRevokedCertificateOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete revoked certificate o k response has a 2xx status code
func (o *DeleteRevokedCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete revoked certificate o k response has a 3xx status code
func (o *DeleteRevokedCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete revoked certificate o k response has a 4xx status code
func (o *DeleteRevokedCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete revoked certificate o k response has a 5xx status code
func (o *DeleteRevokedCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete revoked certificate o k response a status code equal to that given
func (o *DeleteRevokedCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete revoked certificate o k response
func (o *DeleteRevokedCertificateOK) Code() int {
	return 200
}

func (o *DeleteRevokedCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateOK %s", 200, payload)
}

func (o *DeleteRevokedCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateOK %s", 200, payload)
}

func (o *DeleteRevokedCertificateOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteRevokedCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteRevokedCertificateBadRequest creates a DeleteRevokedCertificateBadRequest with default headers values
func NewDeleteRevokedCertificateBadRequest() *DeleteRevokedCertificateBadRequest {
	return &DeleteRevokedCertificateBadRequest{}
}

/*
DeleteRevokedCertificateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteRevokedCertificateBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete revoked certificate bad request response has a 2xx status code
func (o *DeleteRevokedCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete revoked certificate bad request response has a 3xx status code
func (o *DeleteRevokedCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete revoked certificate bad request response has a 4xx status code
func (o *DeleteRevokedCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete revoked certificate bad request response has a 5xx status code
func (o *DeleteRevokedCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete revoked certificate bad request response a status code equal to that given
func (o *DeleteRevokedCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete revoked certificate bad request response
func (o *DeleteRevokedCertificateBadRequest) Code() int {
	return 400
}

func (o *DeleteRevokedCertificateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateBadRequest %s", 400, payload)
}

func (o *DeleteRevokedCertificateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateBadRequest %s", 400, payload)
}

func (o *DeleteRevokedCertificateBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteRevokedCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteRevokedCertificateNotFound creates a DeleteRevokedCertificateNotFound with default headers values
func NewDeleteRevokedCertificateNotFound() *DeleteRevokedCertificateNotFound {
	return &DeleteRevokedCertificateNotFound{}
}

/*
DeleteRevokedCertificateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteRevokedCertificateNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete revoked certificate not found response has a 2xx status code
func (o *DeleteRevokedCertificateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete revoked certificate not found response has a 3xx status code
func (o *DeleteRevokedCertificateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete revoked certificate not found response has a 4xx status code
func (o *DeleteRevokedCertificateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete revoked certificate not found response has a 5xx status code
func (o *DeleteRevokedCertificateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete revoked certificate not found response a status code equal to that given
func (o *DeleteRevokedCertificateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete revoked certificate not found response
func (o *DeleteRevokedCertificateNotFound) Code() int {
	return 404
}

func (o *DeleteRevokedCertificateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateNotFound %s", 404, payload)
}

func (o *DeleteRevokedCertificateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateNotFound %s", 404, payload)
}

func (o *DeleteRevokedCertificateNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteRevokedCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteRevokedCertificateInternalServerError creates a DeleteRevokedCertificateInternalServerError with default headers values
func NewDeleteRevokedCertificateInternalServerError() *DeleteRevokedCertificateInternalServerError {
	return &DeleteRevokedCertificateInternalServerError{}
}

/*
DeleteRevokedCertificateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteRevokedCertificateInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete revoked certificate internal server error response has a 2xx status code
func (o *DeleteRevokedCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete revoked certificate internal server error response has a 3xx status code
func (o *DeleteRevokedCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete revoked certificate internal server error response has a 4xx status code
func (o *DeleteRevokedCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete revoked certificate internal server error response has a 5xx status code
func (o *DeleteRevokedCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete revoked certificate internal server error response a status code equal to that given
func (o *DeleteRevokedCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete revoked certificate internal server error response
func (o *DeleteRevokedCertificateInternalServerError) Code() int {
	return 500
}

func (o *DeleteRevokedCertificateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateInternalServerError %s", 500, payload)
}

func (o *DeleteRevokedCertificateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /organizations/{id}/crl/revoke/serial][%d] deleteRevokedCertificateInternalServerError %s", 500, payload)
}

func (o *DeleteRevokedCertificateInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteRevokedCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
