// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RevokeCertificateBySerialReader is a Reader for the RevokeCertificateBySerial structure.
type RevokeCertificateBySerialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeCertificateBySerialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeCertificateBySerialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRevokeCertificateBySerialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRevokeCertificateBySerialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{id}/crl/revoke/serial] revokeCertificateBySerial", response, response.Code())
	}
}

// NewRevokeCertificateBySerialOK creates a RevokeCertificateBySerialOK with default headers values
func NewRevokeCertificateBySerialOK() *RevokeCertificateBySerialOK {
	return &RevokeCertificateBySerialOK{}
}

/*
RevokeCertificateBySerialOK describes a response with status code 200, with default header values.

OK
*/
type RevokeCertificateBySerialOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by serial o k response has a 2xx status code
func (o *RevokeCertificateBySerialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke certificate by serial o k response has a 3xx status code
func (o *RevokeCertificateBySerialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by serial o k response has a 4xx status code
func (o *RevokeCertificateBySerialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke certificate by serial o k response has a 5xx status code
func (o *RevokeCertificateBySerialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke certificate by serial o k response a status code equal to that given
func (o *RevokeCertificateBySerialOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the revoke certificate by serial o k response
func (o *RevokeCertificateBySerialOK) Code() int {
	return 200
}

func (o *RevokeCertificateBySerialOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialOK %s", 200, payload)
}

func (o *RevokeCertificateBySerialOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialOK %s", 200, payload)
}

func (o *RevokeCertificateBySerialOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateBySerialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRevokeCertificateBySerialBadRequest creates a RevokeCertificateBySerialBadRequest with default headers values
func NewRevokeCertificateBySerialBadRequest() *RevokeCertificateBySerialBadRequest {
	return &RevokeCertificateBySerialBadRequest{}
}

/*
RevokeCertificateBySerialBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RevokeCertificateBySerialBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by serial bad request response has a 2xx status code
func (o *RevokeCertificateBySerialBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke certificate by serial bad request response has a 3xx status code
func (o *RevokeCertificateBySerialBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by serial bad request response has a 4xx status code
func (o *RevokeCertificateBySerialBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke certificate by serial bad request response has a 5xx status code
func (o *RevokeCertificateBySerialBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke certificate by serial bad request response a status code equal to that given
func (o *RevokeCertificateBySerialBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the revoke certificate by serial bad request response
func (o *RevokeCertificateBySerialBadRequest) Code() int {
	return 400
}

func (o *RevokeCertificateBySerialBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialBadRequest %s", 400, payload)
}

func (o *RevokeCertificateBySerialBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialBadRequest %s", 400, payload)
}

func (o *RevokeCertificateBySerialBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateBySerialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRevokeCertificateBySerialInternalServerError creates a RevokeCertificateBySerialInternalServerError with default headers values
func NewRevokeCertificateBySerialInternalServerError() *RevokeCertificateBySerialInternalServerError {
	return &RevokeCertificateBySerialInternalServerError{}
}

/*
RevokeCertificateBySerialInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RevokeCertificateBySerialInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by serial internal server error response has a 2xx status code
func (o *RevokeCertificateBySerialInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke certificate by serial internal server error response has a 3xx status code
func (o *RevokeCertificateBySerialInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by serial internal server error response has a 4xx status code
func (o *RevokeCertificateBySerialInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke certificate by serial internal server error response has a 5xx status code
func (o *RevokeCertificateBySerialInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this revoke certificate by serial internal server error response a status code equal to that given
func (o *RevokeCertificateBySerialInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the revoke certificate by serial internal server error response
func (o *RevokeCertificateBySerialInternalServerError) Code() int {
	return 500
}

func (o *RevokeCertificateBySerialInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialInternalServerError %s", 500, payload)
}

func (o *RevokeCertificateBySerialInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/serial][%d] revokeCertificateBySerialInternalServerError %s", 500, payload)
}

func (o *RevokeCertificateBySerialInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateBySerialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
