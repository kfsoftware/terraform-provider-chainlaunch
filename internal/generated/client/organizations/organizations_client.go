// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new organizations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new organizations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationxPemFile sets the Accept header to "application/x-pem-file".
func WithAcceptApplicationxPemFile(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/x-pem-file"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFabricOrganization(params *CreateFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFabricOrganizationCreated, error)

	CreateOrganizationKey(params *CreateOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationKeyCreated, error)

	DeleteFabricOrganization(params *DeleteFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricOrganizationNoContent, error)

	DeleteOrganizationKey(params *DeleteOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationKeyNoContent, error)

	DeleteRevokedCertificate(params *DeleteRevokedCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRevokedCertificateOK, error)

	GetFabricOrganization(params *GetFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrganizationOK, error)

	GetFabricOrganizationByMspID(params *GetFabricOrganizationByMspIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrganizationByMspIDOK, error)

	GetOrganizationCRL(params *GetOrganizationCRLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCRLOK, error)

	GetOrganizationKey(params *GetOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationKeyOK, error)

	GetRevokedCertificates(params *GetRevokedCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevokedCertificatesOK, error)

	ImportFabricOrganization(params *ImportFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricOrganizationCreated, error)

	ListFabricOrganizations(params *ListFabricOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricOrganizationsOK, error)

	ListOrganizationKeys(params *ListOrganizationKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationKeysOK, error)

	RenewOrganizationCertificate(params *RenewOrganizationCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewOrganizationCertificateOK, error)

	RevokeCertificateByPEM(params *RevokeCertificateByPEMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCertificateByPEMOK, error)

	RevokeCertificateBySerial(params *RevokeCertificateBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCertificateBySerialOK, error)

	UpdateFabricOrganization(params *UpdateFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricOrganizationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateFabricOrganization creates a new fabric organization

Create a new Fabric organization with the specified configuration
*/
func (a *Client) CreateFabricOrganization(params *CreateFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFabricOrganizationCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFabricOrganization",
		Method:             "POST",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateFabricOrganizationCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrganizationKey creates a new key for an organization

Create a new key with a specific role (admin or client) for an organization
*/
func (a *Client) CreateOrganizationKey(params *CreateOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationKeyCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateOrganizationKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationKey",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOrganizationKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateOrganizationKeyCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFabricOrganization deletes a fabric organization

Delete a Fabric organization by ID
*/
func (a *Client) DeleteFabricOrganization(params *DeleteFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFabricOrganizationNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFabricOrganization",
		Method:             "DELETE",
		PathPattern:        "/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteFabricOrganizationNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOrganizationKey deletes a key

Delete a key and its associated certificate
*/
func (a *Client) DeleteOrganizationKey(params *DeleteOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationKeyNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteOrganizationKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationKey",
		Method:             "DELETE",
		PathPattern:        "/organizations/{id}/keys/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteOrganizationKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteOrganizationKeyNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRevokedCertificate deletes a revoked certificate using its serial number

Remove a certificate from the organization's CRL using its serial number
*/
func (a *Client) DeleteRevokedCertificate(params *DeleteRevokedCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRevokedCertificateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteRevokedCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRevokedCertificate",
		Method:             "DELETE",
		PathPattern:        "/organizations/{id}/crl/revoke/serial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRevokedCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteRevokedCertificateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRevokedCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricOrganization gets a fabric organization

Get a Fabric organization by ID
*/
func (a *Client) GetFabricOrganization(params *GetFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrganizationOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricOrganization",
		Method:             "GET",
		PathPattern:        "/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricOrganizationOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFabricOrganizationByMspID gets a fabric organization by m s p ID

Get a Fabric organization by MSP ID
*/
func (a *Client) GetFabricOrganizationByMspID(params *GetFabricOrganizationByMspIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFabricOrganizationByMspIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetFabricOrganizationByMspIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFabricOrganizationByMspID",
		Method:             "GET",
		PathPattern:        "/organizations/by-mspid/{mspid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFabricOrganizationByMspIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetFabricOrganizationByMspIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFabricOrganizationByMspID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationCRL gets organization s c r l

Get the current Certificate Revocation List for the organization
*/
func (a *Client) GetOrganizationCRL(params *GetOrganizationCRLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCRLOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetOrganizationCRLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationCRL",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/crl",
		ProducesMediaTypes: []string{"application/x-pem-file"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationCRLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetOrganizationCRLOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationCRL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationKey gets a specific key by ID

Get a specific key by its ID
*/
func (a *Client) GetOrganizationKey(params *GetOrganizationKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationKeyOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetOrganizationKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationKey",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/keys/{keyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetOrganizationKeyOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRevokedCertificates gets organization s revoked certificates

Get all revoked certificates for the organization
*/
func (a *Client) GetRevokedCertificates(params *GetRevokedCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRevokedCertificatesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetRevokedCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRevokedCertificates",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/revoked-certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRevokedCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetRevokedCertificatesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRevokedCertificates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportFabricOrganization imports an existing fabric organization

Import an existing Fabric organization from raw certificates, Vault, or AWS KMS
*/
func (a *Client) ImportFabricOrganization(params *ImportFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportFabricOrganizationCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewImportFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importFabricOrganization",
		Method:             "POST",
		PathPattern:        "/organizations/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ImportFabricOrganizationCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFabricOrganizations lists all fabric organizations

Get a list of all Fabric organizations
*/
func (a *Client) ListFabricOrganizations(params *ListFabricOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFabricOrganizationsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListFabricOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFabricOrganizations",
		Method:             "GET",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFabricOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListFabricOrganizationsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFabricOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizationKeys lists all keys for an organization

Get all keys associated with an organization
*/
func (a *Client) ListOrganizationKeys(params *ListOrganizationKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOrganizationKeysOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListOrganizationKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOrganizationKeys",
		Method:             "GET",
		PathPattern:        "/organizations/{id}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListOrganizationKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListOrganizationKeysOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOrganizationKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenewOrganizationCertificate renews a certificate for a key

Renew a certificate for a specific key in an organization
*/
func (a *Client) RenewOrganizationCertificate(params *RenewOrganizationCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewOrganizationCertificateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRenewOrganizationCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renewOrganizationCertificate",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/keys/renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RenewOrganizationCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RenewOrganizationCertificateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for renewOrganizationCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeCertificateByPEM revokes a certificate using p e m data

Add a certificate to the organization's CRL using its PEM encoded data
*/
func (a *Client) RevokeCertificateByPEM(params *RevokeCertificateByPEMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCertificateByPEMOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRevokeCertificateByPEMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCertificateByPEM",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/crl/revoke/pem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RevokeCertificateByPEMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RevokeCertificateByPEMOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCertificateByPEM: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeCertificateBySerial revokes a certificate using its serial number

Add a certificate to the organization's CRL using its serial number
*/
func (a *Client) RevokeCertificateBySerial(params *RevokeCertificateBySerialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCertificateBySerialOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRevokeCertificateBySerialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCertificateBySerial",
		Method:             "POST",
		PathPattern:        "/organizations/{id}/crl/revoke/serial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RevokeCertificateBySerialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RevokeCertificateBySerialOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCertificateBySerial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFabricOrganization updates a fabric organization

Update an existing Fabric organization
*/
func (a *Client) UpdateFabricOrganization(params *UpdateFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateFabricOrganizationOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFabricOrganization",
		Method:             "PUT",
		PathPattern:        "/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateFabricOrganizationOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
