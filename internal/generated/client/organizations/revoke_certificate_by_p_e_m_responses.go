// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RevokeCertificateByPEMReader is a Reader for the RevokeCertificateByPEM structure.
type RevokeCertificateByPEMReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeCertificateByPEMReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeCertificateByPEMOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRevokeCertificateByPEMBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRevokeCertificateByPEMInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{id}/crl/revoke/pem] revokeCertificateByPEM", response, response.Code())
	}
}

// NewRevokeCertificateByPEMOK creates a RevokeCertificateByPEMOK with default headers values
func NewRevokeCertificateByPEMOK() *RevokeCertificateByPEMOK {
	return &RevokeCertificateByPEMOK{}
}

/*
RevokeCertificateByPEMOK describes a response with status code 200, with default header values.

OK
*/
type RevokeCertificateByPEMOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by p e m o k response has a 2xx status code
func (o *RevokeCertificateByPEMOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke certificate by p e m o k response has a 3xx status code
func (o *RevokeCertificateByPEMOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by p e m o k response has a 4xx status code
func (o *RevokeCertificateByPEMOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke certificate by p e m o k response has a 5xx status code
func (o *RevokeCertificateByPEMOK) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke certificate by p e m o k response a status code equal to that given
func (o *RevokeCertificateByPEMOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the revoke certificate by p e m o k response
func (o *RevokeCertificateByPEMOK) Code() int {
	return 200
}

func (o *RevokeCertificateByPEMOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMOK %s", 200, payload)
}

func (o *RevokeCertificateByPEMOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMOK %s", 200, payload)
}

func (o *RevokeCertificateByPEMOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateByPEMOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRevokeCertificateByPEMBadRequest creates a RevokeCertificateByPEMBadRequest with default headers values
func NewRevokeCertificateByPEMBadRequest() *RevokeCertificateByPEMBadRequest {
	return &RevokeCertificateByPEMBadRequest{}
}

/*
RevokeCertificateByPEMBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RevokeCertificateByPEMBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by p e m bad request response has a 2xx status code
func (o *RevokeCertificateByPEMBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke certificate by p e m bad request response has a 3xx status code
func (o *RevokeCertificateByPEMBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by p e m bad request response has a 4xx status code
func (o *RevokeCertificateByPEMBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke certificate by p e m bad request response has a 5xx status code
func (o *RevokeCertificateByPEMBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke certificate by p e m bad request response a status code equal to that given
func (o *RevokeCertificateByPEMBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the revoke certificate by p e m bad request response
func (o *RevokeCertificateByPEMBadRequest) Code() int {
	return 400
}

func (o *RevokeCertificateByPEMBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMBadRequest %s", 400, payload)
}

func (o *RevokeCertificateByPEMBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMBadRequest %s", 400, payload)
}

func (o *RevokeCertificateByPEMBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateByPEMBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRevokeCertificateByPEMInternalServerError creates a RevokeCertificateByPEMInternalServerError with default headers values
func NewRevokeCertificateByPEMInternalServerError() *RevokeCertificateByPEMInternalServerError {
	return &RevokeCertificateByPEMInternalServerError{}
}

/*
RevokeCertificateByPEMInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RevokeCertificateByPEMInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this revoke certificate by p e m internal server error response has a 2xx status code
func (o *RevokeCertificateByPEMInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke certificate by p e m internal server error response has a 3xx status code
func (o *RevokeCertificateByPEMInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke certificate by p e m internal server error response has a 4xx status code
func (o *RevokeCertificateByPEMInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke certificate by p e m internal server error response has a 5xx status code
func (o *RevokeCertificateByPEMInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this revoke certificate by p e m internal server error response a status code equal to that given
func (o *RevokeCertificateByPEMInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the revoke certificate by p e m internal server error response
func (o *RevokeCertificateByPEMInternalServerError) Code() int {
	return 500
}

func (o *RevokeCertificateByPEMInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMInternalServerError %s", 500, payload)
}

func (o *RevokeCertificateByPEMInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{id}/crl/revoke/pem][%d] revokeCertificateByPEMInternalServerError %s", 500, payload)
}

func (o *RevokeCertificateByPEMInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *RevokeCertificateByPEMInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
