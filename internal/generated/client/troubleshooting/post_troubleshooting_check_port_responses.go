// Code generated by go-swagger; DO NOT EDIT.

package troubleshooting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// PostTroubleshootingCheckPortReader is a Reader for the PostTroubleshootingCheckPort structure.
type PostTroubleshootingCheckPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTroubleshootingCheckPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPostTroubleshootingCheckPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTroubleshootingCheckPortBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTroubleshootingCheckPortInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /troubleshooting/check-port] PostTroubleshootingCheckPort", response, response.Code())
	}
}

// NewPostTroubleshootingCheckPortOK creates a PostTroubleshootingCheckPortOK with default headers values
func NewPostTroubleshootingCheckPortOK() *PostTroubleshootingCheckPortOK {
	return &PostTroubleshootingCheckPortOK{}
}

/*
PostTroubleshootingCheckPortOK describes a response with status code 200, with default header values.

OK
*/
type PostTroubleshootingCheckPortOK struct {
	Payload *models.TroubleshootingPortCheckResponse
}

// IsSuccess returns true when this post troubleshooting check port o k response has a 2xx status code
func (o *PostTroubleshootingCheckPortOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post troubleshooting check port o k response has a 3xx status code
func (o *PostTroubleshootingCheckPortOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting check port o k response has a 4xx status code
func (o *PostTroubleshootingCheckPortOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting check port o k response has a 5xx status code
func (o *PostTroubleshootingCheckPortOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting check port o k response a status code equal to that given
func (o *PostTroubleshootingCheckPortOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post troubleshooting check port o k response
func (o *PostTroubleshootingCheckPortOK) Code() int {
	return 200
}

func (o *PostTroubleshootingCheckPortOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortOK %s", 200, payload)
}

func (o *PostTroubleshootingCheckPortOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortOK %s", 200, payload)
}

func (o *PostTroubleshootingCheckPortOK) GetPayload() *models.TroubleshootingPortCheckResponse {
	return o.Payload
}

func (o *PostTroubleshootingCheckPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TroubleshootingPortCheckResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingCheckPortBadRequest creates a PostTroubleshootingCheckPortBadRequest with default headers values
func NewPostTroubleshootingCheckPortBadRequest() *PostTroubleshootingCheckPortBadRequest {
	return &PostTroubleshootingCheckPortBadRequest{}
}

/*
PostTroubleshootingCheckPortBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostTroubleshootingCheckPortBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting check port bad request response has a 2xx status code
func (o *PostTroubleshootingCheckPortBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting check port bad request response has a 3xx status code
func (o *PostTroubleshootingCheckPortBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting check port bad request response has a 4xx status code
func (o *PostTroubleshootingCheckPortBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post troubleshooting check port bad request response has a 5xx status code
func (o *PostTroubleshootingCheckPortBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting check port bad request response a status code equal to that given
func (o *PostTroubleshootingCheckPortBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post troubleshooting check port bad request response
func (o *PostTroubleshootingCheckPortBadRequest) Code() int {
	return 400
}

func (o *PostTroubleshootingCheckPortBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingCheckPortBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingCheckPortBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingCheckPortBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingCheckPortInternalServerError creates a PostTroubleshootingCheckPortInternalServerError with default headers values
func NewPostTroubleshootingCheckPortInternalServerError() *PostTroubleshootingCheckPortInternalServerError {
	return &PostTroubleshootingCheckPortInternalServerError{}
}

/*
PostTroubleshootingCheckPortInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostTroubleshootingCheckPortInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting check port internal server error response has a 2xx status code
func (o *PostTroubleshootingCheckPortInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting check port internal server error response has a 3xx status code
func (o *PostTroubleshootingCheckPortInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting check port internal server error response has a 4xx status code
func (o *PostTroubleshootingCheckPortInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting check port internal server error response has a 5xx status code
func (o *PostTroubleshootingCheckPortInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post troubleshooting check port internal server error response a status code equal to that given
func (o *PostTroubleshootingCheckPortInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post troubleshooting check port internal server error response
func (o *PostTroubleshootingCheckPortInternalServerError) Code() int {
	return 500
}

func (o *PostTroubleshootingCheckPortInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingCheckPortInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/check-port][%d] postTroubleshootingCheckPortInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingCheckPortInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingCheckPortInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
