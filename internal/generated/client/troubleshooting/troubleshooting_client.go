// Code generated by go-swagger; DO NOT EDIT.

package troubleshooting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new troubleshooting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new troubleshooting API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new troubleshooting API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for troubleshooting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetTroubleshootingPublicIP(params *GetTroubleshootingPublicIPParams, opts ...ClientOption) (*GetTroubleshootingPublicIPOK, error)

	PostTroubleshootingCheckPort(params *PostTroubleshootingCheckPortParams, opts ...ClientOption) (*PostTroubleshootingCheckPortOK, error)

	PostTroubleshootingPing(params *PostTroubleshootingPingParams, opts ...ClientOption) (*PostTroubleshootingPingOK, error)

	PostTroubleshootingTestConnection(params *PostTroubleshootingTestConnectionParams, opts ...ClientOption) (*PostTroubleshootingTestConnectionOK, error)

	PostTroubleshootingValidateCertificate(params *PostTroubleshootingValidateCertificateParams, opts ...ClientOption) (*PostTroubleshootingValidateCertificateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetTroubleshootingPublicIP gets public IP address

Get the server's public IP address and location information
*/
func (a *Client) GetTroubleshootingPublicIP(params *GetTroubleshootingPublicIPParams, opts ...ClientOption) (*GetTroubleshootingPublicIPOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetTroubleshootingPublicIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTroubleshootingPublicIP",
		Method:             "GET",
		PathPattern:        "/troubleshooting/public-ip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTroubleshootingPublicIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetTroubleshootingPublicIPOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTroubleshootingPublicIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTroubleshootingCheckPort checks port availability

Check if a specific port is open on a host
*/
func (a *Client) PostTroubleshootingCheckPort(params *PostTroubleshootingCheckPortParams, opts ...ClientOption) (*PostTroubleshootingCheckPortOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostTroubleshootingCheckPortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTroubleshootingCheckPort",
		Method:             "POST",
		PathPattern:        "/troubleshooting/check-port",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTroubleshootingCheckPortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostTroubleshootingCheckPortOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTroubleshootingCheckPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTroubleshootingPing pings a host

Send ICMP ping requests to a host
*/
func (a *Client) PostTroubleshootingPing(params *PostTroubleshootingPingParams, opts ...ClientOption) (*PostTroubleshootingPingOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostTroubleshootingPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTroubleshootingPing",
		Method:             "POST",
		PathPattern:        "/troubleshooting/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTroubleshootingPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostTroubleshootingPingOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTroubleshootingPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTroubleshootingTestConnection tests network connection

Test connectivity to a specified endpoint
*/
func (a *Client) PostTroubleshootingTestConnection(params *PostTroubleshootingTestConnectionParams, opts ...ClientOption) (*PostTroubleshootingTestConnectionOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostTroubleshootingTestConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTroubleshootingTestConnection",
		Method:             "POST",
		PathPattern:        "/troubleshooting/test-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTroubleshootingTestConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostTroubleshootingTestConnectionOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTroubleshootingTestConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTroubleshootingValidateCertificate validates certificate

Validate and parse X.509 certificate
*/
func (a *Client) PostTroubleshootingValidateCertificate(params *PostTroubleshootingValidateCertificateParams, opts ...ClientOption) (*PostTroubleshootingValidateCertificateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostTroubleshootingValidateCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostTroubleshootingValidateCertificate",
		Method:             "POST",
		PathPattern:        "/troubleshooting/validate-certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTroubleshootingValidateCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostTroubleshootingValidateCertificateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostTroubleshootingValidateCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
