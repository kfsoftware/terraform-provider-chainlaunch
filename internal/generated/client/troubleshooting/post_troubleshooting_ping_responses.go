// Code generated by go-swagger; DO NOT EDIT.

package troubleshooting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// PostTroubleshootingPingReader is a Reader for the PostTroubleshootingPing structure.
type PostTroubleshootingPingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTroubleshootingPingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPostTroubleshootingPingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTroubleshootingPingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTroubleshootingPingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /troubleshooting/ping] PostTroubleshootingPing", response, response.Code())
	}
}

// NewPostTroubleshootingPingOK creates a PostTroubleshootingPingOK with default headers values
func NewPostTroubleshootingPingOK() *PostTroubleshootingPingOK {
	return &PostTroubleshootingPingOK{}
}

/*
PostTroubleshootingPingOK describes a response with status code 200, with default header values.

OK
*/
type PostTroubleshootingPingOK struct {
	Payload *models.TroubleshootingPingResponse
}

// IsSuccess returns true when this post troubleshooting ping o k response has a 2xx status code
func (o *PostTroubleshootingPingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post troubleshooting ping o k response has a 3xx status code
func (o *PostTroubleshootingPingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting ping o k response has a 4xx status code
func (o *PostTroubleshootingPingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting ping o k response has a 5xx status code
func (o *PostTroubleshootingPingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting ping o k response a status code equal to that given
func (o *PostTroubleshootingPingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post troubleshooting ping o k response
func (o *PostTroubleshootingPingOK) Code() int {
	return 200
}

func (o *PostTroubleshootingPingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingOK %s", 200, payload)
}

func (o *PostTroubleshootingPingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingOK %s", 200, payload)
}

func (o *PostTroubleshootingPingOK) GetPayload() *models.TroubleshootingPingResponse {
	return o.Payload
}

func (o *PostTroubleshootingPingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TroubleshootingPingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingPingBadRequest creates a PostTroubleshootingPingBadRequest with default headers values
func NewPostTroubleshootingPingBadRequest() *PostTroubleshootingPingBadRequest {
	return &PostTroubleshootingPingBadRequest{}
}

/*
PostTroubleshootingPingBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostTroubleshootingPingBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting ping bad request response has a 2xx status code
func (o *PostTroubleshootingPingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting ping bad request response has a 3xx status code
func (o *PostTroubleshootingPingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting ping bad request response has a 4xx status code
func (o *PostTroubleshootingPingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post troubleshooting ping bad request response has a 5xx status code
func (o *PostTroubleshootingPingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting ping bad request response a status code equal to that given
func (o *PostTroubleshootingPingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post troubleshooting ping bad request response
func (o *PostTroubleshootingPingBadRequest) Code() int {
	return 400
}

func (o *PostTroubleshootingPingBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingPingBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingPingBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingPingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingPingInternalServerError creates a PostTroubleshootingPingInternalServerError with default headers values
func NewPostTroubleshootingPingInternalServerError() *PostTroubleshootingPingInternalServerError {
	return &PostTroubleshootingPingInternalServerError{}
}

/*
PostTroubleshootingPingInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostTroubleshootingPingInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting ping internal server error response has a 2xx status code
func (o *PostTroubleshootingPingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting ping internal server error response has a 3xx status code
func (o *PostTroubleshootingPingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting ping internal server error response has a 4xx status code
func (o *PostTroubleshootingPingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting ping internal server error response has a 5xx status code
func (o *PostTroubleshootingPingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post troubleshooting ping internal server error response a status code equal to that given
func (o *PostTroubleshootingPingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post troubleshooting ping internal server error response
func (o *PostTroubleshootingPingInternalServerError) Code() int {
	return 500
}

func (o *PostTroubleshootingPingInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingPingInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/ping][%d] postTroubleshootingPingInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingPingInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingPingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
