// Code generated by go-swagger; DO NOT EDIT.

package troubleshooting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetTroubleshootingPublicIPReader is a Reader for the GetTroubleshootingPublicIP structure.
type GetTroubleshootingPublicIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTroubleshootingPublicIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetTroubleshootingPublicIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetTroubleshootingPublicIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /troubleshooting/public-ip] GetTroubleshootingPublicIP", response, response.Code())
	}
}

// NewGetTroubleshootingPublicIPOK creates a GetTroubleshootingPublicIPOK with default headers values
func NewGetTroubleshootingPublicIPOK() *GetTroubleshootingPublicIPOK {
	return &GetTroubleshootingPublicIPOK{}
}

/*
GetTroubleshootingPublicIPOK describes a response with status code 200, with default header values.

IP information
*/
type GetTroubleshootingPublicIPOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this get troubleshooting public Ip o k response has a 2xx status code
func (o *GetTroubleshootingPublicIPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get troubleshooting public Ip o k response has a 3xx status code
func (o *GetTroubleshootingPublicIPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get troubleshooting public Ip o k response has a 4xx status code
func (o *GetTroubleshootingPublicIPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get troubleshooting public Ip o k response has a 5xx status code
func (o *GetTroubleshootingPublicIPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get troubleshooting public Ip o k response a status code equal to that given
func (o *GetTroubleshootingPublicIPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get troubleshooting public Ip o k response
func (o *GetTroubleshootingPublicIPOK) Code() int {
	return 200
}

func (o *GetTroubleshootingPublicIPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /troubleshooting/public-ip][%d] getTroubleshootingPublicIpOK %s", 200, payload)
}

func (o *GetTroubleshootingPublicIPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /troubleshooting/public-ip][%d] getTroubleshootingPublicIpOK %s", 200, payload)
}

func (o *GetTroubleshootingPublicIPOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetTroubleshootingPublicIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetTroubleshootingPublicIPInternalServerError creates a GetTroubleshootingPublicIPInternalServerError with default headers values
func NewGetTroubleshootingPublicIPInternalServerError() *GetTroubleshootingPublicIPInternalServerError {
	return &GetTroubleshootingPublicIPInternalServerError{}
}

/*
GetTroubleshootingPublicIPInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTroubleshootingPublicIPInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get troubleshooting public Ip internal server error response has a 2xx status code
func (o *GetTroubleshootingPublicIPInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get troubleshooting public Ip internal server error response has a 3xx status code
func (o *GetTroubleshootingPublicIPInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get troubleshooting public Ip internal server error response has a 4xx status code
func (o *GetTroubleshootingPublicIPInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get troubleshooting public Ip internal server error response has a 5xx status code
func (o *GetTroubleshootingPublicIPInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get troubleshooting public Ip internal server error response a status code equal to that given
func (o *GetTroubleshootingPublicIPInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get troubleshooting public Ip internal server error response
func (o *GetTroubleshootingPublicIPInternalServerError) Code() int {
	return 500
}

func (o *GetTroubleshootingPublicIPInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /troubleshooting/public-ip][%d] getTroubleshootingPublicIpInternalServerError %s", 500, payload)
}

func (o *GetTroubleshootingPublicIPInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /troubleshooting/public-ip][%d] getTroubleshootingPublicIpInternalServerError %s", 500, payload)
}

func (o *GetTroubleshootingPublicIPInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetTroubleshootingPublicIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
