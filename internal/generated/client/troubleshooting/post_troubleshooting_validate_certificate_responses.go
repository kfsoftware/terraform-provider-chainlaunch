// Code generated by go-swagger; DO NOT EDIT.

package troubleshooting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// PostTroubleshootingValidateCertificateReader is a Reader for the PostTroubleshootingValidateCertificate structure.
type PostTroubleshootingValidateCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTroubleshootingValidateCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPostTroubleshootingValidateCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTroubleshootingValidateCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTroubleshootingValidateCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /troubleshooting/validate-certificate] PostTroubleshootingValidateCertificate", response, response.Code())
	}
}

// NewPostTroubleshootingValidateCertificateOK creates a PostTroubleshootingValidateCertificateOK with default headers values
func NewPostTroubleshootingValidateCertificateOK() *PostTroubleshootingValidateCertificateOK {
	return &PostTroubleshootingValidateCertificateOK{}
}

/*
PostTroubleshootingValidateCertificateOK describes a response with status code 200, with default header values.

OK
*/
type PostTroubleshootingValidateCertificateOK struct {
	Payload *models.TroubleshootingCertificateValidationResponse
}

// IsSuccess returns true when this post troubleshooting validate certificate o k response has a 2xx status code
func (o *PostTroubleshootingValidateCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post troubleshooting validate certificate o k response has a 3xx status code
func (o *PostTroubleshootingValidateCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting validate certificate o k response has a 4xx status code
func (o *PostTroubleshootingValidateCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting validate certificate o k response has a 5xx status code
func (o *PostTroubleshootingValidateCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting validate certificate o k response a status code equal to that given
func (o *PostTroubleshootingValidateCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post troubleshooting validate certificate o k response
func (o *PostTroubleshootingValidateCertificateOK) Code() int {
	return 200
}

func (o *PostTroubleshootingValidateCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateOK %s", 200, payload)
}

func (o *PostTroubleshootingValidateCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateOK %s", 200, payload)
}

func (o *PostTroubleshootingValidateCertificateOK) GetPayload() *models.TroubleshootingCertificateValidationResponse {
	return o.Payload
}

func (o *PostTroubleshootingValidateCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TroubleshootingCertificateValidationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingValidateCertificateBadRequest creates a PostTroubleshootingValidateCertificateBadRequest with default headers values
func NewPostTroubleshootingValidateCertificateBadRequest() *PostTroubleshootingValidateCertificateBadRequest {
	return &PostTroubleshootingValidateCertificateBadRequest{}
}

/*
PostTroubleshootingValidateCertificateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostTroubleshootingValidateCertificateBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting validate certificate bad request response has a 2xx status code
func (o *PostTroubleshootingValidateCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting validate certificate bad request response has a 3xx status code
func (o *PostTroubleshootingValidateCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting validate certificate bad request response has a 4xx status code
func (o *PostTroubleshootingValidateCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post troubleshooting validate certificate bad request response has a 5xx status code
func (o *PostTroubleshootingValidateCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post troubleshooting validate certificate bad request response a status code equal to that given
func (o *PostTroubleshootingValidateCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post troubleshooting validate certificate bad request response
func (o *PostTroubleshootingValidateCertificateBadRequest) Code() int {
	return 400
}

func (o *PostTroubleshootingValidateCertificateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingValidateCertificateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateBadRequest %s", 400, payload)
}

func (o *PostTroubleshootingValidateCertificateBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingValidateCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPostTroubleshootingValidateCertificateInternalServerError creates a PostTroubleshootingValidateCertificateInternalServerError with default headers values
func NewPostTroubleshootingValidateCertificateInternalServerError() *PostTroubleshootingValidateCertificateInternalServerError {
	return &PostTroubleshootingValidateCertificateInternalServerError{}
}

/*
PostTroubleshootingValidateCertificateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostTroubleshootingValidateCertificateInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this post troubleshooting validate certificate internal server error response has a 2xx status code
func (o *PostTroubleshootingValidateCertificateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post troubleshooting validate certificate internal server error response has a 3xx status code
func (o *PostTroubleshootingValidateCertificateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post troubleshooting validate certificate internal server error response has a 4xx status code
func (o *PostTroubleshootingValidateCertificateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post troubleshooting validate certificate internal server error response has a 5xx status code
func (o *PostTroubleshootingValidateCertificateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post troubleshooting validate certificate internal server error response a status code equal to that given
func (o *PostTroubleshootingValidateCertificateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post troubleshooting validate certificate internal server error response
func (o *PostTroubleshootingValidateCertificateInternalServerError) Code() int {
	return 500
}

func (o *PostTroubleshootingValidateCertificateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingValidateCertificateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /troubleshooting/validate-certificate][%d] postTroubleshootingValidateCertificateInternalServerError %s", 500, payload)
}

func (o *PostTroubleshootingValidateCertificateInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostTroubleshootingValidateCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
