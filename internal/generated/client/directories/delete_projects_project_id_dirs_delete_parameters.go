// Code generated by go-swagger; DO NOT EDIT.

package directories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteProjectsProjectIDDirsDeleteParams creates a new DeleteProjectsProjectIDDirsDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteProjectsProjectIDDirsDeleteParams() *DeleteProjectsProjectIDDirsDeleteParams {
	return &DeleteProjectsProjectIDDirsDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProjectsProjectIDDirsDeleteParamsWithTimeout creates a new DeleteProjectsProjectIDDirsDeleteParams object
// with the ability to set a timeout on a request.
func NewDeleteProjectsProjectIDDirsDeleteParamsWithTimeout(timeout time.Duration) *DeleteProjectsProjectIDDirsDeleteParams {
	return &DeleteProjectsProjectIDDirsDeleteParams{
		timeout: timeout,
	}
}

// NewDeleteProjectsProjectIDDirsDeleteParamsWithContext creates a new DeleteProjectsProjectIDDirsDeleteParams object
// with the ability to set a context for a request.
func NewDeleteProjectsProjectIDDirsDeleteParamsWithContext(ctx context.Context) *DeleteProjectsProjectIDDirsDeleteParams {
	return &DeleteProjectsProjectIDDirsDeleteParams{
		Context: ctx,
	}
}

// NewDeleteProjectsProjectIDDirsDeleteParamsWithHTTPClient creates a new DeleteProjectsProjectIDDirsDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteProjectsProjectIDDirsDeleteParamsWithHTTPClient(client *http.Client) *DeleteProjectsProjectIDDirsDeleteParams {
	return &DeleteProjectsProjectIDDirsDeleteParams{
		HTTPClient: client,
	}
}

/*
DeleteProjectsProjectIDDirsDeleteParams contains all the parameters to send to the API endpoint

	for the delete projects project ID dirs delete operation.

	Typically these are written to a http.Request.
*/
type DeleteProjectsProjectIDDirsDeleteParams struct {

	/* Dir.

	   Directory to delete, relative to project root
	*/
	Dir string

	/* Project.

	   Project name
	*/
	Project string

	/* ProjectID.

	   Project ID
	*/
	ProjectID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete projects project ID dirs delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithDefaults() *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete projects project ID dirs delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithTimeout(timeout time.Duration) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithContext(ctx context.Context) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithHTTPClient(client *http.Client) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDir adds the dir to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithDir(dir string) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetDir(dir string) {
	o.Dir = dir
}

// WithProject adds the project to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithProject(project string) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetProject(project string) {
	o.Project = project
}

// WithProjectID adds the projectID to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) WithProjectID(projectID int64) *DeleteProjectsProjectIDDirsDeleteParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the delete projects project ID dirs delete params
func (o *DeleteProjectsProjectIDDirsDeleteParams) SetProjectID(projectID int64) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProjectsProjectIDDirsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dir
	qrDir := o.Dir
	qDir := qrDir
	if qDir != "" {

		if err := r.SetQueryParam("dir", qDir); err != nil {
			return err
		}
	}

	// query param project
	qrProject := o.Project
	qProject := qrProject
	if qProject != "" {

		if err := r.SetQueryParam("project", qProject); err != nil {
			return err
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", swag.FormatInt64(o.ProjectID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
