// Code generated by go-swagger; DO NOT EDIT.

package ai

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetAIMessagesReader is a Reader for the GetAIMessages structure.
type GetAIMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAIMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetAIMessagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAIMessagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAIMessagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAIMessagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /ai/{projectId}/conversations/{conversationId}] getAIMessages", response, response.Code())
	}
}

// NewGetAIMessagesOK creates a GetAIMessagesOK with default headers values
func NewGetAIMessagesOK() *GetAIMessagesOK {
	return &GetAIMessagesOK{}
}

/*
GetAIMessagesOK describes a response with status code 200, with default header values.

OK
*/
type GetAIMessagesOK struct {
	Payload []*models.AiMessage
}

// IsSuccess returns true when this get a i messages o k response has a 2xx status code
func (o *GetAIMessagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get a i messages o k response has a 3xx status code
func (o *GetAIMessagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a i messages o k response has a 4xx status code
func (o *GetAIMessagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get a i messages o k response has a 5xx status code
func (o *GetAIMessagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get a i messages o k response a status code equal to that given
func (o *GetAIMessagesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get a i messages o k response
func (o *GetAIMessagesOK) Code() int {
	return 200
}

func (o *GetAIMessagesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesOK %s", 200, payload)
}

func (o *GetAIMessagesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesOK %s", 200, payload)
}

func (o *GetAIMessagesOK) GetPayload() []*models.AiMessage {
	return o.Payload
}

func (o *GetAIMessagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAIMessagesBadRequest creates a GetAIMessagesBadRequest with default headers values
func NewGetAIMessagesBadRequest() *GetAIMessagesBadRequest {
	return &GetAIMessagesBadRequest{}
}

/*
GetAIMessagesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAIMessagesBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get a i messages bad request response has a 2xx status code
func (o *GetAIMessagesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a i messages bad request response has a 3xx status code
func (o *GetAIMessagesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a i messages bad request response has a 4xx status code
func (o *GetAIMessagesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a i messages bad request response has a 5xx status code
func (o *GetAIMessagesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get a i messages bad request response a status code equal to that given
func (o *GetAIMessagesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get a i messages bad request response
func (o *GetAIMessagesBadRequest) Code() int {
	return 400
}

func (o *GetAIMessagesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesBadRequest %s", 400, payload)
}

func (o *GetAIMessagesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesBadRequest %s", 400, payload)
}

func (o *GetAIMessagesBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetAIMessagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAIMessagesNotFound creates a GetAIMessagesNotFound with default headers values
func NewGetAIMessagesNotFound() *GetAIMessagesNotFound {
	return &GetAIMessagesNotFound{}
}

/*
GetAIMessagesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAIMessagesNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get a i messages not found response has a 2xx status code
func (o *GetAIMessagesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a i messages not found response has a 3xx status code
func (o *GetAIMessagesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a i messages not found response has a 4xx status code
func (o *GetAIMessagesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a i messages not found response has a 5xx status code
func (o *GetAIMessagesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get a i messages not found response a status code equal to that given
func (o *GetAIMessagesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get a i messages not found response
func (o *GetAIMessagesNotFound) Code() int {
	return 404
}

func (o *GetAIMessagesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesNotFound %s", 404, payload)
}

func (o *GetAIMessagesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesNotFound %s", 404, payload)
}

func (o *GetAIMessagesNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetAIMessagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAIMessagesInternalServerError creates a GetAIMessagesInternalServerError with default headers values
func NewGetAIMessagesInternalServerError() *GetAIMessagesInternalServerError {
	return &GetAIMessagesInternalServerError{}
}

/*
GetAIMessagesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAIMessagesInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get a i messages internal server error response has a 2xx status code
func (o *GetAIMessagesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a i messages internal server error response has a 3xx status code
func (o *GetAIMessagesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a i messages internal server error response has a 4xx status code
func (o *GetAIMessagesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get a i messages internal server error response has a 5xx status code
func (o *GetAIMessagesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get a i messages internal server error response a status code equal to that given
func (o *GetAIMessagesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get a i messages internal server error response
func (o *GetAIMessagesInternalServerError) Code() int {
	return 500
}

func (o *GetAIMessagesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesInternalServerError %s", 500, payload)
}

func (o *GetAIMessagesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /ai/{projectId}/conversations/{conversationId}][%d] getAIMessagesInternalServerError %s", 500, payload)
}

func (o *GetAIMessagesInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetAIMessagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
