// Code generated by go-swagger; DO NOT EDIT.

package ai

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ChatWithAIChatAssistantReader is a Reader for the ChatWithAIChatAssistant structure.
type ChatWithAIChatAssistantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChatWithAIChatAssistantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewChatWithAIChatAssistantOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChatWithAIChatAssistantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewChatWithAIChatAssistantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /ai/{projectId}/chat] chatWithAIChatAssistant", response, response.Code())
	}
}

// NewChatWithAIChatAssistantOK creates a ChatWithAIChatAssistantOK with default headers values
func NewChatWithAIChatAssistantOK() *ChatWithAIChatAssistantOK {
	return &ChatWithAIChatAssistantOK{}
}

/*
ChatWithAIChatAssistantOK describes a response with status code 200, with default header values.

SSE stream of chat responses
*/
type ChatWithAIChatAssistantOK struct {
	Payload string
}

// IsSuccess returns true when this chat with a i chat assistant o k response has a 2xx status code
func (o *ChatWithAIChatAssistantOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chat with a i chat assistant o k response has a 3xx status code
func (o *ChatWithAIChatAssistantOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat with a i chat assistant o k response has a 4xx status code
func (o *ChatWithAIChatAssistantOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat with a i chat assistant o k response has a 5xx status code
func (o *ChatWithAIChatAssistantOK) IsServerError() bool {
	return false
}

// IsCode returns true when this chat with a i chat assistant o k response a status code equal to that given
func (o *ChatWithAIChatAssistantOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the chat with a i chat assistant o k response
func (o *ChatWithAIChatAssistantOK) Code() int {
	return 200
}

func (o *ChatWithAIChatAssistantOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantOK %s", 200, payload)
}

func (o *ChatWithAIChatAssistantOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantOK %s", 200, payload)
}

func (o *ChatWithAIChatAssistantOK) GetPayload() string {
	return o.Payload
}

func (o *ChatWithAIChatAssistantOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewChatWithAIChatAssistantBadRequest creates a ChatWithAIChatAssistantBadRequest with default headers values
func NewChatWithAIChatAssistantBadRequest() *ChatWithAIChatAssistantBadRequest {
	return &ChatWithAIChatAssistantBadRequest{}
}

/*
ChatWithAIChatAssistantBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type ChatWithAIChatAssistantBadRequest struct {
	Payload string
}

// IsSuccess returns true when this chat with a i chat assistant bad request response has a 2xx status code
func (o *ChatWithAIChatAssistantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat with a i chat assistant bad request response has a 3xx status code
func (o *ChatWithAIChatAssistantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat with a i chat assistant bad request response has a 4xx status code
func (o *ChatWithAIChatAssistantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this chat with a i chat assistant bad request response has a 5xx status code
func (o *ChatWithAIChatAssistantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this chat with a i chat assistant bad request response a status code equal to that given
func (o *ChatWithAIChatAssistantBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the chat with a i chat assistant bad request response
func (o *ChatWithAIChatAssistantBadRequest) Code() int {
	return 400
}

func (o *ChatWithAIChatAssistantBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantBadRequest %s", 400, payload)
}

func (o *ChatWithAIChatAssistantBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantBadRequest %s", 400, payload)
}

func (o *ChatWithAIChatAssistantBadRequest) GetPayload() string {
	return o.Payload
}

func (o *ChatWithAIChatAssistantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewChatWithAIChatAssistantInternalServerError creates a ChatWithAIChatAssistantInternalServerError with default headers values
func NewChatWithAIChatAssistantInternalServerError() *ChatWithAIChatAssistantInternalServerError {
	return &ChatWithAIChatAssistantInternalServerError{}
}

/*
ChatWithAIChatAssistantInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ChatWithAIChatAssistantInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this chat with a i chat assistant internal server error response has a 2xx status code
func (o *ChatWithAIChatAssistantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chat with a i chat assistant internal server error response has a 3xx status code
func (o *ChatWithAIChatAssistantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chat with a i chat assistant internal server error response has a 4xx status code
func (o *ChatWithAIChatAssistantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this chat with a i chat assistant internal server error response has a 5xx status code
func (o *ChatWithAIChatAssistantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this chat with a i chat assistant internal server error response a status code equal to that given
func (o *ChatWithAIChatAssistantInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the chat with a i chat assistant internal server error response
func (o *ChatWithAIChatAssistantInternalServerError) Code() int {
	return 500
}

func (o *ChatWithAIChatAssistantInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantInternalServerError %s", 500, payload)
}

func (o *ChatWithAIChatAssistantInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /ai/{projectId}/chat][%d] chatWithAIChatAssistantInternalServerError %s", 500, payload)
}

func (o *ChatWithAIChatAssistantInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *ChatWithAIChatAssistantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
