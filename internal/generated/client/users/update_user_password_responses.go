// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateUserPasswordReader is a Reader for the UpdateUserPassword structure.
type UpdateUserPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /users/{id}/password] updateUserPassword", response, response.Code())
	}
}

// NewUpdateUserPasswordOK creates a UpdateUserPasswordOK with default headers values
func NewUpdateUserPasswordOK() *UpdateUserPasswordOK {
	return &UpdateUserPasswordOK{}
}

/*
UpdateUserPasswordOK describes a response with status code 200, with default header values.

Password updated successfully
*/
type UpdateUserPasswordOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this update user password o k response has a 2xx status code
func (o *UpdateUserPasswordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user password o k response has a 3xx status code
func (o *UpdateUserPasswordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user password o k response has a 4xx status code
func (o *UpdateUserPasswordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user password o k response has a 5xx status code
func (o *UpdateUserPasswordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user password o k response a status code equal to that given
func (o *UpdateUserPasswordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user password o k response
func (o *UpdateUserPasswordOK) Code() int {
	return 200
}

func (o *UpdateUserPasswordOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordOK %s", 200, payload)
}

func (o *UpdateUserPasswordOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordOK %s", 200, payload)
}

func (o *UpdateUserPasswordOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *UpdateUserPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserPasswordBadRequest creates a UpdateUserPasswordBadRequest with default headers values
func NewUpdateUserPasswordBadRequest() *UpdateUserPasswordBadRequest {
	return &UpdateUserPasswordBadRequest{}
}

/*
UpdateUserPasswordBadRequest describes a response with status code 400, with default header values.

Invalid request body
*/
type UpdateUserPasswordBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user password bad request response has a 2xx status code
func (o *UpdateUserPasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user password bad request response has a 3xx status code
func (o *UpdateUserPasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user password bad request response has a 4xx status code
func (o *UpdateUserPasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user password bad request response has a 5xx status code
func (o *UpdateUserPasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user password bad request response a status code equal to that given
func (o *UpdateUserPasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user password bad request response
func (o *UpdateUserPasswordBadRequest) Code() int {
	return 400
}

func (o *UpdateUserPasswordBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordBadRequest %s", 400, payload)
}

func (o *UpdateUserPasswordBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordBadRequest %s", 400, payload)
}

func (o *UpdateUserPasswordBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserPasswordUnauthorized creates a UpdateUserPasswordUnauthorized with default headers values
func NewUpdateUserPasswordUnauthorized() *UpdateUserPasswordUnauthorized {
	return &UpdateUserPasswordUnauthorized{}
}

/*
UpdateUserPasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserPasswordUnauthorized struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user password unauthorized response has a 2xx status code
func (o *UpdateUserPasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user password unauthorized response has a 3xx status code
func (o *UpdateUserPasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user password unauthorized response has a 4xx status code
func (o *UpdateUserPasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user password unauthorized response has a 5xx status code
func (o *UpdateUserPasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user password unauthorized response a status code equal to that given
func (o *UpdateUserPasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update user password unauthorized response
func (o *UpdateUserPasswordUnauthorized) Code() int {
	return 401
}

func (o *UpdateUserPasswordUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordUnauthorized %s", 401, payload)
}

func (o *UpdateUserPasswordUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordUnauthorized %s", 401, payload)
}

func (o *UpdateUserPasswordUnauthorized) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserPasswordForbidden creates a UpdateUserPasswordForbidden with default headers values
func NewUpdateUserPasswordForbidden() *UpdateUserPasswordForbidden {
	return &UpdateUserPasswordForbidden{}
}

/*
UpdateUserPasswordForbidden describes a response with status code 403, with default header values.

Forbidden - Requires admin role or self-modification not allowed
*/
type UpdateUserPasswordForbidden struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user password forbidden response has a 2xx status code
func (o *UpdateUserPasswordForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user password forbidden response has a 3xx status code
func (o *UpdateUserPasswordForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user password forbidden response has a 4xx status code
func (o *UpdateUserPasswordForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user password forbidden response has a 5xx status code
func (o *UpdateUserPasswordForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user password forbidden response a status code equal to that given
func (o *UpdateUserPasswordForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user password forbidden response
func (o *UpdateUserPasswordForbidden) Code() int {
	return 403
}

func (o *UpdateUserPasswordForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordForbidden %s", 403, payload)
}

func (o *UpdateUserPasswordForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordForbidden %s", 403, payload)
}

func (o *UpdateUserPasswordForbidden) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserPasswordNotFound creates a UpdateUserPasswordNotFound with default headers values
func NewUpdateUserPasswordNotFound() *UpdateUserPasswordNotFound {
	return &UpdateUserPasswordNotFound{}
}

/*
UpdateUserPasswordNotFound describes a response with status code 404, with default header values.

User not found
*/
type UpdateUserPasswordNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user password not found response has a 2xx status code
func (o *UpdateUserPasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user password not found response has a 3xx status code
func (o *UpdateUserPasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user password not found response has a 4xx status code
func (o *UpdateUserPasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user password not found response has a 5xx status code
func (o *UpdateUserPasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user password not found response a status code equal to that given
func (o *UpdateUserPasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user password not found response
func (o *UpdateUserPasswordNotFound) Code() int {
	return 404
}

func (o *UpdateUserPasswordNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordNotFound %s", 404, payload)
}

func (o *UpdateUserPasswordNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/password][%d] updateUserPasswordNotFound %s", 404, payload)
}

func (o *UpdateUserPasswordNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
