// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateUserRoleReader is a Reader for the UpdateUserRole structure.
type UpdateUserRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserRoleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserRoleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /users/{id}/role] updateUserRole", response, response.Code())
	}
}

// NewUpdateUserRoleOK creates a UpdateUserRoleOK with default headers values
func NewUpdateUserRoleOK() *UpdateUserRoleOK {
	return &UpdateUserRoleOK{}
}

/*
UpdateUserRoleOK describes a response with status code 200, with default header values.

User role updated
*/
type UpdateUserRoleOK struct {
	Payload *models.AuthUserResponse
}

// IsSuccess returns true when this update user role o k response has a 2xx status code
func (o *UpdateUserRoleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user role o k response has a 3xx status code
func (o *UpdateUserRoleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role o k response has a 4xx status code
func (o *UpdateUserRoleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user role o k response has a 5xx status code
func (o *UpdateUserRoleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role o k response a status code equal to that given
func (o *UpdateUserRoleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update user role o k response
func (o *UpdateUserRoleOK) Code() int {
	return 200
}

func (o *UpdateUserRoleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleOK %s", 200, payload)
}

func (o *UpdateUserRoleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleOK %s", 200, payload)
}

func (o *UpdateUserRoleOK) GetPayload() *models.AuthUserResponse {
	return o.Payload
}

func (o *UpdateUserRoleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthUserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserRoleBadRequest creates a UpdateUserRoleBadRequest with default headers values
func NewUpdateUserRoleBadRequest() *UpdateUserRoleBadRequest {
	return &UpdateUserRoleBadRequest{}
}

/*
UpdateUserRoleBadRequest describes a response with status code 400, with default header values.

Invalid request body
*/
type UpdateUserRoleBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user role bad request response has a 2xx status code
func (o *UpdateUserRoleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role bad request response has a 3xx status code
func (o *UpdateUserRoleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role bad request response has a 4xx status code
func (o *UpdateUserRoleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role bad request response has a 5xx status code
func (o *UpdateUserRoleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role bad request response a status code equal to that given
func (o *UpdateUserRoleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update user role bad request response
func (o *UpdateUserRoleBadRequest) Code() int {
	return 400
}

func (o *UpdateUserRoleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleBadRequest %s", 400, payload)
}

func (o *UpdateUserRoleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleBadRequest %s", 400, payload)
}

func (o *UpdateUserRoleBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserRoleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserRoleUnauthorized creates a UpdateUserRoleUnauthorized with default headers values
func NewUpdateUserRoleUnauthorized() *UpdateUserRoleUnauthorized {
	return &UpdateUserRoleUnauthorized{}
}

/*
UpdateUserRoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserRoleUnauthorized struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user role unauthorized response has a 2xx status code
func (o *UpdateUserRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role unauthorized response has a 3xx status code
func (o *UpdateUserRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role unauthorized response has a 4xx status code
func (o *UpdateUserRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role unauthorized response has a 5xx status code
func (o *UpdateUserRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role unauthorized response a status code equal to that given
func (o *UpdateUserRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update user role unauthorized response
func (o *UpdateUserRoleUnauthorized) Code() int {
	return 401
}

func (o *UpdateUserRoleUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleUnauthorized %s", 401, payload)
}

func (o *UpdateUserRoleUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleUnauthorized %s", 401, payload)
}

func (o *UpdateUserRoleUnauthorized) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserRoleForbidden creates a UpdateUserRoleForbidden with default headers values
func NewUpdateUserRoleForbidden() *UpdateUserRoleForbidden {
	return &UpdateUserRoleForbidden{}
}

/*
UpdateUserRoleForbidden describes a response with status code 403, with default header values.

Forbidden - Requires admin role or self-modification not allowed
*/
type UpdateUserRoleForbidden struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user role forbidden response has a 2xx status code
func (o *UpdateUserRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role forbidden response has a 3xx status code
func (o *UpdateUserRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role forbidden response has a 4xx status code
func (o *UpdateUserRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role forbidden response has a 5xx status code
func (o *UpdateUserRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role forbidden response a status code equal to that given
func (o *UpdateUserRoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update user role forbidden response
func (o *UpdateUserRoleForbidden) Code() int {
	return 403
}

func (o *UpdateUserRoleForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleForbidden %s", 403, payload)
}

func (o *UpdateUserRoleForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleForbidden %s", 403, payload)
}

func (o *UpdateUserRoleForbidden) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateUserRoleNotFound creates a UpdateUserRoleNotFound with default headers values
func NewUpdateUserRoleNotFound() *UpdateUserRoleNotFound {
	return &UpdateUserRoleNotFound{}
}

/*
UpdateUserRoleNotFound describes a response with status code 404, with default header values.

User not found
*/
type UpdateUserRoleNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update user role not found response has a 2xx status code
func (o *UpdateUserRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user role not found response has a 3xx status code
func (o *UpdateUserRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user role not found response has a 4xx status code
func (o *UpdateUserRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user role not found response has a 5xx status code
func (o *UpdateUserRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user role not found response a status code equal to that given
func (o *UpdateUserRoleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update user role not found response
func (o *UpdateUserRoleNotFound) Code() int {
	return 404
}

func (o *UpdateUserRoleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleNotFound %s", 404, payload)
}

func (o *UpdateUserRoleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /users/{id}/role][%d] updateUserRoleNotFound %s", 404, payload)
}

func (o *UpdateUserRoleNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateUserRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
