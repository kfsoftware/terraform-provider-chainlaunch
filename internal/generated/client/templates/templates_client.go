// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new templates API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new templates API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ApplyTemplate(params *ApplyTemplateParams, opts ...ClientOption) (*ApplyTemplateOK, error)

	CreateTemplate(params *CreateTemplateParams, opts ...ClientOption) (*CreateTemplateCreated, error)

	DeleteTemplate(params *DeleteTemplateParams, opts ...ClientOption) (*DeleteTemplateNoContent, error)

	ExportTemplate(params *ExportTemplateParams, opts ...ClientOption) (*ExportTemplateOK, error)

	GetDefaultTemplate(params *GetDefaultTemplateParams, opts ...ClientOption) (*GetDefaultTemplateOK, error)

	GetPopularTemplates(params *GetPopularTemplatesParams, opts ...ClientOption) (*GetPopularTemplatesOK, error)

	GetTemplate(params *GetTemplateParams, opts ...ClientOption) (*GetTemplateOK, error)

	ImportTemplate(params *ImportTemplateParams, opts ...ClientOption) (*ImportTemplateCreated, error)

	ListTemplates(params *ListTemplatesParams, opts ...ClientOption) (*ListTemplatesOK, error)

	ListTemplatesByPlatform(params *ListTemplatesByPlatformParams, opts ...ClientOption) (*ListTemplatesByPlatformOK, error)

	SearchTemplates(params *SearchTemplatesParams, opts ...ClientOption) (*SearchTemplatesOK, error)

	SetDefaultTemplate(params *SetDefaultTemplateParams, opts ...ClientOption) (*SetDefaultTemplateOK, error)

	UpdateTemplate(params *UpdateTemplateParams, opts ...ClientOption) (*UpdateTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ApplyTemplate applies a template

Apply a template to generate node configuration with variable substitution
*/
func (a *Client) ApplyTemplate(params *ApplyTemplateParams, opts ...ClientOption) (*ApplyTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewApplyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "applyTemplate",
		Method:             "POST",
		PathPattern:        "/templates/{id}/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ApplyTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ApplyTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for applyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTemplate creates a new node template

Create a new template for blockchain nodes with platform-specific configuration
*/
func (a *Client) CreateTemplate(params *CreateTemplateParams, opts ...ClientOption) (*CreateTemplateCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTemplate",
		Method:             "POST",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateTemplateCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTemplate deletes a template

Soft delete a template (marks as inactive)
*/
func (a *Client) DeleteTemplate(params *DeleteTemplateParams, opts ...ClientOption) (*DeleteTemplateNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteTemplateNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportTemplate exports a template

Export a template as JSON for backup or sharing
*/
func (a *Client) ExportTemplate(params *ExportTemplateParams, opts ...ClientOption) (*ExportTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewExportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportTemplate",
		Method:             "GET",
		PathPattern:        "/templates/{id}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ExportTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDefaultTemplate gets default template

Get the default template for a specific platform and node type
*/
func (a *Client) GetDefaultTemplate(params *GetDefaultTemplateParams, opts ...ClientOption) (*GetDefaultTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetDefaultTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDefaultTemplate",
		Method:             "GET",
		PathPattern:        "/templates/platforms/{platform}/{nodeType}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDefaultTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetDefaultTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPopularTemplates gets popular templates

Get the most frequently used templates
*/
func (a *Client) GetPopularTemplates(params *GetPopularTemplatesParams, opts ...ClientOption) (*GetPopularTemplatesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetPopularTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPopularTemplates",
		Method:             "GET",
		PathPattern:        "/templates/popular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPopularTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetPopularTemplatesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPopularTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTemplate gets a template by ID

Retrieve a specific template by its ID
*/
func (a *Client) GetTemplate(params *GetTemplateParams, opts ...ClientOption) (*GetTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTemplate",
		Method:             "GET",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportTemplate imports a template

Import a template from exported JSON data
*/
func (a *Client) ImportTemplate(params *ImportTemplateParams, opts ...ClientOption) (*ImportTemplateCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewImportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importTemplate",
		Method:             "POST",
		PathPattern:        "/templates/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ImportTemplateCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTemplates lists templates

Get a list of all active templates with optional filtering
*/
func (a *Client) ListTemplates(params *ListTemplatesParams, opts ...ClientOption) (*ListTemplatesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTemplates",
		Method:             "GET",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListTemplatesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTemplatesByPlatform lists templates by platform

Get all templates for a specific blockchain platform
*/
func (a *Client) ListTemplatesByPlatform(params *ListTemplatesByPlatformParams, opts ...ClientOption) (*ListTemplatesByPlatformOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListTemplatesByPlatformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTemplatesByPlatform",
		Method:             "GET",
		PathPattern:        "/templates/platforms/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTemplatesByPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListTemplatesByPlatformOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTemplatesByPlatform: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTemplates searches templates

Search for templates using various criteria
*/
func (a *Client) SearchTemplates(params *SearchTemplatesParams, opts ...ClientOption) (*SearchTemplatesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSearchTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTemplates",
		Method:             "GET",
		PathPattern:        "/templates/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SearchTemplatesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDefaultTemplate sets template as default

Set a template as the default for its platform and node type
*/
func (a *Client) SetDefaultTemplate(params *SetDefaultTemplateParams, opts ...ClientOption) (*SetDefaultTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSetDefaultTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDefaultTemplate",
		Method:             "POST",
		PathPattern:        "/templates/{id}/set-default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetDefaultTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SetDefaultTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTemplate updates a template

Update an existing template's configuration
*/
func (a *Client) UpdateTemplate(params *UpdateTemplateParams, opts ...ClientOption) (*UpdateTemplateOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTemplate",
		Method:             "PUT",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateTemplateOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
