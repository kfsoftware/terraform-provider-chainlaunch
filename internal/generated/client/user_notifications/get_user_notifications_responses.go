// Code generated by go-swagger; DO NOT EDIT.

package user_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetUserNotificationsReader is a Reader for the GetUserNotifications structure.
type GetUserNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetUserNotificationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /user-notifications] GetUserNotifications", response, response.Code())
	}
}

// NewGetUserNotificationsOK creates a GetUserNotificationsOK with default headers values
func NewGetUserNotificationsOK() *GetUserNotificationsOK {
	return &GetUserNotificationsOK{}
}

/*
GetUserNotificationsOK describes a response with status code 200, with default header values.

OK
*/
type GetUserNotificationsOK struct {
	Payload *GetUserNotificationsOKBody
}

// IsSuccess returns true when this get user notifications o k response has a 2xx status code
func (o *GetUserNotificationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user notifications o k response has a 3xx status code
func (o *GetUserNotificationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user notifications o k response has a 4xx status code
func (o *GetUserNotificationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user notifications o k response has a 5xx status code
func (o *GetUserNotificationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user notifications o k response a status code equal to that given
func (o *GetUserNotificationsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user notifications o k response
func (o *GetUserNotificationsOK) Code() int {
	return 200
}

func (o *GetUserNotificationsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user-notifications][%d] getUserNotificationsOK %s", 200, payload)
}

func (o *GetUserNotificationsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user-notifications][%d] getUserNotificationsOK %s", 200, payload)
}

func (o *GetUserNotificationsOK) GetPayload() *GetUserNotificationsOKBody {
	return o.Payload
}

func (o *GetUserNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetUserNotificationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetUserNotificationsInternalServerError creates a GetUserNotificationsInternalServerError with default headers values
func NewGetUserNotificationsInternalServerError() *GetUserNotificationsInternalServerError {
	return &GetUserNotificationsInternalServerError{}
}

/*
GetUserNotificationsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetUserNotificationsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get user notifications internal server error response has a 2xx status code
func (o *GetUserNotificationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user notifications internal server error response has a 3xx status code
func (o *GetUserNotificationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user notifications internal server error response has a 4xx status code
func (o *GetUserNotificationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user notifications internal server error response has a 5xx status code
func (o *GetUserNotificationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get user notifications internal server error response a status code equal to that given
func (o *GetUserNotificationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get user notifications internal server error response
func (o *GetUserNotificationsInternalServerError) Code() int {
	return 500
}

func (o *GetUserNotificationsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user-notifications][%d] getUserNotificationsInternalServerError %s", 500, payload)
}

func (o *GetUserNotificationsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /user-notifications][%d] getUserNotificationsInternalServerError %s", 500, payload)
}

func (o *GetUserNotificationsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetUserNotificationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

/*
GetUserNotificationsOKBody get user notifications o k body
swagger:model GetUserNotificationsOKBody
*/
type GetUserNotificationsOKBody struct {
	models.ResponseResponse

	// data
	Data []*models.ServiceNotificationRecord `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetUserNotificationsOKBody) UnmarshalJSON(raw []byte) error {
	// GetUserNotificationsOKBodyAO0
	var getUserNotificationsOKBodyAO0 models.ResponseResponse
	if err := swag.ReadJSON(raw, &getUserNotificationsOKBodyAO0); err != nil {
		return err
	}
	o.ResponseResponse = getUserNotificationsOKBodyAO0

	// GetUserNotificationsOKBodyAO1
	var dataGetUserNotificationsOKBodyAO1 struct {
		Data []*models.ServiceNotificationRecord `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetUserNotificationsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetUserNotificationsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetUserNotificationsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getUserNotificationsOKBodyAO0, err := swag.WriteJSON(o.ResponseResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getUserNotificationsOKBodyAO0)
	var dataGetUserNotificationsOKBodyAO1 struct {
		Data []*models.ServiceNotificationRecord `json:"data"`
	}

	dataGetUserNotificationsOKBodyAO1.Data = o.Data

	jsonDataGetUserNotificationsOKBodyAO1, errGetUserNotificationsOKBodyAO1 := swag.WriteJSON(dataGetUserNotificationsOKBodyAO1)
	if errGetUserNotificationsOKBodyAO1 != nil {
		return nil, errGetUserNotificationsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetUserNotificationsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get user notifications o k body
func (o *GetUserNotificationsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ResponseResponse
	if err := o.ResponseResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserNotificationsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getUserNotificationsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getUserNotificationsOK" + "." + "data" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get user notifications o k body based on the context it is used
func (o *GetUserNotificationsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ResponseResponse
	if err := o.ResponseResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserNotificationsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("getUserNotificationsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("getUserNotificationsOK" + "." + "data" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserNotificationsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserNotificationsOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserNotificationsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
