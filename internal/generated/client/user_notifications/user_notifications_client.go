// Code generated by go-swagger; DO NOT EDIT.

package user_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new user notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new user notifications API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new user notifications API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for user notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteUserNotificationsID(params *DeleteUserNotificationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserNotificationsIDOK, error)

	GetUserNotifications(params *GetUserNotificationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsOK, error)

	GetUserNotificationsTypeEventType(params *GetUserNotificationsTypeEventTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsTypeEventTypeOK, error)

	GetUserNotificationsUnread(params *GetUserNotificationsUnreadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsUnreadOK, error)

	GetUserNotificationsUnreadCount(params *GetUserNotificationsUnreadCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsUnreadCountOK, error)

	PostUserNotificationsIDRead(params *PostUserNotificationsIDReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsIDReadOK, error)

	PostUserNotificationsIDUnread(params *PostUserNotificationsIDUnreadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsIDUnreadOK, error)

	PostUserNotificationsReadAll(params *PostUserNotificationsReadAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsReadAllOK, error)

	PostUserNotificationsTypeEventTypeReadAll(params *PostUserNotificationsTypeEventTypeReadAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsTypeEventTypeReadAllOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteUserNotificationsID deletes notification

Delete a specific notification
*/
func (a *Client) DeleteUserNotificationsID(params *DeleteUserNotificationsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserNotificationsIDOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteUserNotificationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUserNotificationsID",
		Method:             "DELETE",
		PathPattern:        "/user-notifications/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUserNotificationsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteUserNotificationsIDOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUserNotificationsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserNotifications gets user notifications

Get paginated list of user notifications, ordered chronologically (newest first)
*/
func (a *Client) GetUserNotifications(params *GetUserNotificationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetUserNotificationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserNotifications",
		Method:             "GET",
		PathPattern:        "/user-notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetUserNotificationsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserNotificationsTypeEventType gets notifications by type

Get paginated list of notifications filtered by event type
*/
func (a *Client) GetUserNotificationsTypeEventType(params *GetUserNotificationsTypeEventTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsTypeEventTypeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetUserNotificationsTypeEventTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserNotificationsTypeEventType",
		Method:             "GET",
		PathPattern:        "/user-notifications/type/{eventType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserNotificationsTypeEventTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetUserNotificationsTypeEventTypeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserNotificationsTypeEventType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserNotificationsUnread gets unread user notifications

Get paginated list of unread user notifications, ordered chronologically (newest first)
*/
func (a *Client) GetUserNotificationsUnread(params *GetUserNotificationsUnreadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsUnreadOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetUserNotificationsUnreadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserNotificationsUnread",
		Method:             "GET",
		PathPattern:        "/user-notifications/unread",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserNotificationsUnreadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetUserNotificationsUnreadOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserNotificationsUnread: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserNotificationsUnreadCount gets unread notification count

Get the count of unread notifications for the current user
*/
func (a *Client) GetUserNotificationsUnreadCount(params *GetUserNotificationsUnreadCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserNotificationsUnreadCountOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetUserNotificationsUnreadCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserNotificationsUnreadCount",
		Method:             "GET",
		PathPattern:        "/user-notifications/unread/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserNotificationsUnreadCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetUserNotificationsUnreadCountOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserNotificationsUnreadCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserNotificationsIDRead marks notification as read

Mark a specific notification as read
*/
func (a *Client) PostUserNotificationsIDRead(params *PostUserNotificationsIDReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsIDReadOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostUserNotificationsIDReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserNotificationsIDRead",
		Method:             "POST",
		PathPattern:        "/user-notifications/{id}/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserNotificationsIDReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostUserNotificationsIDReadOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserNotificationsIDRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserNotificationsIDUnread marks notification as unread

Mark a specific notification as unread
*/
func (a *Client) PostUserNotificationsIDUnread(params *PostUserNotificationsIDUnreadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsIDUnreadOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostUserNotificationsIDUnreadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserNotificationsIDUnread",
		Method:             "POST",
		PathPattern:        "/user-notifications/{id}/unread",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserNotificationsIDUnreadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostUserNotificationsIDUnreadOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserNotificationsIDUnread: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserNotificationsReadAll marks all notifications as read

Mark all notifications for the current user as read
*/
func (a *Client) PostUserNotificationsReadAll(params *PostUserNotificationsReadAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsReadAllOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostUserNotificationsReadAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserNotificationsReadAll",
		Method:             "POST",
		PathPattern:        "/user-notifications/read-all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserNotificationsReadAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostUserNotificationsReadAllOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserNotificationsReadAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUserNotificationsTypeEventTypeReadAll marks notifications by type as read

Mark all notifications of a specific type as read for the current user
*/
func (a *Client) PostUserNotificationsTypeEventTypeReadAll(params *PostUserNotificationsTypeEventTypeReadAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUserNotificationsTypeEventTypeReadAllOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPostUserNotificationsTypeEventTypeReadAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUserNotificationsTypeEventTypeReadAll",
		Method:             "POST",
		PathPattern:        "/user-notifications/type/{eventType}/read-all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserNotificationsTypeEventTypeReadAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PostUserNotificationsTypeEventTypeReadAllOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUserNotificationsTypeEventTypeReadAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
