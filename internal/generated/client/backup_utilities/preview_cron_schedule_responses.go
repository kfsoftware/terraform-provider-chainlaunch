// Code generated by go-swagger; DO NOT EDIT.

package backup_utilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// PreviewCronScheduleReader is a Reader for the PreviewCronSchedule structure.
type PreviewCronScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PreviewCronScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewPreviewCronScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPreviewCronScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /backups/cron/preview] previewCronSchedule", response, response.Code())
	}
}

// NewPreviewCronScheduleOK creates a PreviewCronScheduleOK with default headers values
func NewPreviewCronScheduleOK() *PreviewCronScheduleOK {
	return &PreviewCronScheduleOK{}
}

/*
PreviewCronScheduleOK describes a response with status code 200, with default header values.

OK
*/
type PreviewCronScheduleOK struct {
	Payload *models.HTTPCronPreviewResponse
}

// IsSuccess returns true when this preview cron schedule o k response has a 2xx status code
func (o *PreviewCronScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this preview cron schedule o k response has a 3xx status code
func (o *PreviewCronScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this preview cron schedule o k response has a 4xx status code
func (o *PreviewCronScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this preview cron schedule o k response has a 5xx status code
func (o *PreviewCronScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this preview cron schedule o k response a status code equal to that given
func (o *PreviewCronScheduleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the preview cron schedule o k response
func (o *PreviewCronScheduleOK) Code() int {
	return 200
}

func (o *PreviewCronScheduleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /backups/cron/preview][%d] previewCronScheduleOK %s", 200, payload)
}

func (o *PreviewCronScheduleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /backups/cron/preview][%d] previewCronScheduleOK %s", 200, payload)
}

func (o *PreviewCronScheduleOK) GetPayload() *models.HTTPCronPreviewResponse {
	return o.Payload
}

func (o *PreviewCronScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPCronPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewPreviewCronScheduleBadRequest creates a PreviewCronScheduleBadRequest with default headers values
func NewPreviewCronScheduleBadRequest() *PreviewCronScheduleBadRequest {
	return &PreviewCronScheduleBadRequest{}
}

/*
PreviewCronScheduleBadRequest describes a response with status code 400, with default header values.

Invalid cron expression
*/
type PreviewCronScheduleBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this preview cron schedule bad request response has a 2xx status code
func (o *PreviewCronScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this preview cron schedule bad request response has a 3xx status code
func (o *PreviewCronScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this preview cron schedule bad request response has a 4xx status code
func (o *PreviewCronScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this preview cron schedule bad request response has a 5xx status code
func (o *PreviewCronScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this preview cron schedule bad request response a status code equal to that given
func (o *PreviewCronScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the preview cron schedule bad request response
func (o *PreviewCronScheduleBadRequest) Code() int {
	return 400
}

func (o *PreviewCronScheduleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /backups/cron/preview][%d] previewCronScheduleBadRequest %s", 400, payload)
}

func (o *PreviewCronScheduleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /backups/cron/preview][%d] previewCronScheduleBadRequest %s", 400, payload)
}

func (o *PreviewCronScheduleBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *PreviewCronScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
