// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAuditLogsParams creates a new ListAuditLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAuditLogsParams() *ListAuditLogsParams {
	return &ListAuditLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAuditLogsParamsWithTimeout creates a new ListAuditLogsParams object
// with the ability to set a timeout on a request.
func NewListAuditLogsParamsWithTimeout(timeout time.Duration) *ListAuditLogsParams {
	return &ListAuditLogsParams{
		timeout: timeout,
	}
}

// NewListAuditLogsParamsWithContext creates a new ListAuditLogsParams object
// with the ability to set a context for a request.
func NewListAuditLogsParamsWithContext(ctx context.Context) *ListAuditLogsParams {
	return &ListAuditLogsParams{
		Context: ctx,
	}
}

// NewListAuditLogsParamsWithHTTPClient creates a new ListAuditLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAuditLogsParamsWithHTTPClient(client *http.Client) *ListAuditLogsParams {
	return &ListAuditLogsParams{
		HTTPClient: client,
	}
}

/*
ListAuditLogsParams contains all the parameters to send to the API endpoint

	for the list audit logs operation.

	Typically these are written to a http.Request.
*/
type ListAuditLogsParams struct {

	/* End.

	   End time (RFC3339 format)
	*/
	End *string

	/* EventOutcome.

	   Filter by event outcome (success, failure)
	*/
	EventOutcome *string

	/* EventSource.

	   Filter by event source
	*/
	EventSource *string

	/* EventType.

	   Filter by event type
	*/
	EventType *string

	/* Page.

	   Page number (default: 1)
	*/
	Page *int64

	/* PageSize.

	   Page size (default: 10)
	*/
	PageSize *int64

	/* Severity.

	   Filter by severity (info, warning, error, critical)
	*/
	Severity *string

	/* SourceIP.

	   Filter by source IP address
	*/
	SourceIP *string

	/* Start.

	   Start time (RFC3339 format)
	*/
	Start *string

	/* UserID.

	   Filter by user ID
	*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAuditLogsParams) WithDefaults() *ListAuditLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list audit logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAuditLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list audit logs params
func (o *ListAuditLogsParams) WithTimeout(timeout time.Duration) *ListAuditLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list audit logs params
func (o *ListAuditLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list audit logs params
func (o *ListAuditLogsParams) WithContext(ctx context.Context) *ListAuditLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list audit logs params
func (o *ListAuditLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list audit logs params
func (o *ListAuditLogsParams) WithHTTPClient(client *http.Client) *ListAuditLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list audit logs params
func (o *ListAuditLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnd adds the end to the list audit logs params
func (o *ListAuditLogsParams) WithEnd(end *string) *ListAuditLogsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the list audit logs params
func (o *ListAuditLogsParams) SetEnd(end *string) {
	o.End = end
}

// WithEventOutcome adds the eventOutcome to the list audit logs params
func (o *ListAuditLogsParams) WithEventOutcome(eventOutcome *string) *ListAuditLogsParams {
	o.SetEventOutcome(eventOutcome)
	return o
}

// SetEventOutcome adds the eventOutcome to the list audit logs params
func (o *ListAuditLogsParams) SetEventOutcome(eventOutcome *string) {
	o.EventOutcome = eventOutcome
}

// WithEventSource adds the eventSource to the list audit logs params
func (o *ListAuditLogsParams) WithEventSource(eventSource *string) *ListAuditLogsParams {
	o.SetEventSource(eventSource)
	return o
}

// SetEventSource adds the eventSource to the list audit logs params
func (o *ListAuditLogsParams) SetEventSource(eventSource *string) {
	o.EventSource = eventSource
}

// WithEventType adds the eventType to the list audit logs params
func (o *ListAuditLogsParams) WithEventType(eventType *string) *ListAuditLogsParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the list audit logs params
func (o *ListAuditLogsParams) SetEventType(eventType *string) {
	o.EventType = eventType
}

// WithPage adds the page to the list audit logs params
func (o *ListAuditLogsParams) WithPage(page *int64) *ListAuditLogsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list audit logs params
func (o *ListAuditLogsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list audit logs params
func (o *ListAuditLogsParams) WithPageSize(pageSize *int64) *ListAuditLogsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list audit logs params
func (o *ListAuditLogsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSeverity adds the severity to the list audit logs params
func (o *ListAuditLogsParams) WithSeverity(severity *string) *ListAuditLogsParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the list audit logs params
func (o *ListAuditLogsParams) SetSeverity(severity *string) {
	o.Severity = severity
}

// WithSourceIP adds the sourceIP to the list audit logs params
func (o *ListAuditLogsParams) WithSourceIP(sourceIP *string) *ListAuditLogsParams {
	o.SetSourceIP(sourceIP)
	return o
}

// SetSourceIP adds the sourceIp to the list audit logs params
func (o *ListAuditLogsParams) SetSourceIP(sourceIP *string) {
	o.SourceIP = sourceIP
}

// WithStart adds the start to the list audit logs params
func (o *ListAuditLogsParams) WithStart(start *string) *ListAuditLogsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the list audit logs params
func (o *ListAuditLogsParams) SetStart(start *string) {
	o.Start = start
}

// WithUserID adds the userID to the list audit logs params
func (o *ListAuditLogsParams) WithUserID(userID *string) *ListAuditLogsParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the list audit logs params
func (o *ListAuditLogsParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ListAuditLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.End != nil {

		// query param end
		var qrEnd string

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.EventOutcome != nil {

		// query param event_outcome
		var qrEventOutcome string

		if o.EventOutcome != nil {
			qrEventOutcome = *o.EventOutcome
		}
		qEventOutcome := qrEventOutcome
		if qEventOutcome != "" {

			if err := r.SetQueryParam("event_outcome", qEventOutcome); err != nil {
				return err
			}
		}
	}

	if o.EventSource != nil {

		// query param event_source
		var qrEventSource string

		if o.EventSource != nil {
			qrEventSource = *o.EventSource
		}
		qEventSource := qrEventSource
		if qEventSource != "" {

			if err := r.SetQueryParam("event_source", qEventSource); err != nil {
				return err
			}
		}
	}

	if o.EventType != nil {

		// query param event_type
		var qrEventType string

		if o.EventType != nil {
			qrEventType = *o.EventType
		}
		qEventType := qrEventType
		if qEventType != "" {

			if err := r.SetQueryParam("event_type", qEventType); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Severity != nil {

		// query param severity
		var qrSeverity string

		if o.Severity != nil {
			qrSeverity = *o.Severity
		}
		qSeverity := qrSeverity
		if qSeverity != "" {

			if err := r.SetQueryParam("severity", qSeverity); err != nil {
				return err
			}
		}
	}

	if o.SourceIP != nil {

		// query param source_ip
		var qrSourceIP string

		if o.SourceIP != nil {
			qrSourceIP = *o.SourceIP
		}
		qSourceIP := qrSourceIP
		if qSourceIP != "" {

			if err := r.SetQueryParam("source_ip", qSourceIP); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
