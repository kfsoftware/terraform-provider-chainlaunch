// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ListAuditLogsReader is a Reader for the ListAuditLogs structure.
type ListAuditLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAuditLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewListAuditLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAuditLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAuditLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAuditLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAuditLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /audit/logs] listAuditLogs", response, response.Code())
	}
}

// NewListAuditLogsOK creates a ListAuditLogsOK with default headers values
func NewListAuditLogsOK() *ListAuditLogsOK {
	return &ListAuditLogsOK{}
}

/*
ListAuditLogsOK describes a response with status code 200, with default header values.

OK
*/
type ListAuditLogsOK struct {
	Payload *models.AuditListLogsResponse
}

// IsSuccess returns true when this list audit logs o k response has a 2xx status code
func (o *ListAuditLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list audit logs o k response has a 3xx status code
func (o *ListAuditLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list audit logs o k response has a 4xx status code
func (o *ListAuditLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list audit logs o k response has a 5xx status code
func (o *ListAuditLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list audit logs o k response a status code equal to that given
func (o *ListAuditLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list audit logs o k response
func (o *ListAuditLogsOK) Code() int {
	return 200
}

func (o *ListAuditLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsOK %s", 200, payload)
}

func (o *ListAuditLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsOK %s", 200, payload)
}

func (o *ListAuditLogsOK) GetPayload() *models.AuditListLogsResponse {
	return o.Payload
}

func (o *ListAuditLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditListLogsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewListAuditLogsBadRequest creates a ListAuditLogsBadRequest with default headers values
func NewListAuditLogsBadRequest() *ListAuditLogsBadRequest {
	return &ListAuditLogsBadRequest{}
}

/*
ListAuditLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ListAuditLogsBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this list audit logs bad request response has a 2xx status code
func (o *ListAuditLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list audit logs bad request response has a 3xx status code
func (o *ListAuditLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list audit logs bad request response has a 4xx status code
func (o *ListAuditLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list audit logs bad request response has a 5xx status code
func (o *ListAuditLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list audit logs bad request response a status code equal to that given
func (o *ListAuditLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list audit logs bad request response
func (o *ListAuditLogsBadRequest) Code() int {
	return 400
}

func (o *ListAuditLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsBadRequest %s", 400, payload)
}

func (o *ListAuditLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsBadRequest %s", 400, payload)
}

func (o *ListAuditLogsBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *ListAuditLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewListAuditLogsUnauthorized creates a ListAuditLogsUnauthorized with default headers values
func NewListAuditLogsUnauthorized() *ListAuditLogsUnauthorized {
	return &ListAuditLogsUnauthorized{}
}

/*
ListAuditLogsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListAuditLogsUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this list audit logs unauthorized response has a 2xx status code
func (o *ListAuditLogsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list audit logs unauthorized response has a 3xx status code
func (o *ListAuditLogsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list audit logs unauthorized response has a 4xx status code
func (o *ListAuditLogsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list audit logs unauthorized response has a 5xx status code
func (o *ListAuditLogsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list audit logs unauthorized response a status code equal to that given
func (o *ListAuditLogsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list audit logs unauthorized response
func (o *ListAuditLogsUnauthorized) Code() int {
	return 401
}

func (o *ListAuditLogsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsUnauthorized %s", 401, payload)
}

func (o *ListAuditLogsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsUnauthorized %s", 401, payload)
}

func (o *ListAuditLogsUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *ListAuditLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewListAuditLogsForbidden creates a ListAuditLogsForbidden with default headers values
func NewListAuditLogsForbidden() *ListAuditLogsForbidden {
	return &ListAuditLogsForbidden{}
}

/*
ListAuditLogsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListAuditLogsForbidden struct {
	Payload map[string]string
}

// IsSuccess returns true when this list audit logs forbidden response has a 2xx status code
func (o *ListAuditLogsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list audit logs forbidden response has a 3xx status code
func (o *ListAuditLogsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list audit logs forbidden response has a 4xx status code
func (o *ListAuditLogsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list audit logs forbidden response has a 5xx status code
func (o *ListAuditLogsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list audit logs forbidden response a status code equal to that given
func (o *ListAuditLogsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list audit logs forbidden response
func (o *ListAuditLogsForbidden) Code() int {
	return 403
}

func (o *ListAuditLogsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsForbidden %s", 403, payload)
}

func (o *ListAuditLogsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsForbidden %s", 403, payload)
}

func (o *ListAuditLogsForbidden) GetPayload() map[string]string {
	return o.Payload
}

func (o *ListAuditLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewListAuditLogsInternalServerError creates a ListAuditLogsInternalServerError with default headers values
func NewListAuditLogsInternalServerError() *ListAuditLogsInternalServerError {
	return &ListAuditLogsInternalServerError{}
}

/*
ListAuditLogsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ListAuditLogsInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this list audit logs internal server error response has a 2xx status code
func (o *ListAuditLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list audit logs internal server error response has a 3xx status code
func (o *ListAuditLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list audit logs internal server error response has a 4xx status code
func (o *ListAuditLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list audit logs internal server error response has a 5xx status code
func (o *ListAuditLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list audit logs internal server error response a status code equal to that given
func (o *ListAuditLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list audit logs internal server error response
func (o *ListAuditLogsInternalServerError) Code() int {
	return 500
}

func (o *ListAuditLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsInternalServerError %s", 500, payload)
}

func (o *ListAuditLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs][%d] listAuditLogsInternalServerError %s", 500, payload)
}

func (o *ListAuditLogsInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *ListAuditLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
