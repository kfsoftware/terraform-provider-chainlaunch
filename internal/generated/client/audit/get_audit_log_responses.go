// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetAuditLogReader is a Reader for the GetAuditLog structure.
type GetAuditLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAuditLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetAuditLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAuditLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAuditLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAuditLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAuditLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAuditLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /audit/logs/{id}] getAuditLog", response, response.Code())
	}
}

// NewGetAuditLogOK creates a GetAuditLogOK with default headers values
func NewGetAuditLogOK() *GetAuditLogOK {
	return &GetAuditLogOK{}
}

/*
GetAuditLogOK describes a response with status code 200, with default header values.

OK
*/
type GetAuditLogOK struct {
	Payload *models.AuditEvent
}

// IsSuccess returns true when this get audit log o k response has a 2xx status code
func (o *GetAuditLogOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get audit log o k response has a 3xx status code
func (o *GetAuditLogOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log o k response has a 4xx status code
func (o *GetAuditLogOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audit log o k response has a 5xx status code
func (o *GetAuditLogOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit log o k response a status code equal to that given
func (o *GetAuditLogOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get audit log o k response
func (o *GetAuditLogOK) Code() int {
	return 200
}

func (o *GetAuditLogOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogOK %s", 200, payload)
}

func (o *GetAuditLogOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogOK %s", 200, payload)
}

func (o *GetAuditLogOK) GetPayload() *models.AuditEvent {
	return o.Payload
}

func (o *GetAuditLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuditEvent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAuditLogBadRequest creates a GetAuditLogBadRequest with default headers values
func NewGetAuditLogBadRequest() *GetAuditLogBadRequest {
	return &GetAuditLogBadRequest{}
}

/*
GetAuditLogBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAuditLogBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get audit log bad request response has a 2xx status code
func (o *GetAuditLogBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit log bad request response has a 3xx status code
func (o *GetAuditLogBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log bad request response has a 4xx status code
func (o *GetAuditLogBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit log bad request response has a 5xx status code
func (o *GetAuditLogBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit log bad request response a status code equal to that given
func (o *GetAuditLogBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get audit log bad request response
func (o *GetAuditLogBadRequest) Code() int {
	return 400
}

func (o *GetAuditLogBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogBadRequest %s", 400, payload)
}

func (o *GetAuditLogBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogBadRequest %s", 400, payload)
}

func (o *GetAuditLogBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAuditLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAuditLogUnauthorized creates a GetAuditLogUnauthorized with default headers values
func NewGetAuditLogUnauthorized() *GetAuditLogUnauthorized {
	return &GetAuditLogUnauthorized{}
}

/*
GetAuditLogUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAuditLogUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this get audit log unauthorized response has a 2xx status code
func (o *GetAuditLogUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit log unauthorized response has a 3xx status code
func (o *GetAuditLogUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log unauthorized response has a 4xx status code
func (o *GetAuditLogUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit log unauthorized response has a 5xx status code
func (o *GetAuditLogUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit log unauthorized response a status code equal to that given
func (o *GetAuditLogUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get audit log unauthorized response
func (o *GetAuditLogUnauthorized) Code() int {
	return 401
}

func (o *GetAuditLogUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogUnauthorized %s", 401, payload)
}

func (o *GetAuditLogUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogUnauthorized %s", 401, payload)
}

func (o *GetAuditLogUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAuditLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAuditLogForbidden creates a GetAuditLogForbidden with default headers values
func NewGetAuditLogForbidden() *GetAuditLogForbidden {
	return &GetAuditLogForbidden{}
}

/*
GetAuditLogForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAuditLogForbidden struct {
	Payload map[string]string
}

// IsSuccess returns true when this get audit log forbidden response has a 2xx status code
func (o *GetAuditLogForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit log forbidden response has a 3xx status code
func (o *GetAuditLogForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log forbidden response has a 4xx status code
func (o *GetAuditLogForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit log forbidden response has a 5xx status code
func (o *GetAuditLogForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit log forbidden response a status code equal to that given
func (o *GetAuditLogForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get audit log forbidden response
func (o *GetAuditLogForbidden) Code() int {
	return 403
}

func (o *GetAuditLogForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogForbidden %s", 403, payload)
}

func (o *GetAuditLogForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogForbidden %s", 403, payload)
}

func (o *GetAuditLogForbidden) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAuditLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAuditLogNotFound creates a GetAuditLogNotFound with default headers values
func NewGetAuditLogNotFound() *GetAuditLogNotFound {
	return &GetAuditLogNotFound{}
}

/*
GetAuditLogNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAuditLogNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this get audit log not found response has a 2xx status code
func (o *GetAuditLogNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit log not found response has a 3xx status code
func (o *GetAuditLogNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log not found response has a 4xx status code
func (o *GetAuditLogNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get audit log not found response has a 5xx status code
func (o *GetAuditLogNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get audit log not found response a status code equal to that given
func (o *GetAuditLogNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get audit log not found response
func (o *GetAuditLogNotFound) Code() int {
	return 404
}

func (o *GetAuditLogNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogNotFound %s", 404, payload)
}

func (o *GetAuditLogNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogNotFound %s", 404, payload)
}

func (o *GetAuditLogNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAuditLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetAuditLogInternalServerError creates a GetAuditLogInternalServerError with default headers values
func NewGetAuditLogInternalServerError() *GetAuditLogInternalServerError {
	return &GetAuditLogInternalServerError{}
}

/*
GetAuditLogInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAuditLogInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get audit log internal server error response has a 2xx status code
func (o *GetAuditLogInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get audit log internal server error response has a 3xx status code
func (o *GetAuditLogInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get audit log internal server error response has a 4xx status code
func (o *GetAuditLogInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get audit log internal server error response has a 5xx status code
func (o *GetAuditLogInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get audit log internal server error response a status code equal to that given
func (o *GetAuditLogInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get audit log internal server error response
func (o *GetAuditLogInternalServerError) Code() int {
	return 500
}

func (o *GetAuditLogInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogInternalServerError %s", 500, payload)
}

func (o *GetAuditLogInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /audit/logs/{id}][%d] getAuditLogInternalServerError %s", 500, payload)
}

func (o *GetAuditLogInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetAuditLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
