// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RefreshAvailablePluginsReader is a Reader for the RefreshAvailablePlugins structure.
type RefreshAvailablePluginsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshAvailablePluginsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshAvailablePluginsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewRefreshAvailablePluginsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugins/available/refresh] refreshAvailablePlugins", response, response.Code())
	}
}

// NewRefreshAvailablePluginsOK creates a RefreshAvailablePluginsOK with default headers values
func NewRefreshAvailablePluginsOK() *RefreshAvailablePluginsOK {
	return &RefreshAvailablePluginsOK{}
}

/*
RefreshAvailablePluginsOK describes a response with status code 200, with default header values.

OK
*/
type RefreshAvailablePluginsOK struct {
	Payload *models.PluginAvailablePluginsResponse
}

// IsSuccess returns true when this refresh available plugins o k response has a 2xx status code
func (o *RefreshAvailablePluginsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh available plugins o k response has a 3xx status code
func (o *RefreshAvailablePluginsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh available plugins o k response has a 4xx status code
func (o *RefreshAvailablePluginsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh available plugins o k response has a 5xx status code
func (o *RefreshAvailablePluginsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh available plugins o k response a status code equal to that given
func (o *RefreshAvailablePluginsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh available plugins o k response
func (o *RefreshAvailablePluginsOK) Code() int {
	return 200
}

func (o *RefreshAvailablePluginsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/available/refresh][%d] refreshAvailablePluginsOK %s", 200, payload)
}

func (o *RefreshAvailablePluginsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/available/refresh][%d] refreshAvailablePluginsOK %s", 200, payload)
}

func (o *RefreshAvailablePluginsOK) GetPayload() *models.PluginAvailablePluginsResponse {
	return o.Payload
}

func (o *RefreshAvailablePluginsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PluginAvailablePluginsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRefreshAvailablePluginsInternalServerError creates a RefreshAvailablePluginsInternalServerError with default headers values
func NewRefreshAvailablePluginsInternalServerError() *RefreshAvailablePluginsInternalServerError {
	return &RefreshAvailablePluginsInternalServerError{}
}

/*
RefreshAvailablePluginsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RefreshAvailablePluginsInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this refresh available plugins internal server error response has a 2xx status code
func (o *RefreshAvailablePluginsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh available plugins internal server error response has a 3xx status code
func (o *RefreshAvailablePluginsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh available plugins internal server error response has a 4xx status code
func (o *RefreshAvailablePluginsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh available plugins internal server error response has a 5xx status code
func (o *RefreshAvailablePluginsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this refresh available plugins internal server error response a status code equal to that given
func (o *RefreshAvailablePluginsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the refresh available plugins internal server error response
func (o *RefreshAvailablePluginsInternalServerError) Code() int {
	return 500
}

func (o *RefreshAvailablePluginsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/available/refresh][%d] refreshAvailablePluginsInternalServerError %s", 500, payload)
}

func (o *RefreshAvailablePluginsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/available/refresh][%d] refreshAvailablePluginsInternalServerError %s", 500, payload)
}

func (o *RefreshAvailablePluginsInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *RefreshAvailablePluginsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
