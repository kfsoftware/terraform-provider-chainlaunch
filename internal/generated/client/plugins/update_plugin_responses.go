// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdatePluginReader is a Reader for the UpdatePlugin structure.
type UpdatePluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePluginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /plugins/{name}] updatePlugin", response, response.Code())
	}
}

// NewUpdatePluginOK creates a UpdatePluginOK with default headers values
func NewUpdatePluginOK() *UpdatePluginOK {
	return &UpdatePluginOK{}
}

/*
UpdatePluginOK describes a response with status code 200, with default header values.

OK
*/
type UpdatePluginOK struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgPluginTypesPlugin
}

// IsSuccess returns true when this update plugin o k response has a 2xx status code
func (o *UpdatePluginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update plugin o k response has a 3xx status code
func (o *UpdatePluginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plugin o k response has a 4xx status code
func (o *UpdatePluginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plugin o k response has a 5xx status code
func (o *UpdatePluginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update plugin o k response a status code equal to that given
func (o *UpdatePluginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update plugin o k response
func (o *UpdatePluginOK) Code() int {
	return 200
}

func (o *UpdatePluginOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginOK %s", 200, payload)
}

func (o *UpdatePluginOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginOK %s", 200, payload)
}

func (o *UpdatePluginOK) GetPayload() *models.GithubComChainlaunchChainlaunchPkgPluginTypesPlugin {
	return o.Payload
}

func (o *UpdatePluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgPluginTypesPlugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdatePluginBadRequest creates a UpdatePluginBadRequest with default headers values
func NewUpdatePluginBadRequest() *UpdatePluginBadRequest {
	return &UpdatePluginBadRequest{}
}

/*
UpdatePluginBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdatePluginBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update plugin bad request response has a 2xx status code
func (o *UpdatePluginBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plugin bad request response has a 3xx status code
func (o *UpdatePluginBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plugin bad request response has a 4xx status code
func (o *UpdatePluginBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update plugin bad request response has a 5xx status code
func (o *UpdatePluginBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update plugin bad request response a status code equal to that given
func (o *UpdatePluginBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update plugin bad request response
func (o *UpdatePluginBadRequest) Code() int {
	return 400
}

func (o *UpdatePluginBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginBadRequest %s", 400, payload)
}

func (o *UpdatePluginBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginBadRequest %s", 400, payload)
}

func (o *UpdatePluginBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdatePluginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdatePluginNotFound creates a UpdatePluginNotFound with default headers values
func NewUpdatePluginNotFound() *UpdatePluginNotFound {
	return &UpdatePluginNotFound{}
}

/*
UpdatePluginNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePluginNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update plugin not found response has a 2xx status code
func (o *UpdatePluginNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plugin not found response has a 3xx status code
func (o *UpdatePluginNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plugin not found response has a 4xx status code
func (o *UpdatePluginNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update plugin not found response has a 5xx status code
func (o *UpdatePluginNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update plugin not found response a status code equal to that given
func (o *UpdatePluginNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update plugin not found response
func (o *UpdatePluginNotFound) Code() int {
	return 404
}

func (o *UpdatePluginNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginNotFound %s", 404, payload)
}

func (o *UpdatePluginNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginNotFound %s", 404, payload)
}

func (o *UpdatePluginNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdatePluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdatePluginInternalServerError creates a UpdatePluginInternalServerError with default headers values
func NewUpdatePluginInternalServerError() *UpdatePluginInternalServerError {
	return &UpdatePluginInternalServerError{}
}

/*
UpdatePluginInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdatePluginInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update plugin internal server error response has a 2xx status code
func (o *UpdatePluginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update plugin internal server error response has a 3xx status code
func (o *UpdatePluginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update plugin internal server error response has a 4xx status code
func (o *UpdatePluginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update plugin internal server error response has a 5xx status code
func (o *UpdatePluginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update plugin internal server error response a status code equal to that given
func (o *UpdatePluginInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update plugin internal server error response
func (o *UpdatePluginInternalServerError) Code() int {
	return 500
}

func (o *UpdatePluginInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginInternalServerError %s", 500, payload)
}

func (o *UpdatePluginInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /plugins/{name}][%d] updatePluginInternalServerError %s", 500, payload)
}

func (o *UpdatePluginInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdatePluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
