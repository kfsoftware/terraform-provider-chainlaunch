// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StopPluginReader is a Reader for the StopPlugin structure.
type StopPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStopPluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStopPluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopPluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugins/{name}/stop] stopPlugin", response, response.Code())
	}
}

// NewStopPluginOK creates a StopPluginOK with default headers values
func NewStopPluginOK() *StopPluginOK {
	return &StopPluginOK{}
}

/*
StopPluginOK describes a response with status code 200, with default header values.

OK
*/
type StopPluginOK struct {
}

// IsSuccess returns true when this stop plugin o k response has a 2xx status code
func (o *StopPluginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop plugin o k response has a 3xx status code
func (o *StopPluginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop plugin o k response has a 4xx status code
func (o *StopPluginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop plugin o k response has a 5xx status code
func (o *StopPluginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop plugin o k response a status code equal to that given
func (o *StopPluginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop plugin o k response
func (o *StopPluginOK) Code() int {
	return 200
}

func (o *StopPluginOK) Error() string {
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginOK", 200)
}

func (o *StopPluginOK) String() string {
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginOK", 200)
}

func (o *StopPluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopPluginNotFound creates a StopPluginNotFound with default headers values
func NewStopPluginNotFound() *StopPluginNotFound {
	return &StopPluginNotFound{}
}

/*
StopPluginNotFound describes a response with status code 404, with default header values.

Not Found
*/
type StopPluginNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this stop plugin not found response has a 2xx status code
func (o *StopPluginNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop plugin not found response has a 3xx status code
func (o *StopPluginNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop plugin not found response has a 4xx status code
func (o *StopPluginNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop plugin not found response has a 5xx status code
func (o *StopPluginNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop plugin not found response a status code equal to that given
func (o *StopPluginNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop plugin not found response
func (o *StopPluginNotFound) Code() int {
	return 404
}

func (o *StopPluginNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginNotFound %s", 404, payload)
}

func (o *StopPluginNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginNotFound %s", 404, payload)
}

func (o *StopPluginNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *StopPluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopPluginInternalServerError creates a StopPluginInternalServerError with default headers values
func NewStopPluginInternalServerError() *StopPluginInternalServerError {
	return &StopPluginInternalServerError{}
}

/*
StopPluginInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type StopPluginInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this stop plugin internal server error response has a 2xx status code
func (o *StopPluginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop plugin internal server error response has a 3xx status code
func (o *StopPluginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop plugin internal server error response has a 4xx status code
func (o *StopPluginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop plugin internal server error response has a 5xx status code
func (o *StopPluginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop plugin internal server error response a status code equal to that given
func (o *StopPluginInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop plugin internal server error response
func (o *StopPluginInternalServerError) Code() int {
	return 500
}

func (o *StopPluginInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginInternalServerError %s", 500, payload)
}

func (o *StopPluginInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /plugins/{name}/stop][%d] stopPluginInternalServerError %s", 500, payload)
}

func (o *StopPluginInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *StopPluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
