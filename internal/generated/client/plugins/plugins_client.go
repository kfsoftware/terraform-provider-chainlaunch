// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new plugins API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new plugins API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextEventStream sets the Accept header to "text/event-stream".
func WithAcceptTextEventStream(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/event-stream"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePlugin(params *CreatePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePluginCreated, error)

	DeletePlugin(params *DeletePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginNoContent, error)

	DeployPlugin(params *DeployPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployPluginOK, error)

	GetDeploymentStatus(params *GetDeploymentStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatusOK, error)

	GetDockerComposeServices(params *GetDockerComposeServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDockerComposeServicesOK, error)

	GetPlugin(params *GetPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginOK, error)

	GetPluginContainerLogs(params *GetPluginContainerLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginContainerLogsOK, error)

	GetPluginStatus(params *GetPluginStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginStatusOK, error)

	ListAvailablePlugins(params *ListAvailablePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailablePluginsOK, error)

	ListPlugins(params *ListPluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPluginsOK, error)

	RefreshAvailablePlugins(params *RefreshAvailablePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAvailablePluginsOK, error)

	ResumePlugin(params *ResumePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumePluginOK, error)

	StopPlugin(params *StopPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopPluginOK, error)

	UpdatePlugin(params *UpdatePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePluginOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePlugin creates a plugin

Create a new plugin
*/
func (a *Client) CreatePlugin(params *CreatePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePluginCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreatePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPlugin",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreatePluginCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePlugin deletes a plugin

Delete a plugin (will stop it first if running)
*/
func (a *Client) DeletePlugin(params *DeletePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeletePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePlugin",
		Method:             "DELETE",
		PathPattern:        "/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeletePluginNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeployPlugin deploys a plugin

Deploy a plugin with the given parameters
*/
func (a *Client) DeployPlugin(params *DeployPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeployPluginOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeployPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deployPlugin",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeployPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeployPluginOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deployPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentStatus gets detailed deployment status

Get detailed information about a plugin deployment including service status, logs, and metrics
*/
func (a *Client) GetDeploymentStatus(params *GetDeploymentStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeploymentStatusOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetDeploymentStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeploymentStatus",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/deployment-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeploymentStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetDeploymentStatusOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeploymentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerComposeServices gets docker compose services

Get all services defined in the plugin's docker-compose configuration
*/
func (a *Client) GetDockerComposeServices(params *GetDockerComposeServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDockerComposeServicesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetDockerComposeServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDockerComposeServices",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDockerComposeServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetDockerComposeServicesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDockerComposeServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlugin gets a plugin

Get a specific plugin by name
*/
func (a *Client) GetPlugin(params *GetPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlugin",
		Method:             "GET",
		PathPattern:        "/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetPluginOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginContainerLogs gets container logs

Get logs from a specific container in a plugin deployment. When follow=true, streams logs in real-time using Server-Sent Events. When follow=false, returns all logs directly as plain text.
*/
func (a *Client) GetPluginContainerLogs(params *GetPluginContainerLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginContainerLogsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetPluginContainerLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPluginContainerLogs",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/services/{service}/logs",
		ProducesMediaTypes: []string{"text/event-stream", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginContainerLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetPluginContainerLogsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginContainerLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginStatus gets plugin deployment status

Get the current status of a plugin deployment
*/
func (a *Client) GetPluginStatus(params *GetPluginStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginStatusOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetPluginStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPluginStatus",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetPluginStatusOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAvailablePlugins lists available plugins from git hub sources

Get a list of all available plugins from configured GitHub repositories
*/
func (a *Client) ListAvailablePlugins(params *ListAvailablePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAvailablePluginsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListAvailablePluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAvailablePlugins",
		Method:             "GET",
		PathPattern:        "/plugins/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAvailablePluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListAvailablePluginsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAvailablePlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPlugins lists all plugins

Get a list of all available plugins
*/
func (a *Client) ListPlugins(params *ListPluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListPluginsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListPluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPlugins",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListPluginsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshAvailablePlugins refreshes available plugins

Triggers a refresh of the available plugins cache from GitHub sources
*/
func (a *Client) RefreshAvailablePlugins(params *RefreshAvailablePluginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshAvailablePluginsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRefreshAvailablePluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshAvailablePlugins",
		Method:             "POST",
		PathPattern:        "/plugins/available/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RefreshAvailablePluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RefreshAvailablePluginsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshAvailablePlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumePlugin resumes a plugin deployment

Resume a previously deployed plugin
*/
func (a *Client) ResumePlugin(params *ResumePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumePluginOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewResumePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumePlugin",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ResumePluginOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumePlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPlugin stops a plugin deployment

Stop a running plugin deployment
*/
func (a *Client) StopPlugin(params *StopPluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopPluginOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewStopPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopPlugin",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopPluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*StopPluginOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePlugin updates a plugin

Update an existing plugin
*/
func (a *Client) UpdatePlugin(params *UpdatePluginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePluginOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdatePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePlugin",
		Method:             "PUT",
		PathPattern:        "/plugins/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdatePluginOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
