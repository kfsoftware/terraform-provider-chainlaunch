// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateNotificationProviderReader is a Reader for the UpdateNotificationProvider structure.
type UpdateNotificationProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNotificationProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNotificationProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateNotificationProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNotificationProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateNotificationProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /notifications/providers/{id}] updateNotificationProvider", response, response.Code())
	}
}

// NewUpdateNotificationProviderOK creates a UpdateNotificationProviderOK with default headers values
func NewUpdateNotificationProviderOK() *UpdateNotificationProviderOK {
	return &UpdateNotificationProviderOK{}
}

/*
UpdateNotificationProviderOK describes a response with status code 200, with default header values.

OK
*/
type UpdateNotificationProviderOK struct {
	Payload *models.HTTPProviderResponse
}

// IsSuccess returns true when this update notification provider o k response has a 2xx status code
func (o *UpdateNotificationProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update notification provider o k response has a 3xx status code
func (o *UpdateNotificationProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notification provider o k response has a 4xx status code
func (o *UpdateNotificationProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update notification provider o k response has a 5xx status code
func (o *UpdateNotificationProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update notification provider o k response a status code equal to that given
func (o *UpdateNotificationProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update notification provider o k response
func (o *UpdateNotificationProviderOK) Code() int {
	return 200
}

func (o *UpdateNotificationProviderOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderOK %s", 200, payload)
}

func (o *UpdateNotificationProviderOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderOK %s", 200, payload)
}

func (o *UpdateNotificationProviderOK) GetPayload() *models.HTTPProviderResponse {
	return o.Payload
}

func (o *UpdateNotificationProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNotificationProviderBadRequest creates a UpdateNotificationProviderBadRequest with default headers values
func NewUpdateNotificationProviderBadRequest() *UpdateNotificationProviderBadRequest {
	return &UpdateNotificationProviderBadRequest{}
}

/*
UpdateNotificationProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateNotificationProviderBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this update notification provider bad request response has a 2xx status code
func (o *UpdateNotificationProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notification provider bad request response has a 3xx status code
func (o *UpdateNotificationProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notification provider bad request response has a 4xx status code
func (o *UpdateNotificationProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update notification provider bad request response has a 5xx status code
func (o *UpdateNotificationProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update notification provider bad request response a status code equal to that given
func (o *UpdateNotificationProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update notification provider bad request response
func (o *UpdateNotificationProviderBadRequest) Code() int {
	return 400
}

func (o *UpdateNotificationProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderBadRequest %s", 400, payload)
}

func (o *UpdateNotificationProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderBadRequest %s", 400, payload)
}

func (o *UpdateNotificationProviderBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateNotificationProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNotificationProviderNotFound creates a UpdateNotificationProviderNotFound with default headers values
func NewUpdateNotificationProviderNotFound() *UpdateNotificationProviderNotFound {
	return &UpdateNotificationProviderNotFound{}
}

/*
UpdateNotificationProviderNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateNotificationProviderNotFound struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this update notification provider not found response has a 2xx status code
func (o *UpdateNotificationProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notification provider not found response has a 3xx status code
func (o *UpdateNotificationProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notification provider not found response has a 4xx status code
func (o *UpdateNotificationProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update notification provider not found response has a 5xx status code
func (o *UpdateNotificationProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update notification provider not found response a status code equal to that given
func (o *UpdateNotificationProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update notification provider not found response
func (o *UpdateNotificationProviderNotFound) Code() int {
	return 404
}

func (o *UpdateNotificationProviderNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderNotFound %s", 404, payload)
}

func (o *UpdateNotificationProviderNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderNotFound %s", 404, payload)
}

func (o *UpdateNotificationProviderNotFound) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateNotificationProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNotificationProviderInternalServerError creates a UpdateNotificationProviderInternalServerError with default headers values
func NewUpdateNotificationProviderInternalServerError() *UpdateNotificationProviderInternalServerError {
	return &UpdateNotificationProviderInternalServerError{}
}

/*
UpdateNotificationProviderInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateNotificationProviderInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this update notification provider internal server error response has a 2xx status code
func (o *UpdateNotificationProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update notification provider internal server error response has a 3xx status code
func (o *UpdateNotificationProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update notification provider internal server error response has a 4xx status code
func (o *UpdateNotificationProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update notification provider internal server error response has a 5xx status code
func (o *UpdateNotificationProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update notification provider internal server error response a status code equal to that given
func (o *UpdateNotificationProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update notification provider internal server error response
func (o *UpdateNotificationProviderInternalServerError) Code() int {
	return 500
}

func (o *UpdateNotificationProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderInternalServerError %s", 500, payload)
}

func (o *UpdateNotificationProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /notifications/providers/{id}][%d] updateNotificationProviderInternalServerError %s", 500, payload)
}

func (o *UpdateNotificationProviderInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *UpdateNotificationProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
