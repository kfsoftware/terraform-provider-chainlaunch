// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNotificationProviderReader is a Reader for the GetNotificationProvider structure.
type GetNotificationProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNotificationProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNotificationProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNotificationProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /notifications/providers/{id}] getNotificationProvider", response, response.Code())
	}
}

// NewGetNotificationProviderOK creates a GetNotificationProviderOK with default headers values
func NewGetNotificationProviderOK() *GetNotificationProviderOK {
	return &GetNotificationProviderOK{}
}

/*
GetNotificationProviderOK describes a response with status code 200, with default header values.

OK
*/
type GetNotificationProviderOK struct {
	Payload *models.HTTPProviderResponse
}

// IsSuccess returns true when this get notification provider o k response has a 2xx status code
func (o *GetNotificationProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get notification provider o k response has a 3xx status code
func (o *GetNotificationProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification provider o k response has a 4xx status code
func (o *GetNotificationProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification provider o k response has a 5xx status code
func (o *GetNotificationProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification provider o k response a status code equal to that given
func (o *GetNotificationProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get notification provider o k response
func (o *GetNotificationProviderOK) Code() int {
	return 200
}

func (o *GetNotificationProviderOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderOK %s", 200, payload)
}

func (o *GetNotificationProviderOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderOK %s", 200, payload)
}

func (o *GetNotificationProviderOK) GetPayload() *models.HTTPProviderResponse {
	return o.Payload
}

func (o *GetNotificationProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNotificationProviderBadRequest creates a GetNotificationProviderBadRequest with default headers values
func NewGetNotificationProviderBadRequest() *GetNotificationProviderBadRequest {
	return &GetNotificationProviderBadRequest{}
}

/*
GetNotificationProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNotificationProviderBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this get notification provider bad request response has a 2xx status code
func (o *GetNotificationProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification provider bad request response has a 3xx status code
func (o *GetNotificationProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification provider bad request response has a 4xx status code
func (o *GetNotificationProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification provider bad request response has a 5xx status code
func (o *GetNotificationProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification provider bad request response a status code equal to that given
func (o *GetNotificationProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get notification provider bad request response
func (o *GetNotificationProviderBadRequest) Code() int {
	return 400
}

func (o *GetNotificationProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderBadRequest %s", 400, payload)
}

func (o *GetNotificationProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderBadRequest %s", 400, payload)
}

func (o *GetNotificationProviderBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *GetNotificationProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNotificationProviderNotFound creates a GetNotificationProviderNotFound with default headers values
func NewGetNotificationProviderNotFound() *GetNotificationProviderNotFound {
	return &GetNotificationProviderNotFound{}
}

/*
GetNotificationProviderNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNotificationProviderNotFound struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this get notification provider not found response has a 2xx status code
func (o *GetNotificationProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification provider not found response has a 3xx status code
func (o *GetNotificationProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification provider not found response has a 4xx status code
func (o *GetNotificationProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get notification provider not found response has a 5xx status code
func (o *GetNotificationProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get notification provider not found response a status code equal to that given
func (o *GetNotificationProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get notification provider not found response
func (o *GetNotificationProviderNotFound) Code() int {
	return 404
}

func (o *GetNotificationProviderNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderNotFound %s", 404, payload)
}

func (o *GetNotificationProviderNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderNotFound %s", 404, payload)
}

func (o *GetNotificationProviderNotFound) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *GetNotificationProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNotificationProviderInternalServerError creates a GetNotificationProviderInternalServerError with default headers values
func NewGetNotificationProviderInternalServerError() *GetNotificationProviderInternalServerError {
	return &GetNotificationProviderInternalServerError{}
}

/*
GetNotificationProviderInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetNotificationProviderInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this get notification provider internal server error response has a 2xx status code
func (o *GetNotificationProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get notification provider internal server error response has a 3xx status code
func (o *GetNotificationProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get notification provider internal server error response has a 4xx status code
func (o *GetNotificationProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get notification provider internal server error response has a 5xx status code
func (o *GetNotificationProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get notification provider internal server error response a status code equal to that given
func (o *GetNotificationProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get notification provider internal server error response
func (o *GetNotificationProviderInternalServerError) Code() int {
	return 500
}

func (o *GetNotificationProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderInternalServerError %s", 500, payload)
}

func (o *GetNotificationProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /notifications/providers/{id}][%d] getNotificationProviderInternalServerError %s", 500, payload)
}

func (o *GetNotificationProviderInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *GetNotificationProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
