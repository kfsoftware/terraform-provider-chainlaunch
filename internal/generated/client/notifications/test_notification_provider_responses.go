// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// TestNotificationProviderReader is a Reader for the TestNotificationProvider structure.
type TestNotificationProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestNotificationProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewTestNotificationProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestNotificationProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTestNotificationProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /notifications/providers/{id}/test] testNotificationProvider", response, response.Code())
	}
}

// NewTestNotificationProviderOK creates a TestNotificationProviderOK with default headers values
func NewTestNotificationProviderOK() *TestNotificationProviderOK {
	return &TestNotificationProviderOK{}
}

/*
TestNotificationProviderOK describes a response with status code 200, with default header values.

OK
*/
type TestNotificationProviderOK struct {
	Payload *models.HTTPTestProviderResponse
}

// IsSuccess returns true when this test notification provider o k response has a 2xx status code
func (o *TestNotificationProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test notification provider o k response has a 3xx status code
func (o *TestNotificationProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification provider o k response has a 4xx status code
func (o *TestNotificationProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test notification provider o k response has a 5xx status code
func (o *TestNotificationProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification provider o k response a status code equal to that given
func (o *TestNotificationProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test notification provider o k response
func (o *TestNotificationProviderOK) Code() int {
	return 200
}

func (o *TestNotificationProviderOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderOK %s", 200, payload)
}

func (o *TestNotificationProviderOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderOK %s", 200, payload)
}

func (o *TestNotificationProviderOK) GetPayload() *models.HTTPTestProviderResponse {
	return o.Payload
}

func (o *TestNotificationProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPTestProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTestNotificationProviderBadRequest creates a TestNotificationProviderBadRequest with default headers values
func NewTestNotificationProviderBadRequest() *TestNotificationProviderBadRequest {
	return &TestNotificationProviderBadRequest{}
}

/*
TestNotificationProviderBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type TestNotificationProviderBadRequest struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this test notification provider bad request response has a 2xx status code
func (o *TestNotificationProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification provider bad request response has a 3xx status code
func (o *TestNotificationProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification provider bad request response has a 4xx status code
func (o *TestNotificationProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this test notification provider bad request response has a 5xx status code
func (o *TestNotificationProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this test notification provider bad request response a status code equal to that given
func (o *TestNotificationProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the test notification provider bad request response
func (o *TestNotificationProviderBadRequest) Code() int {
	return 400
}

func (o *TestNotificationProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderBadRequest %s", 400, payload)
}

func (o *TestNotificationProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderBadRequest %s", 400, payload)
}

func (o *TestNotificationProviderBadRequest) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *TestNotificationProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTestNotificationProviderInternalServerError creates a TestNotificationProviderInternalServerError with default headers values
func NewTestNotificationProviderInternalServerError() *TestNotificationProviderInternalServerError {
	return &TestNotificationProviderInternalServerError{}
}

/*
TestNotificationProviderInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type TestNotificationProviderInternalServerError struct {
	Payload *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse
}

// IsSuccess returns true when this test notification provider internal server error response has a 2xx status code
func (o *TestNotificationProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test notification provider internal server error response has a 3xx status code
func (o *TestNotificationProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test notification provider internal server error response has a 4xx status code
func (o *TestNotificationProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this test notification provider internal server error response has a 5xx status code
func (o *TestNotificationProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this test notification provider internal server error response a status code equal to that given
func (o *TestNotificationProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the test notification provider internal server error response
func (o *TestNotificationProviderInternalServerError) Code() int {
	return 500
}

func (o *TestNotificationProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderInternalServerError %s", 500, payload)
}

func (o *TestNotificationProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /notifications/providers/{id}/test][%d] testNotificationProviderInternalServerError %s", 500, payload)
}

func (o *TestNotificationProviderInternalServerError) GetPayload() *models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse {
	return o.Payload
}

func (o *TestNotificationProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubComChainlaunchChainlaunchPkgNotificationsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
