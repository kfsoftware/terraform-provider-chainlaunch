// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetJobLabelValuesReader is a Reader for the GetJobLabelValues structure.
type GetJobLabelValuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJobLabelValuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetJobLabelValuesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetJobLabelValuesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetJobLabelValuesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /metrics/job/{jobName}/label/{label}/values] getJobLabelValues", response, response.Code())
	}
}

// NewGetJobLabelValuesOK creates a GetJobLabelValuesOK with default headers values
func NewGetJobLabelValuesOK() *GetJobLabelValuesOK {
	return &GetJobLabelValuesOK{}
}

/*
GetJobLabelValuesOK describes a response with status code 200, with default header values.

Label values
*/
type GetJobLabelValuesOK struct {
	Payload *models.TypesLabelValuesResponse
}

// IsSuccess returns true when this get job label values o k response has a 2xx status code
func (o *GetJobLabelValuesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get job label values o k response has a 3xx status code
func (o *GetJobLabelValuesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job label values o k response has a 4xx status code
func (o *GetJobLabelValuesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get job label values o k response has a 5xx status code
func (o *GetJobLabelValuesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get job label values o k response a status code equal to that given
func (o *GetJobLabelValuesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get job label values o k response
func (o *GetJobLabelValuesOK) Code() int {
	return 200
}

func (o *GetJobLabelValuesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesOK %s", 200, payload)
}

func (o *GetJobLabelValuesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesOK %s", 200, payload)
}

func (o *GetJobLabelValuesOK) GetPayload() *models.TypesLabelValuesResponse {
	return o.Payload
}

func (o *GetJobLabelValuesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TypesLabelValuesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetJobLabelValuesBadRequest creates a GetJobLabelValuesBadRequest with default headers values
func NewGetJobLabelValuesBadRequest() *GetJobLabelValuesBadRequest {
	return &GetJobLabelValuesBadRequest{}
}

/*
GetJobLabelValuesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetJobLabelValuesBadRequest struct {
	Payload any
}

// IsSuccess returns true when this get job label values bad request response has a 2xx status code
func (o *GetJobLabelValuesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get job label values bad request response has a 3xx status code
func (o *GetJobLabelValuesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job label values bad request response has a 4xx status code
func (o *GetJobLabelValuesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get job label values bad request response has a 5xx status code
func (o *GetJobLabelValuesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get job label values bad request response a status code equal to that given
func (o *GetJobLabelValuesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get job label values bad request response
func (o *GetJobLabelValuesBadRequest) Code() int {
	return 400
}

func (o *GetJobLabelValuesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesBadRequest %s", 400, payload)
}

func (o *GetJobLabelValuesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesBadRequest %s", 400, payload)
}

func (o *GetJobLabelValuesBadRequest) GetPayload() any {
	return o.Payload
}

func (o *GetJobLabelValuesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetJobLabelValuesInternalServerError creates a GetJobLabelValuesInternalServerError with default headers values
func NewGetJobLabelValuesInternalServerError() *GetJobLabelValuesInternalServerError {
	return &GetJobLabelValuesInternalServerError{}
}

/*
GetJobLabelValuesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetJobLabelValuesInternalServerError struct {
	Payload any
}

// IsSuccess returns true when this get job label values internal server error response has a 2xx status code
func (o *GetJobLabelValuesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get job label values internal server error response has a 3xx status code
func (o *GetJobLabelValuesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job label values internal server error response has a 4xx status code
func (o *GetJobLabelValuesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get job label values internal server error response has a 5xx status code
func (o *GetJobLabelValuesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get job label values internal server error response a status code equal to that given
func (o *GetJobLabelValuesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get job label values internal server error response
func (o *GetJobLabelValuesInternalServerError) Code() int {
	return 500
}

func (o *GetJobLabelValuesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesInternalServerError %s", 500, payload)
}

func (o *GetJobLabelValuesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/label/{label}/values][%d] getJobLabelValuesInternalServerError %s", 500, payload)
}

func (o *GetJobLabelValuesInternalServerError) GetPayload() any {
	return o.Payload
}

func (o *GetJobLabelValuesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
