// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetConnectionMetricsReader is a Reader for the GetConnectionMetrics structure.
type GetConnectionMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConnectionMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /metrics/connection/{id}/metrics] getConnectionMetrics", response, response.Code())
	}
}

// NewGetConnectionMetricsOK creates a GetConnectionMetricsOK with default headers values
func NewGetConnectionMetricsOK() *GetConnectionMetricsOK {
	return &GetConnectionMetricsOK{}
}

/*
GetConnectionMetricsOK describes a response with status code 200, with default header values.

OK
*/
type GetConnectionMetricsOK struct {
	Payload any
}

// IsSuccess returns true when this get connection metrics o k response has a 2xx status code
func (o *GetConnectionMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get connection metrics o k response has a 3xx status code
func (o *GetConnectionMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection metrics o k response has a 4xx status code
func (o *GetConnectionMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection metrics o k response has a 5xx status code
func (o *GetConnectionMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection metrics o k response a status code equal to that given
func (o *GetConnectionMetricsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get connection metrics o k response
func (o *GetConnectionMetricsOK) Code() int {
	return 200
}

func (o *GetConnectionMetricsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsOK %s", 200, payload)
}

func (o *GetConnectionMetricsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsOK %s", 200, payload)
}

func (o *GetConnectionMetricsOK) GetPayload() any {
	return o.Payload
}

func (o *GetConnectionMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetConnectionMetricsBadRequest creates a GetConnectionMetricsBadRequest with default headers values
func NewGetConnectionMetricsBadRequest() *GetConnectionMetricsBadRequest {
	return &GetConnectionMetricsBadRequest{}
}

/*
GetConnectionMetricsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetConnectionMetricsBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get connection metrics bad request response has a 2xx status code
func (o *GetConnectionMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection metrics bad request response has a 3xx status code
func (o *GetConnectionMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection metrics bad request response has a 4xx status code
func (o *GetConnectionMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection metrics bad request response has a 5xx status code
func (o *GetConnectionMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection metrics bad request response a status code equal to that given
func (o *GetConnectionMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get connection metrics bad request response
func (o *GetConnectionMetricsBadRequest) Code() int {
	return 400
}

func (o *GetConnectionMetricsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsBadRequest %s", 400, payload)
}

func (o *GetConnectionMetricsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsBadRequest %s", 400, payload)
}

func (o *GetConnectionMetricsBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetConnectionMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetConnectionMetricsInternalServerError creates a GetConnectionMetricsInternalServerError with default headers values
func NewGetConnectionMetricsInternalServerError() *GetConnectionMetricsInternalServerError {
	return &GetConnectionMetricsInternalServerError{}
}

/*
GetConnectionMetricsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetConnectionMetricsInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get connection metrics internal server error response has a 2xx status code
func (o *GetConnectionMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection metrics internal server error response has a 3xx status code
func (o *GetConnectionMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection metrics internal server error response has a 4xx status code
func (o *GetConnectionMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection metrics internal server error response has a 5xx status code
func (o *GetConnectionMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get connection metrics internal server error response a status code equal to that given
func (o *GetConnectionMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get connection metrics internal server error response
func (o *GetConnectionMetricsInternalServerError) Code() int {
	return 500
}

func (o *GetConnectionMetricsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsInternalServerError %s", 500, payload)
}

func (o *GetConnectionMetricsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/connection/{id}/metrics][%d] getConnectionMetricsInternalServerError %s", 500, payload)
}

func (o *GetConnectionMetricsInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetConnectionMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
