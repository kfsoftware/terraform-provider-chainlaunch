// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNodeMetricsFilteredParams creates a new GetNodeMetricsFilteredParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNodeMetricsFilteredParams() *GetNodeMetricsFilteredParams {
	return &GetNodeMetricsFilteredParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodeMetricsFilteredParamsWithTimeout creates a new GetNodeMetricsFilteredParams object
// with the ability to set a timeout on a request.
func NewGetNodeMetricsFilteredParamsWithTimeout(timeout time.Duration) *GetNodeMetricsFilteredParams {
	return &GetNodeMetricsFilteredParams{
		timeout: timeout,
	}
}

// NewGetNodeMetricsFilteredParamsWithContext creates a new GetNodeMetricsFilteredParams object
// with the ability to set a context for a request.
func NewGetNodeMetricsFilteredParamsWithContext(ctx context.Context) *GetNodeMetricsFilteredParams {
	return &GetNodeMetricsFilteredParams{
		Context: ctx,
	}
}

// NewGetNodeMetricsFilteredParamsWithHTTPClient creates a new GetNodeMetricsFilteredParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNodeMetricsFilteredParamsWithHTTPClient(client *http.Client) *GetNodeMetricsFilteredParams {
	return &GetNodeMetricsFilteredParams{
		HTTPClient: client,
	}
}

/*
GetNodeMetricsFilteredParams contains all the parameters to send to the API endpoint

	for the get node metrics filtered operation.

	Typically these are written to a http.Request.
*/
type GetNodeMetricsFilteredParams struct {

	/* Filter.

	   Individual filters using filter[property][operator]=value format
	*/
	Filter []string

	/* Filters.

	   Comma-separated filters in format 'property:operator:value'
	*/
	Filters *string

	/* ID.

	   Node ID
	*/
	ID string

	/* Limit.

	   Limit number of results
	*/
	Limit *int64

	/* Offset.

	   Offset for pagination
	*/
	Offset *int64

	/* Query.

	   Base PromQL query
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get node metrics filtered params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeMetricsFilteredParams) WithDefaults() *GetNodeMetricsFilteredParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get node metrics filtered params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeMetricsFilteredParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithTimeout(timeout time.Duration) *GetNodeMetricsFilteredParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithContext(ctx context.Context) *GetNodeMetricsFilteredParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithHTTPClient(client *http.Client) *GetNodeMetricsFilteredParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithFilter(filter []string) *GetNodeMetricsFilteredParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetFilter(filter []string) {
	o.Filter = filter
}

// WithFilters adds the filters to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithFilters(filters *string) *GetNodeMetricsFilteredParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithID(id string) *GetNodeMetricsFilteredParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetID(id string) {
	o.ID = id
}

// WithLimit adds the limit to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithLimit(limit *int64) *GetNodeMetricsFilteredParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithOffset(offset *int64) *GetNodeMetricsFilteredParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQuery adds the query to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) WithQuery(query *string) *GetNodeMetricsFilteredParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get node metrics filtered params
func (o *GetNodeMetricsFilteredParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodeMetricsFilteredParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// binding items for filter
		joinedFilter := o.bindParamFilter(reg)

		// query array param filter
		if err := r.SetQueryParam("filter", joinedFilter...); err != nil {
			return err
		}
	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string

		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {

			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNodeMetricsFiltered binds the parameter filter
func (o *GetNodeMetricsFilteredParams) bindParamFilter(formats strfmt.Registry) []string {
	filterIR := o.Filter

	var filterIC []string
	for _, filterIIR := range filterIR { // explode []string

		filterIIV := filterIIR // string as string
		filterIC = append(filterIC, filterIIV)
	}

	// items.CollectionFormat: "multi"
	filterIS := swag.JoinByFormat(filterIC, "multi")

	return filterIS
}
