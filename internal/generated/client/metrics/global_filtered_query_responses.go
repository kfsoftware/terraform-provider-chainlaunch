// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GlobalFilteredQueryReader is a Reader for the GlobalFilteredQuery structure.
type GlobalFilteredQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GlobalFilteredQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGlobalFilteredQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGlobalFilteredQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGlobalFilteredQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /metrics/query/filtered] globalFilteredQuery", response, response.Code())
	}
}

// NewGlobalFilteredQueryOK creates a GlobalFilteredQueryOK with default headers values
func NewGlobalFilteredQueryOK() *GlobalFilteredQueryOK {
	return &GlobalFilteredQueryOK{}
}

/*
GlobalFilteredQueryOK describes a response with status code 200, with default header values.

OK
*/
type GlobalFilteredQueryOK struct {
	Payload *models.TypesFilteredMetricsResponse
}

// IsSuccess returns true when this global filtered query o k response has a 2xx status code
func (o *GlobalFilteredQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this global filtered query o k response has a 3xx status code
func (o *GlobalFilteredQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global filtered query o k response has a 4xx status code
func (o *GlobalFilteredQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this global filtered query o k response has a 5xx status code
func (o *GlobalFilteredQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this global filtered query o k response a status code equal to that given
func (o *GlobalFilteredQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the global filtered query o k response
func (o *GlobalFilteredQueryOK) Code() int {
	return 200
}

func (o *GlobalFilteredQueryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryOK %s", 200, payload)
}

func (o *GlobalFilteredQueryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryOK %s", 200, payload)
}

func (o *GlobalFilteredQueryOK) GetPayload() *models.TypesFilteredMetricsResponse {
	return o.Payload
}

func (o *GlobalFilteredQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TypesFilteredMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGlobalFilteredQueryBadRequest creates a GlobalFilteredQueryBadRequest with default headers values
func NewGlobalFilteredQueryBadRequest() *GlobalFilteredQueryBadRequest {
	return &GlobalFilteredQueryBadRequest{}
}

/*
GlobalFilteredQueryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GlobalFilteredQueryBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this global filtered query bad request response has a 2xx status code
func (o *GlobalFilteredQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global filtered query bad request response has a 3xx status code
func (o *GlobalFilteredQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global filtered query bad request response has a 4xx status code
func (o *GlobalFilteredQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this global filtered query bad request response has a 5xx status code
func (o *GlobalFilteredQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this global filtered query bad request response a status code equal to that given
func (o *GlobalFilteredQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the global filtered query bad request response
func (o *GlobalFilteredQueryBadRequest) Code() int {
	return 400
}

func (o *GlobalFilteredQueryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryBadRequest %s", 400, payload)
}

func (o *GlobalFilteredQueryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryBadRequest %s", 400, payload)
}

func (o *GlobalFilteredQueryBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GlobalFilteredQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGlobalFilteredQueryInternalServerError creates a GlobalFilteredQueryInternalServerError with default headers values
func NewGlobalFilteredQueryInternalServerError() *GlobalFilteredQueryInternalServerError {
	return &GlobalFilteredQueryInternalServerError{}
}

/*
GlobalFilteredQueryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GlobalFilteredQueryInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this global filtered query internal server error response has a 2xx status code
func (o *GlobalFilteredQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this global filtered query internal server error response has a 3xx status code
func (o *GlobalFilteredQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this global filtered query internal server error response has a 4xx status code
func (o *GlobalFilteredQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this global filtered query internal server error response has a 5xx status code
func (o *GlobalFilteredQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this global filtered query internal server error response a status code equal to that given
func (o *GlobalFilteredQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the global filtered query internal server error response
func (o *GlobalFilteredQueryInternalServerError) Code() int {
	return 500
}

func (o *GlobalFilteredQueryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryInternalServerError %s", 500, payload)
}

func (o *GlobalFilteredQueryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /metrics/query/filtered][%d] globalFilteredQueryInternalServerError %s", 500, payload)
}

func (o *GlobalFilteredQueryInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GlobalFilteredQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
