// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CheckPortAvailabilityReader is a Reader for the CheckPortAvailability structure.
type CheckPortAvailabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckPortAvailabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewCheckPortAvailabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckPortAvailabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /metrics/port/{port}/check] checkPortAvailability", response, response.Code())
	}
}

// NewCheckPortAvailabilityOK creates a CheckPortAvailabilityOK with default headers values
func NewCheckPortAvailabilityOK() *CheckPortAvailabilityOK {
	return &CheckPortAvailabilityOK{}
}

/*
CheckPortAvailabilityOK describes a response with status code 200, with default header values.

OK
*/
type CheckPortAvailabilityOK struct {
	Payload map[string]bool
}

// IsSuccess returns true when this check port availability o k response has a 2xx status code
func (o *CheckPortAvailabilityOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check port availability o k response has a 3xx status code
func (o *CheckPortAvailabilityOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check port availability o k response has a 4xx status code
func (o *CheckPortAvailabilityOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check port availability o k response has a 5xx status code
func (o *CheckPortAvailabilityOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check port availability o k response a status code equal to that given
func (o *CheckPortAvailabilityOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check port availability o k response
func (o *CheckPortAvailabilityOK) Code() int {
	return 200
}

func (o *CheckPortAvailabilityOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/port/{port}/check][%d] checkPortAvailabilityOK %s", 200, payload)
}

func (o *CheckPortAvailabilityOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/port/{port}/check][%d] checkPortAvailabilityOK %s", 200, payload)
}

func (o *CheckPortAvailabilityOK) GetPayload() map[string]bool {
	return o.Payload
}

func (o *CheckPortAvailabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCheckPortAvailabilityBadRequest creates a CheckPortAvailabilityBadRequest with default headers values
func NewCheckPortAvailabilityBadRequest() *CheckPortAvailabilityBadRequest {
	return &CheckPortAvailabilityBadRequest{}
}

/*
CheckPortAvailabilityBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CheckPortAvailabilityBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this check port availability bad request response has a 2xx status code
func (o *CheckPortAvailabilityBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check port availability bad request response has a 3xx status code
func (o *CheckPortAvailabilityBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check port availability bad request response has a 4xx status code
func (o *CheckPortAvailabilityBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this check port availability bad request response has a 5xx status code
func (o *CheckPortAvailabilityBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this check port availability bad request response a status code equal to that given
func (o *CheckPortAvailabilityBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the check port availability bad request response
func (o *CheckPortAvailabilityBadRequest) Code() int {
	return 400
}

func (o *CheckPortAvailabilityBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/port/{port}/check][%d] checkPortAvailabilityBadRequest %s", 400, payload)
}

func (o *CheckPortAvailabilityBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/port/{port}/check][%d] checkPortAvailabilityBadRequest %s", 400, payload)
}

func (o *CheckPortAvailabilityBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *CheckPortAvailabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
