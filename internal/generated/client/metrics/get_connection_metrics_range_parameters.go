// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConnectionMetricsRangeParams creates a new GetConnectionMetricsRangeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConnectionMetricsRangeParams() *GetConnectionMetricsRangeParams {
	return &GetConnectionMetricsRangeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConnectionMetricsRangeParamsWithTimeout creates a new GetConnectionMetricsRangeParams object
// with the ability to set a timeout on a request.
func NewGetConnectionMetricsRangeParamsWithTimeout(timeout time.Duration) *GetConnectionMetricsRangeParams {
	return &GetConnectionMetricsRangeParams{
		timeout: timeout,
	}
}

// NewGetConnectionMetricsRangeParamsWithContext creates a new GetConnectionMetricsRangeParams object
// with the ability to set a context for a request.
func NewGetConnectionMetricsRangeParamsWithContext(ctx context.Context) *GetConnectionMetricsRangeParams {
	return &GetConnectionMetricsRangeParams{
		Context: ctx,
	}
}

// NewGetConnectionMetricsRangeParamsWithHTTPClient creates a new GetConnectionMetricsRangeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConnectionMetricsRangeParamsWithHTTPClient(client *http.Client) *GetConnectionMetricsRangeParams {
	return &GetConnectionMetricsRangeParams{
		HTTPClient: client,
	}
}

/*
GetConnectionMetricsRangeParams contains all the parameters to send to the API endpoint

	for the get connection metrics range operation.

	Typically these are written to a http.Request.
*/
type GetConnectionMetricsRangeParams struct {

	/* End.

	   End time (RFC3339 format)
	*/
	End string

	/* ID.

	   Connection ID
	*/
	ID string

	/* Query.

	   PromQL query
	*/
	Query string

	/* Start.

	   Start time (RFC3339 format)
	*/
	Start string

	/* Step.

	   Step duration (e.g. 1m, 5m, 1h)
	*/
	Step string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get connection metrics range params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConnectionMetricsRangeParams) WithDefaults() *GetConnectionMetricsRangeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get connection metrics range params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConnectionMetricsRangeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithTimeout(timeout time.Duration) *GetConnectionMetricsRangeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithContext(ctx context.Context) *GetConnectionMetricsRangeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithHTTPClient(client *http.Client) *GetConnectionMetricsRangeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnd adds the end to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithEnd(end string) *GetConnectionMetricsRangeParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetEnd(end string) {
	o.End = end
}

// WithID adds the id to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithID(id string) *GetConnectionMetricsRangeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetID(id string) {
	o.ID = id
}

// WithQuery adds the query to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithQuery(query string) *GetConnectionMetricsRangeParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetQuery(query string) {
	o.Query = query
}

// WithStart adds the start to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithStart(start string) *GetConnectionMetricsRangeParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetStart(start string) {
	o.Start = start
}

// WithStep adds the step to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) WithStep(step string) *GetConnectionMetricsRangeParams {
	o.SetStep(step)
	return o
}

// SetStep adds the step to the get connection metrics range params
func (o *GetConnectionMetricsRangeParams) SetStep(step string) {
	o.Step = step
}

// WriteToRequest writes these params to a swagger request
func (o *GetConnectionMetricsRangeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param end
	qrEnd := o.End
	qEnd := qrEnd
	if qEnd != "" {

		if err := r.SetQueryParam("end", qEnd); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {

		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	// query param start
	qrStart := o.Start
	qStart := qrStart
	if qStart != "" {

		if err := r.SetQueryParam("start", qStart); err != nil {
			return err
		}
	}

	// query param step
	qrStep := o.Step
	qStep := qrStep
	if qStep != "" {

		if err := r.SetQueryParam("step", qStep); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
