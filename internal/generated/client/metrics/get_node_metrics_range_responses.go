// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodeMetricsRangeReader is a Reader for the GetNodeMetricsRange structure.
type GetNodeMetricsRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeMetricsRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeMetricsRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodeMetricsRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodeMetricsRangeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /metrics/node/{id}/range] getNodeMetricsRange", response, response.Code())
	}
}

// NewGetNodeMetricsRangeOK creates a GetNodeMetricsRangeOK with default headers values
func NewGetNodeMetricsRangeOK() *GetNodeMetricsRangeOK {
	return &GetNodeMetricsRangeOK{}
}

/*
GetNodeMetricsRangeOK describes a response with status code 200, with default header values.

Metrics data
*/
type GetNodeMetricsRangeOK struct {
	Payload *models.TypesMetricsDataResponse
}

// IsSuccess returns true when this get node metrics range o k response has a 2xx status code
func (o *GetNodeMetricsRangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get node metrics range o k response has a 3xx status code
func (o *GetNodeMetricsRangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node metrics range o k response has a 4xx status code
func (o *GetNodeMetricsRangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get node metrics range o k response has a 5xx status code
func (o *GetNodeMetricsRangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get node metrics range o k response a status code equal to that given
func (o *GetNodeMetricsRangeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get node metrics range o k response
func (o *GetNodeMetricsRangeOK) Code() int {
	return 200
}

func (o *GetNodeMetricsRangeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeOK %s", 200, payload)
}

func (o *GetNodeMetricsRangeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeOK %s", 200, payload)
}

func (o *GetNodeMetricsRangeOK) GetPayload() *models.TypesMetricsDataResponse {
	return o.Payload
}

func (o *GetNodeMetricsRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TypesMetricsDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodeMetricsRangeBadRequest creates a GetNodeMetricsRangeBadRequest with default headers values
func NewGetNodeMetricsRangeBadRequest() *GetNodeMetricsRangeBadRequest {
	return &GetNodeMetricsRangeBadRequest{}
}

/*
GetNodeMetricsRangeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetNodeMetricsRangeBadRequest struct {
	Payload any
}

// IsSuccess returns true when this get node metrics range bad request response has a 2xx status code
func (o *GetNodeMetricsRangeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get node metrics range bad request response has a 3xx status code
func (o *GetNodeMetricsRangeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node metrics range bad request response has a 4xx status code
func (o *GetNodeMetricsRangeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get node metrics range bad request response has a 5xx status code
func (o *GetNodeMetricsRangeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get node metrics range bad request response a status code equal to that given
func (o *GetNodeMetricsRangeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get node metrics range bad request response
func (o *GetNodeMetricsRangeBadRequest) Code() int {
	return 400
}

func (o *GetNodeMetricsRangeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeBadRequest %s", 400, payload)
}

func (o *GetNodeMetricsRangeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeBadRequest %s", 400, payload)
}

func (o *GetNodeMetricsRangeBadRequest) GetPayload() any {
	return o.Payload
}

func (o *GetNodeMetricsRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodeMetricsRangeInternalServerError creates a GetNodeMetricsRangeInternalServerError with default headers values
func NewGetNodeMetricsRangeInternalServerError() *GetNodeMetricsRangeInternalServerError {
	return &GetNodeMetricsRangeInternalServerError{}
}

/*
GetNodeMetricsRangeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodeMetricsRangeInternalServerError struct {
	Payload any
}

// IsSuccess returns true when this get node metrics range internal server error response has a 2xx status code
func (o *GetNodeMetricsRangeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get node metrics range internal server error response has a 3xx status code
func (o *GetNodeMetricsRangeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node metrics range internal server error response has a 4xx status code
func (o *GetNodeMetricsRangeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get node metrics range internal server error response has a 5xx status code
func (o *GetNodeMetricsRangeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get node metrics range internal server error response a status code equal to that given
func (o *GetNodeMetricsRangeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get node metrics range internal server error response
func (o *GetNodeMetricsRangeInternalServerError) Code() int {
	return 500
}

func (o *GetNodeMetricsRangeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeInternalServerError %s", 500, payload)
}

func (o *GetNodeMetricsRangeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/node/{id}/range][%d] getNodeMetricsRangeInternalServerError %s", 500, payload)
}

func (o *GetNodeMetricsRangeInternalServerError) GetPayload() any {
	return o.Payload
}

func (o *GetNodeMetricsRangeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
