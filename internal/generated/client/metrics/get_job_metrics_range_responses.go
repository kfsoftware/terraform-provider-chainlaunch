// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetJobMetricsRangeReader is a Reader for the GetJobMetricsRange structure.
type GetJobMetricsRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJobMetricsRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetJobMetricsRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetJobMetricsRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetJobMetricsRangeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /metrics/job/{jobName}/range] getJobMetricsRange", response, response.Code())
	}
}

// NewGetJobMetricsRangeOK creates a GetJobMetricsRangeOK with default headers values
func NewGetJobMetricsRangeOK() *GetJobMetricsRangeOK {
	return &GetJobMetricsRangeOK{}
}

/*
GetJobMetricsRangeOK describes a response with status code 200, with default header values.

Metrics data
*/
type GetJobMetricsRangeOK struct {
	Payload *models.TypesMetricsDataResponse
}

// IsSuccess returns true when this get job metrics range o k response has a 2xx status code
func (o *GetJobMetricsRangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get job metrics range o k response has a 3xx status code
func (o *GetJobMetricsRangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job metrics range o k response has a 4xx status code
func (o *GetJobMetricsRangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get job metrics range o k response has a 5xx status code
func (o *GetJobMetricsRangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get job metrics range o k response a status code equal to that given
func (o *GetJobMetricsRangeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get job metrics range o k response
func (o *GetJobMetricsRangeOK) Code() int {
	return 200
}

func (o *GetJobMetricsRangeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeOK %s", 200, payload)
}

func (o *GetJobMetricsRangeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeOK %s", 200, payload)
}

func (o *GetJobMetricsRangeOK) GetPayload() *models.TypesMetricsDataResponse {
	return o.Payload
}

func (o *GetJobMetricsRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TypesMetricsDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetJobMetricsRangeBadRequest creates a GetJobMetricsRangeBadRequest with default headers values
func NewGetJobMetricsRangeBadRequest() *GetJobMetricsRangeBadRequest {
	return &GetJobMetricsRangeBadRequest{}
}

/*
GetJobMetricsRangeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetJobMetricsRangeBadRequest struct {
	Payload any
}

// IsSuccess returns true when this get job metrics range bad request response has a 2xx status code
func (o *GetJobMetricsRangeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get job metrics range bad request response has a 3xx status code
func (o *GetJobMetricsRangeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job metrics range bad request response has a 4xx status code
func (o *GetJobMetricsRangeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get job metrics range bad request response has a 5xx status code
func (o *GetJobMetricsRangeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get job metrics range bad request response a status code equal to that given
func (o *GetJobMetricsRangeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get job metrics range bad request response
func (o *GetJobMetricsRangeBadRequest) Code() int {
	return 400
}

func (o *GetJobMetricsRangeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeBadRequest %s", 400, payload)
}

func (o *GetJobMetricsRangeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeBadRequest %s", 400, payload)
}

func (o *GetJobMetricsRangeBadRequest) GetPayload() any {
	return o.Payload
}

func (o *GetJobMetricsRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetJobMetricsRangeInternalServerError creates a GetJobMetricsRangeInternalServerError with default headers values
func NewGetJobMetricsRangeInternalServerError() *GetJobMetricsRangeInternalServerError {
	return &GetJobMetricsRangeInternalServerError{}
}

/*
GetJobMetricsRangeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetJobMetricsRangeInternalServerError struct {
	Payload any
}

// IsSuccess returns true when this get job metrics range internal server error response has a 2xx status code
func (o *GetJobMetricsRangeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get job metrics range internal server error response has a 3xx status code
func (o *GetJobMetricsRangeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get job metrics range internal server error response has a 4xx status code
func (o *GetJobMetricsRangeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get job metrics range internal server error response has a 5xx status code
func (o *GetJobMetricsRangeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get job metrics range internal server error response a status code equal to that given
func (o *GetJobMetricsRangeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get job metrics range internal server error response
func (o *GetJobMetricsRangeInternalServerError) Code() int {
	return 500
}

func (o *GetJobMetricsRangeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeInternalServerError %s", 500, payload)
}

func (o *GetJobMetricsRangeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /metrics/job/{jobName}/range][%d] getJobMetricsRangeInternalServerError %s", 500, payload)
}

func (o *GetJobMetricsRangeInternalServerError) GetPayload() any {
	return o.Payload
}

func (o *GetJobMetricsRangeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
