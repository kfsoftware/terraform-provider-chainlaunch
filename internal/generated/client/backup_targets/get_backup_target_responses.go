// Code generated by go-swagger; DO NOT EDIT.

package backup_targets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetBackupTargetReader is a Reader for the GetBackupTarget structure.
type GetBackupTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBackupTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetBackupTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBackupTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBackupTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBackupTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /backups/targets/{id}] getBackupTarget", response, response.Code())
	}
}

// NewGetBackupTargetOK creates a GetBackupTargetOK with default headers values
func NewGetBackupTargetOK() *GetBackupTargetOK {
	return &GetBackupTargetOK{}
}

/*
GetBackupTargetOK describes a response with status code 200, with default header values.

OK
*/
type GetBackupTargetOK struct {
	Payload *models.HTTPBackupTargetResponse
}

// IsSuccess returns true when this get backup target o k response has a 2xx status code
func (o *GetBackupTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get backup target o k response has a 3xx status code
func (o *GetBackupTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup target o k response has a 4xx status code
func (o *GetBackupTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get backup target o k response has a 5xx status code
func (o *GetBackupTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup target o k response a status code equal to that given
func (o *GetBackupTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get backup target o k response
func (o *GetBackupTargetOK) Code() int {
	return 200
}

func (o *GetBackupTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetOK %s", 200, payload)
}

func (o *GetBackupTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetOK %s", 200, payload)
}

func (o *GetBackupTargetOK) GetPayload() *models.HTTPBackupTargetResponse {
	return o.Payload
}

func (o *GetBackupTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPBackupTargetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBackupTargetBadRequest creates a GetBackupTargetBadRequest with default headers values
func NewGetBackupTargetBadRequest() *GetBackupTargetBadRequest {
	return &GetBackupTargetBadRequest{}
}

/*
GetBackupTargetBadRequest describes a response with status code 400, with default header values.

Invalid ID format
*/
type GetBackupTargetBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this get backup target bad request response has a 2xx status code
func (o *GetBackupTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backup target bad request response has a 3xx status code
func (o *GetBackupTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup target bad request response has a 4xx status code
func (o *GetBackupTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backup target bad request response has a 5xx status code
func (o *GetBackupTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup target bad request response a status code equal to that given
func (o *GetBackupTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get backup target bad request response
func (o *GetBackupTargetBadRequest) Code() int {
	return 400
}

func (o *GetBackupTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetBadRequest %s", 400, payload)
}

func (o *GetBackupTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetBadRequest %s", 400, payload)
}

func (o *GetBackupTargetBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *GetBackupTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBackupTargetNotFound creates a GetBackupTargetNotFound with default headers values
func NewGetBackupTargetNotFound() *GetBackupTargetNotFound {
	return &GetBackupTargetNotFound{}
}

/*
GetBackupTargetNotFound describes a response with status code 404, with default header values.

Target not found
*/
type GetBackupTargetNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this get backup target not found response has a 2xx status code
func (o *GetBackupTargetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backup target not found response has a 3xx status code
func (o *GetBackupTargetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup target not found response has a 4xx status code
func (o *GetBackupTargetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get backup target not found response has a 5xx status code
func (o *GetBackupTargetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get backup target not found response a status code equal to that given
func (o *GetBackupTargetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get backup target not found response
func (o *GetBackupTargetNotFound) Code() int {
	return 404
}

func (o *GetBackupTargetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetNotFound %s", 404, payload)
}

func (o *GetBackupTargetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetNotFound %s", 404, payload)
}

func (o *GetBackupTargetNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *GetBackupTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetBackupTargetInternalServerError creates a GetBackupTargetInternalServerError with default headers values
func NewGetBackupTargetInternalServerError() *GetBackupTargetInternalServerError {
	return &GetBackupTargetInternalServerError{}
}

/*
GetBackupTargetInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetBackupTargetInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this get backup target internal server error response has a 2xx status code
func (o *GetBackupTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get backup target internal server error response has a 3xx status code
func (o *GetBackupTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get backup target internal server error response has a 4xx status code
func (o *GetBackupTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get backup target internal server error response has a 5xx status code
func (o *GetBackupTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get backup target internal server error response a status code equal to that given
func (o *GetBackupTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get backup target internal server error response
func (o *GetBackupTargetInternalServerError) Code() int {
	return 500
}

func (o *GetBackupTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetInternalServerError %s", 500, payload)
}

func (o *GetBackupTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /backups/targets/{id}][%d] getBackupTargetInternalServerError %s", 500, payload)
}

func (o *GetBackupTargetInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *GetBackupTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
