// Code generated by go-swagger; DO NOT EDIT.

package backup_targets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup targets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backup targets API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backup targets API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backup targets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBackupTarget(params *CreateBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupTargetCreated, error)

	DeleteBackupTarget(params *DeleteBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupTargetNoContent, error)

	GetBackupTarget(params *GetBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupTargetOK, error)

	ListBackupTargets(params *ListBackupTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupTargetsOK, error)

	UpdateBackupTarget(params *UpdateBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupTargetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBackupTarget creates a new backup target

Create a new backup target with the specified configuration
*/
func (a *Client) CreateBackupTarget(params *CreateBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupTargetCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateBackupTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBackupTarget",
		Method:             "POST",
		PathPattern:        "/backups/targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBackupTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateBackupTargetCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBackupTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBackupTarget deletes a backup target

Delete a backup target and all associated backups
*/
func (a *Client) DeleteBackupTarget(params *DeleteBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupTargetNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteBackupTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackupTarget",
		Method:             "DELETE",
		PathPattern:        "/backups/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBackupTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteBackupTargetNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBackupTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupTarget gets a backup target by ID

Get detailed information about a specific backup target
*/
func (a *Client) GetBackupTarget(params *GetBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupTargetOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBackupTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackupTarget",
		Method:             "GET",
		PathPattern:        "/backups/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBackupTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBackupTargetOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackupTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBackupTargets lists all backup targets

Get a list of all backup targets
*/
func (a *Client) ListBackupTargets(params *ListBackupTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupTargetsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListBackupTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBackupTargets",
		Method:             "GET",
		PathPattern:        "/backups/targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBackupTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListBackupTargetsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBackupTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBackupTarget updates a backup target

Update an existing backup target with new configuration
*/
func (a *Client) UpdateBackupTarget(params *UpdateBackupTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupTargetOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateBackupTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBackupTarget",
		Method:             "PUT",
		PathPattern:        "/backups/targets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateBackupTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateBackupTargetOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBackupTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
