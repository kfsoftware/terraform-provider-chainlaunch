// Code generated by go-swagger; DO NOT EDIT.

package backup_targets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateBackupTargetReader is a Reader for the UpdateBackupTarget structure.
type UpdateBackupTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBackupTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBackupTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBackupTargetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBackupTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBackupTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /backups/targets/{id}] updateBackupTarget", response, response.Code())
	}
}

// NewUpdateBackupTargetOK creates a UpdateBackupTargetOK with default headers values
func NewUpdateBackupTargetOK() *UpdateBackupTargetOK {
	return &UpdateBackupTargetOK{}
}

/*
UpdateBackupTargetOK describes a response with status code 200, with default header values.

OK
*/
type UpdateBackupTargetOK struct {
	Payload *models.HTTPBackupTargetResponse
}

// IsSuccess returns true when this update backup target o k response has a 2xx status code
func (o *UpdateBackupTargetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update backup target o k response has a 3xx status code
func (o *UpdateBackupTargetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup target o k response has a 4xx status code
func (o *UpdateBackupTargetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update backup target o k response has a 5xx status code
func (o *UpdateBackupTargetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup target o k response a status code equal to that given
func (o *UpdateBackupTargetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update backup target o k response
func (o *UpdateBackupTargetOK) Code() int {
	return 200
}

func (o *UpdateBackupTargetOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetOK %s", 200, payload)
}

func (o *UpdateBackupTargetOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetOK %s", 200, payload)
}

func (o *UpdateBackupTargetOK) GetPayload() *models.HTTPBackupTargetResponse {
	return o.Payload
}

func (o *UpdateBackupTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPBackupTargetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupTargetBadRequest creates a UpdateBackupTargetBadRequest with default headers values
func NewUpdateBackupTargetBadRequest() *UpdateBackupTargetBadRequest {
	return &UpdateBackupTargetBadRequest{}
}

/*
UpdateBackupTargetBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type UpdateBackupTargetBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup target bad request response has a 2xx status code
func (o *UpdateBackupTargetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup target bad request response has a 3xx status code
func (o *UpdateBackupTargetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup target bad request response has a 4xx status code
func (o *UpdateBackupTargetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update backup target bad request response has a 5xx status code
func (o *UpdateBackupTargetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup target bad request response a status code equal to that given
func (o *UpdateBackupTargetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update backup target bad request response
func (o *UpdateBackupTargetBadRequest) Code() int {
	return 400
}

func (o *UpdateBackupTargetBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetBadRequest %s", 400, payload)
}

func (o *UpdateBackupTargetBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetBadRequest %s", 400, payload)
}

func (o *UpdateBackupTargetBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupTargetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupTargetNotFound creates a UpdateBackupTargetNotFound with default headers values
func NewUpdateBackupTargetNotFound() *UpdateBackupTargetNotFound {
	return &UpdateBackupTargetNotFound{}
}

/*
UpdateBackupTargetNotFound describes a response with status code 404, with default header values.

Target not found
*/
type UpdateBackupTargetNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup target not found response has a 2xx status code
func (o *UpdateBackupTargetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup target not found response has a 3xx status code
func (o *UpdateBackupTargetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup target not found response has a 4xx status code
func (o *UpdateBackupTargetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update backup target not found response has a 5xx status code
func (o *UpdateBackupTargetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup target not found response a status code equal to that given
func (o *UpdateBackupTargetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update backup target not found response
func (o *UpdateBackupTargetNotFound) Code() int {
	return 404
}

func (o *UpdateBackupTargetNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetNotFound %s", 404, payload)
}

func (o *UpdateBackupTargetNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetNotFound %s", 404, payload)
}

func (o *UpdateBackupTargetNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupTargetInternalServerError creates a UpdateBackupTargetInternalServerError with default headers values
func NewUpdateBackupTargetInternalServerError() *UpdateBackupTargetInternalServerError {
	return &UpdateBackupTargetInternalServerError{}
}

/*
UpdateBackupTargetInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateBackupTargetInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup target internal server error response has a 2xx status code
func (o *UpdateBackupTargetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup target internal server error response has a 3xx status code
func (o *UpdateBackupTargetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup target internal server error response has a 4xx status code
func (o *UpdateBackupTargetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update backup target internal server error response has a 5xx status code
func (o *UpdateBackupTargetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update backup target internal server error response a status code equal to that given
func (o *UpdateBackupTargetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update backup target internal server error response
func (o *UpdateBackupTargetInternalServerError) Code() int {
	return 500
}

func (o *UpdateBackupTargetInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetInternalServerError %s", 500, payload)
}

func (o *UpdateBackupTargetInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/targets/{id}][%d] updateBackupTargetInternalServerError %s", 500, payload)
}

func (o *UpdateBackupTargetInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
