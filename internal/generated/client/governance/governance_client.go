// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new governance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new governance API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new governance API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for governance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGovernanceProposal(params *CreateGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGovernanceProposalOK, error)

	DeleteGovernanceSignature(params *DeleteGovernanceSignatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGovernanceSignatureOK, error)

	GetGovernanceProposal(params *GetGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGovernanceProposalOK, error)

	ListGovernanceEvents(params *ListGovernanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceEventsOK, error)

	ListGovernanceProposals(params *ListGovernanceProposalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceProposalsOK, error)

	ListGovernanceSignatures(params *ListGovernanceSignaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceSignaturesOK, error)

	ReceiveGovernanceMessage(params *ReceiveGovernanceMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReceiveGovernanceMessageOK, error)

	ShareGovernanceProposal(params *ShareGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareGovernanceProposalOK, error)

	ShareGovernanceSignature(params *ShareGovernanceSignatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareGovernanceSignatureOK, error)

	SignGovernanceProposal(params *SignGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignGovernanceProposalOK, error)

	SubmitGovernanceProposal(params *SubmitGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitGovernanceProposalOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateGovernanceProposal creates a new governance proposal

Create a new governance proposal for a Fabric network
*/
func (a *Client) CreateGovernanceProposal(params *CreateGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGovernanceProposalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateGovernanceProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGovernanceProposal",
		Method:             "POST",
		PathPattern:        "/pro/networks/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGovernanceProposalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateGovernanceProposalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGovernanceProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGovernanceSignature deletes a signature from a proposal

Delete a specific signature by its ID
*/
func (a *Client) DeleteGovernanceSignature(params *DeleteGovernanceSignatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGovernanceSignatureOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteGovernanceSignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGovernanceSignature",
		Method:             "DELETE",
		PathPattern:        "/pro/networks/proposals/{proposalId}/signatures/{signatureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGovernanceSignatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteGovernanceSignatureOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGovernanceSignature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGovernanceProposal gets a governance proposal

Get details of a specific config update proposal
*/
func (a *Client) GetGovernanceProposal(params *GetGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGovernanceProposalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetGovernanceProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGovernanceProposal",
		Method:             "GET",
		PathPattern:        "/pro/networks/proposals/{proposalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGovernanceProposalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetGovernanceProposalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGovernanceProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGovernanceEvents lists events for a proposal

Get a list of events for a specific config update proposal
*/
func (a *Client) ListGovernanceEvents(params *ListGovernanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceEventsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListGovernanceEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGovernanceEvents",
		Method:             "GET",
		PathPattern:        "/pro/networks/proposals/{proposalId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGovernanceEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListGovernanceEventsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGovernanceEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGovernanceProposals lists governance proposals

List all config update proposals, optionally filtered by network_id
*/
func (a *Client) ListGovernanceProposals(params *ListGovernanceProposalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceProposalsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListGovernanceProposalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGovernanceProposals",
		Method:             "GET",
		PathPattern:        "/pro/networks/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGovernanceProposalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListGovernanceProposalsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGovernanceProposals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGovernanceSignatures lists signatures for a proposal

Get a list of signatures for a specific config update proposal
*/
func (a *Client) ListGovernanceSignatures(params *ListGovernanceSignaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGovernanceSignaturesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListGovernanceSignaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGovernanceSignatures",
		Method:             "GET",
		PathPattern:        "/pro/networks/proposals/{proposalId}/signatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGovernanceSignaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListGovernanceSignaturesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGovernanceSignatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiveGovernanceMessage receives governance message

Handles all incoming governance messages and routes by SubType
*/
func (a *Client) ReceiveGovernanceMessage(params *ReceiveGovernanceMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReceiveGovernanceMessageOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewReceiveGovernanceMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "receiveGovernanceMessage",
		Method:             "POST",
		PathPattern:        "/pro/receive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReceiveGovernanceMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ReceiveGovernanceMessageOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for receiveGovernanceMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShareGovernanceProposal shares a proposal with a connection

Share a config update proposal with a connected node
*/
func (a *Client) ShareGovernanceProposal(params *ShareGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareGovernanceProposalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewShareGovernanceProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shareGovernanceProposal",
		Method:             "POST",
		PathPattern:        "/pro/networks/proposals/{proposalId}/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShareGovernanceProposalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ShareGovernanceProposalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shareGovernanceProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShareGovernanceSignature shares a signature with a connection

Share a signature with a specific connection
*/
func (a *Client) ShareGovernanceSignature(params *ShareGovernanceSignatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShareGovernanceSignatureOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewShareGovernanceSignatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shareGovernanceSignature",
		Method:             "POST",
		PathPattern:        "/pro/networks/proposals/{proposalId}/signatures/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShareGovernanceSignatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ShareGovernanceSignatureOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shareGovernanceSignature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignGovernanceProposal signs a config update proposal

Sign a config update proposal with the specified organization's credentials
*/
func (a *Client) SignGovernanceProposal(params *SignGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SignGovernanceProposalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSignGovernanceProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signGovernanceProposal",
		Method:             "POST",
		PathPattern:        "/pro/networks/proposals/{proposalId}/sign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SignGovernanceProposalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SignGovernanceProposalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for signGovernanceProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitGovernanceProposal submits config update proposal

Submit a signed config update proposal for execution
*/
func (a *Client) SubmitGovernanceProposal(params *SubmitGovernanceProposalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SubmitGovernanceProposalOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSubmitGovernanceProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitGovernanceProposal",
		Method:             "POST",
		PathPattern:        "/pro/networks/proposals/{proposalId}/submit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubmitGovernanceProposalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SubmitGovernanceProposalOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitGovernanceProposal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
