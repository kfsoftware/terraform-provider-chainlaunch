// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ShareGovernanceSignatureReader is a Reader for the ShareGovernanceSignature structure.
type ShareGovernanceSignatureReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShareGovernanceSignatureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewShareGovernanceSignatureOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewShareGovernanceSignatureBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewShareGovernanceSignatureInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/networks/proposals/{proposalId}/signatures/share] shareGovernanceSignature", response, response.Code())
	}
}

// NewShareGovernanceSignatureOK creates a ShareGovernanceSignatureOK with default headers values
func NewShareGovernanceSignatureOK() *ShareGovernanceSignatureOK {
	return &ShareGovernanceSignatureOK{}
}

/*
ShareGovernanceSignatureOK describes a response with status code 200, with default header values.

OK
*/
type ShareGovernanceSignatureOK struct {
	Payload map[string]bool
}

// IsSuccess returns true when this share governance signature o k response has a 2xx status code
func (o *ShareGovernanceSignatureOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this share governance signature o k response has a 3xx status code
func (o *ShareGovernanceSignatureOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share governance signature o k response has a 4xx status code
func (o *ShareGovernanceSignatureOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this share governance signature o k response has a 5xx status code
func (o *ShareGovernanceSignatureOK) IsServerError() bool {
	return false
}

// IsCode returns true when this share governance signature o k response a status code equal to that given
func (o *ShareGovernanceSignatureOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the share governance signature o k response
func (o *ShareGovernanceSignatureOK) Code() int {
	return 200
}

func (o *ShareGovernanceSignatureOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureOK %s", 200, payload)
}

func (o *ShareGovernanceSignatureOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureOK %s", 200, payload)
}

func (o *ShareGovernanceSignatureOK) GetPayload() map[string]bool {
	return o.Payload
}

func (o *ShareGovernanceSignatureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareGovernanceSignatureBadRequest creates a ShareGovernanceSignatureBadRequest with default headers values
func NewShareGovernanceSignatureBadRequest() *ShareGovernanceSignatureBadRequest {
	return &ShareGovernanceSignatureBadRequest{}
}

/*
ShareGovernanceSignatureBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ShareGovernanceSignatureBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share governance signature bad request response has a 2xx status code
func (o *ShareGovernanceSignatureBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share governance signature bad request response has a 3xx status code
func (o *ShareGovernanceSignatureBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share governance signature bad request response has a 4xx status code
func (o *ShareGovernanceSignatureBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this share governance signature bad request response has a 5xx status code
func (o *ShareGovernanceSignatureBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this share governance signature bad request response a status code equal to that given
func (o *ShareGovernanceSignatureBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the share governance signature bad request response
func (o *ShareGovernanceSignatureBadRequest) Code() int {
	return 400
}

func (o *ShareGovernanceSignatureBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureBadRequest %s", 400, payload)
}

func (o *ShareGovernanceSignatureBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureBadRequest %s", 400, payload)
}

func (o *ShareGovernanceSignatureBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareGovernanceSignatureBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareGovernanceSignatureInternalServerError creates a ShareGovernanceSignatureInternalServerError with default headers values
func NewShareGovernanceSignatureInternalServerError() *ShareGovernanceSignatureInternalServerError {
	return &ShareGovernanceSignatureInternalServerError{}
}

/*
ShareGovernanceSignatureInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ShareGovernanceSignatureInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share governance signature internal server error response has a 2xx status code
func (o *ShareGovernanceSignatureInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share governance signature internal server error response has a 3xx status code
func (o *ShareGovernanceSignatureInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share governance signature internal server error response has a 4xx status code
func (o *ShareGovernanceSignatureInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this share governance signature internal server error response has a 5xx status code
func (o *ShareGovernanceSignatureInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this share governance signature internal server error response a status code equal to that given
func (o *ShareGovernanceSignatureInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the share governance signature internal server error response
func (o *ShareGovernanceSignatureInternalServerError) Code() int {
	return 500
}

func (o *ShareGovernanceSignatureInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureInternalServerError %s", 500, payload)
}

func (o *ShareGovernanceSignatureInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/signatures/share][%d] shareGovernanceSignatureInternalServerError %s", 500, payload)
}

func (o *ShareGovernanceSignatureInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareGovernanceSignatureInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
