// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// NewReceiveGovernanceMessageParams creates a new ReceiveGovernanceMessageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReceiveGovernanceMessageParams() *ReceiveGovernanceMessageParams {
	return &ReceiveGovernanceMessageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReceiveGovernanceMessageParamsWithTimeout creates a new ReceiveGovernanceMessageParams object
// with the ability to set a timeout on a request.
func NewReceiveGovernanceMessageParamsWithTimeout(timeout time.Duration) *ReceiveGovernanceMessageParams {
	return &ReceiveGovernanceMessageParams{
		timeout: timeout,
	}
}

// NewReceiveGovernanceMessageParamsWithContext creates a new ReceiveGovernanceMessageParams object
// with the ability to set a context for a request.
func NewReceiveGovernanceMessageParamsWithContext(ctx context.Context) *ReceiveGovernanceMessageParams {
	return &ReceiveGovernanceMessageParams{
		Context: ctx,
	}
}

// NewReceiveGovernanceMessageParamsWithHTTPClient creates a new ReceiveGovernanceMessageParams object
// with the ability to set a custom HTTPClient for a request.
func NewReceiveGovernanceMessageParamsWithHTTPClient(client *http.Client) *ReceiveGovernanceMessageParams {
	return &ReceiveGovernanceMessageParams{
		HTTPClient: client,
	}
}

/*
ReceiveGovernanceMessageParams contains all the parameters to send to the API endpoint

	for the receive governance message operation.

	Typically these are written to a http.Request.
*/
type ReceiveGovernanceMessageParams struct {

	/* XNodeSignature.

	   Node Signature
	*/
	XNodeSignature string

	/* Message.

	   Governance Message Envelope
	*/
	Message *models.CommunicationMessage

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the receive governance message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReceiveGovernanceMessageParams) WithDefaults() *ReceiveGovernanceMessageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the receive governance message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReceiveGovernanceMessageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the receive governance message params
func (o *ReceiveGovernanceMessageParams) WithTimeout(timeout time.Duration) *ReceiveGovernanceMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the receive governance message params
func (o *ReceiveGovernanceMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the receive governance message params
func (o *ReceiveGovernanceMessageParams) WithContext(ctx context.Context) *ReceiveGovernanceMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the receive governance message params
func (o *ReceiveGovernanceMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the receive governance message params
func (o *ReceiveGovernanceMessageParams) WithHTTPClient(client *http.Client) *ReceiveGovernanceMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the receive governance message params
func (o *ReceiveGovernanceMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXNodeSignature adds the xNodeSignature to the receive governance message params
func (o *ReceiveGovernanceMessageParams) WithXNodeSignature(xNodeSignature string) *ReceiveGovernanceMessageParams {
	o.SetXNodeSignature(xNodeSignature)
	return o
}

// SetXNodeSignature adds the xNodeSignature to the receive governance message params
func (o *ReceiveGovernanceMessageParams) SetXNodeSignature(xNodeSignature string) {
	o.XNodeSignature = xNodeSignature
}

// WithMessage adds the message to the receive governance message params
func (o *ReceiveGovernanceMessageParams) WithMessage(message *models.CommunicationMessage) *ReceiveGovernanceMessageParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the receive governance message params
func (o *ReceiveGovernanceMessageParams) SetMessage(message *models.CommunicationMessage) {
	o.Message = message
}

// WriteToRequest writes these params to a swagger request
func (o *ReceiveGovernanceMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Node-Signature
	if err := r.SetHeaderParam("X-Node-Signature", o.XNodeSignature); err != nil {
		return err
	}
	if o.Message != nil {
		if err := r.SetBodyParam(o.Message); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
