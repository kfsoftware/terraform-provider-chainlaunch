// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// SignGovernanceProposalReader is a Reader for the SignGovernanceProposal structure.
type SignGovernanceProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignGovernanceProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewSignGovernanceProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSignGovernanceProposalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSignGovernanceProposalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/networks/proposals/{proposalId}/sign] signGovernanceProposal", response, response.Code())
	}
}

// NewSignGovernanceProposalOK creates a SignGovernanceProposalOK with default headers values
func NewSignGovernanceProposalOK() *SignGovernanceProposalOK {
	return &SignGovernanceProposalOK{}
}

/*
SignGovernanceProposalOK describes a response with status code 200, with default header values.

OK
*/
type SignGovernanceProposalOK struct {
	Payload *models.ProSignConfigUpdateResponse
}

// IsSuccess returns true when this sign governance proposal o k response has a 2xx status code
func (o *SignGovernanceProposalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sign governance proposal o k response has a 3xx status code
func (o *SignGovernanceProposalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign governance proposal o k response has a 4xx status code
func (o *SignGovernanceProposalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign governance proposal o k response has a 5xx status code
func (o *SignGovernanceProposalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sign governance proposal o k response a status code equal to that given
func (o *SignGovernanceProposalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sign governance proposal o k response
func (o *SignGovernanceProposalOK) Code() int {
	return 200
}

func (o *SignGovernanceProposalOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalOK %s", 200, payload)
}

func (o *SignGovernanceProposalOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalOK %s", 200, payload)
}

func (o *SignGovernanceProposalOK) GetPayload() *models.ProSignConfigUpdateResponse {
	return o.Payload
}

func (o *SignGovernanceProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProSignConfigUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSignGovernanceProposalBadRequest creates a SignGovernanceProposalBadRequest with default headers values
func NewSignGovernanceProposalBadRequest() *SignGovernanceProposalBadRequest {
	return &SignGovernanceProposalBadRequest{}
}

/*
SignGovernanceProposalBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SignGovernanceProposalBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this sign governance proposal bad request response has a 2xx status code
func (o *SignGovernanceProposalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign governance proposal bad request response has a 3xx status code
func (o *SignGovernanceProposalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign governance proposal bad request response has a 4xx status code
func (o *SignGovernanceProposalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sign governance proposal bad request response has a 5xx status code
func (o *SignGovernanceProposalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sign governance proposal bad request response a status code equal to that given
func (o *SignGovernanceProposalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sign governance proposal bad request response
func (o *SignGovernanceProposalBadRequest) Code() int {
	return 400
}

func (o *SignGovernanceProposalBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalBadRequest %s", 400, payload)
}

func (o *SignGovernanceProposalBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalBadRequest %s", 400, payload)
}

func (o *SignGovernanceProposalBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *SignGovernanceProposalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewSignGovernanceProposalInternalServerError creates a SignGovernanceProposalInternalServerError with default headers values
func NewSignGovernanceProposalInternalServerError() *SignGovernanceProposalInternalServerError {
	return &SignGovernanceProposalInternalServerError{}
}

/*
SignGovernanceProposalInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SignGovernanceProposalInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this sign governance proposal internal server error response has a 2xx status code
func (o *SignGovernanceProposalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sign governance proposal internal server error response has a 3xx status code
func (o *SignGovernanceProposalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sign governance proposal internal server error response has a 4xx status code
func (o *SignGovernanceProposalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sign governance proposal internal server error response has a 5xx status code
func (o *SignGovernanceProposalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sign governance proposal internal server error response a status code equal to that given
func (o *SignGovernanceProposalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sign governance proposal internal server error response
func (o *SignGovernanceProposalInternalServerError) Code() int {
	return 500
}

func (o *SignGovernanceProposalInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalInternalServerError %s", 500, payload)
}

func (o *SignGovernanceProposalInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/networks/proposals/{proposalId}/sign][%d] signGovernanceProposalInternalServerError %s", 500, payload)
}

func (o *SignGovernanceProposalInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *SignGovernanceProposalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
