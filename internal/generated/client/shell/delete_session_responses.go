// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DeleteSessionReader is a Reader for the DeleteSession structure.
type DeleteSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}] deleteSession", response, response.Code())
	}
}

// NewDeleteSessionOK creates a DeleteSessionOK with default headers values
func NewDeleteSessionOK() *DeleteSessionOK {
	return &DeleteSessionOK{}
}

/*
DeleteSessionOK describes a response with status code 200, with default header values.

Termination confirmation
*/
type DeleteSessionOK struct {
	Payload any
}

// IsSuccess returns true when this delete session o k response has a 2xx status code
func (o *DeleteSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete session o k response has a 3xx status code
func (o *DeleteSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session o k response has a 4xx status code
func (o *DeleteSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete session o k response has a 5xx status code
func (o *DeleteSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session o k response a status code equal to that given
func (o *DeleteSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete session o k response
func (o *DeleteSessionOK) Code() int {
	return 200
}

func (o *DeleteSessionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionOK %s", 200, payload)
}

func (o *DeleteSessionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionOK %s", 200, payload)
}

func (o *DeleteSessionOK) GetPayload() any {
	return o.Payload
}

func (o *DeleteSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteSessionBadRequest creates a DeleteSessionBadRequest with default headers values
func NewDeleteSessionBadRequest() *DeleteSessionBadRequest {
	return &DeleteSessionBadRequest{}
}

/*
DeleteSessionBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type DeleteSessionBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete session bad request response has a 2xx status code
func (o *DeleteSessionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session bad request response has a 3xx status code
func (o *DeleteSessionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session bad request response has a 4xx status code
func (o *DeleteSessionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session bad request response has a 5xx status code
func (o *DeleteSessionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session bad request response a status code equal to that given
func (o *DeleteSessionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete session bad request response
func (o *DeleteSessionBadRequest) Code() int {
	return 400
}

func (o *DeleteSessionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionBadRequest %s", 400, payload)
}

func (o *DeleteSessionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionBadRequest %s", 400, payload)
}

func (o *DeleteSessionBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteSessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteSessionNotFound creates a DeleteSessionNotFound with default headers values
func NewDeleteSessionNotFound() *DeleteSessionNotFound {
	return &DeleteSessionNotFound{}
}

/*
DeleteSessionNotFound describes a response with status code 404, with default header values.

Session not found
*/
type DeleteSessionNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete session not found response has a 2xx status code
func (o *DeleteSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session not found response has a 3xx status code
func (o *DeleteSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session not found response has a 4xx status code
func (o *DeleteSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session not found response has a 5xx status code
func (o *DeleteSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session not found response a status code equal to that given
func (o *DeleteSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete session not found response
func (o *DeleteSessionNotFound) Code() int {
	return 404
}

func (o *DeleteSessionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionNotFound %s", 404, payload)
}

func (o *DeleteSessionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionNotFound %s", 404, payload)
}

func (o *DeleteSessionNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteSessionInternalServerError creates a DeleteSessionInternalServerError with default headers values
func NewDeleteSessionInternalServerError() *DeleteSessionInternalServerError {
	return &DeleteSessionInternalServerError{}
}

/*
DeleteSessionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteSessionInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this delete session internal server error response has a 2xx status code
func (o *DeleteSessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session internal server error response has a 3xx status code
func (o *DeleteSessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session internal server error response has a 4xx status code
func (o *DeleteSessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete session internal server error response has a 5xx status code
func (o *DeleteSessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete session internal server error response a status code equal to that given
func (o *DeleteSessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete session internal server error response
func (o *DeleteSessionInternalServerError) Code() int {
	return 500
}

func (o *DeleteSessionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionInternalServerError %s", 500, payload)
}

func (o *DeleteSessionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /chaincode-projects/{id}/shell/sessions/{sessionID}][%d] deleteSessionInternalServerError %s", 500, payload)
}

func (o *DeleteSessionInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *DeleteSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
