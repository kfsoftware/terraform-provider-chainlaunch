// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// HandleWebSocketReader is a Reader for the HandleWebSocket structure.
type HandleWebSocketReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleWebSocketReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 101:
		result := NewHandleWebSocketSwitchingProtocols()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewHandleWebSocketBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHandleWebSocketInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /chaincode-projects/{id}/shell/ws] handleWebSocket", response, response.Code())
	}
}

// NewHandleWebSocketSwitchingProtocols creates a HandleWebSocketSwitchingProtocols with default headers values
func NewHandleWebSocketSwitchingProtocols() *HandleWebSocketSwitchingProtocols {
	return &HandleWebSocketSwitchingProtocols{}
}

/*
HandleWebSocketSwitchingProtocols describes a response with status code 101, with default header values.

WebSocket connection established
*/
type HandleWebSocketSwitchingProtocols struct {
}

// IsSuccess returns true when this handle web socket switching protocols response has a 2xx status code
func (o *HandleWebSocketSwitchingProtocols) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle web socket switching protocols response has a 3xx status code
func (o *HandleWebSocketSwitchingProtocols) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle web socket switching protocols response has a 4xx status code
func (o *HandleWebSocketSwitchingProtocols) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle web socket switching protocols response has a 5xx status code
func (o *HandleWebSocketSwitchingProtocols) IsServerError() bool {
	return false
}

// IsCode returns true when this handle web socket switching protocols response a status code equal to that given
func (o *HandleWebSocketSwitchingProtocols) IsCode(code int) bool {
	return code == 101
}

// Code gets the status code for the handle web socket switching protocols response
func (o *HandleWebSocketSwitchingProtocols) Code() int {
	return 101
}

func (o *HandleWebSocketSwitchingProtocols) Error() string {
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketSwitchingProtocols", 101)
}

func (o *HandleWebSocketSwitchingProtocols) String() string {
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketSwitchingProtocols", 101)
}

func (o *HandleWebSocketSwitchingProtocols) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandleWebSocketBadRequest creates a HandleWebSocketBadRequest with default headers values
func NewHandleWebSocketBadRequest() *HandleWebSocketBadRequest {
	return &HandleWebSocketBadRequest{}
}

/*
HandleWebSocketBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type HandleWebSocketBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this handle web socket bad request response has a 2xx status code
func (o *HandleWebSocketBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle web socket bad request response has a 3xx status code
func (o *HandleWebSocketBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle web socket bad request response has a 4xx status code
func (o *HandleWebSocketBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle web socket bad request response has a 5xx status code
func (o *HandleWebSocketBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this handle web socket bad request response a status code equal to that given
func (o *HandleWebSocketBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the handle web socket bad request response
func (o *HandleWebSocketBadRequest) Code() int {
	return 400
}

func (o *HandleWebSocketBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketBadRequest %s", 400, payload)
}

func (o *HandleWebSocketBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketBadRequest %s", 400, payload)
}

func (o *HandleWebSocketBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *HandleWebSocketBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewHandleWebSocketInternalServerError creates a HandleWebSocketInternalServerError with default headers values
func NewHandleWebSocketInternalServerError() *HandleWebSocketInternalServerError {
	return &HandleWebSocketInternalServerError{}
}

/*
HandleWebSocketInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type HandleWebSocketInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this handle web socket internal server error response has a 2xx status code
func (o *HandleWebSocketInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle web socket internal server error response has a 3xx status code
func (o *HandleWebSocketInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle web socket internal server error response has a 4xx status code
func (o *HandleWebSocketInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle web socket internal server error response has a 5xx status code
func (o *HandleWebSocketInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this handle web socket internal server error response a status code equal to that given
func (o *HandleWebSocketInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the handle web socket internal server error response
func (o *HandleWebSocketInternalServerError) Code() int {
	return 500
}

func (o *HandleWebSocketInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketInternalServerError %s", 500, payload)
}

func (o *HandleWebSocketInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /chaincode-projects/{id}/shell/ws][%d] handleWebSocketInternalServerError %s", 500, payload)
}

func (o *HandleWebSocketInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *HandleWebSocketInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
