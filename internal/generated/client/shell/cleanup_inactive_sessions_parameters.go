// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCleanupInactiveSessionsParams creates a new CleanupInactiveSessionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCleanupInactiveSessionsParams() *CleanupInactiveSessionsParams {
	return &CleanupInactiveSessionsParams{
		requestTimeout: cr.DefaultTimeout,
	}
}

// NewCleanupInactiveSessionsParamsWithTimeout creates a new CleanupInactiveSessionsParams object
// with the ability to set a timeout on a request.
func NewCleanupInactiveSessionsParamsWithTimeout(timeout time.Duration) *CleanupInactiveSessionsParams {
	return &CleanupInactiveSessionsParams{
		requestTimeout: timeout,
	}
}

// NewCleanupInactiveSessionsParamsWithContext creates a new CleanupInactiveSessionsParams object
// with the ability to set a context for a request.
func NewCleanupInactiveSessionsParamsWithContext(ctx context.Context) *CleanupInactiveSessionsParams {
	return &CleanupInactiveSessionsParams{
		Context: ctx,
	}
}

// NewCleanupInactiveSessionsParamsWithHTTPClient creates a new CleanupInactiveSessionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCleanupInactiveSessionsParamsWithHTTPClient(client *http.Client) *CleanupInactiveSessionsParams {
	return &CleanupInactiveSessionsParams{
		HTTPClient: client,
	}
}

/*
CleanupInactiveSessionsParams contains all the parameters to send to the API endpoint

	for the cleanup inactive sessions operation.

	Typically these are written to a http.Request.
*/
type CleanupInactiveSessionsParams struct {

	/* ID.

	   Project ID
	*/
	ID int64

	/* Timeout.

	   Timeout in minutes for inactive sessions (default 30)
	*/
	Timeout *int64

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithDefaults hydrates default values in the cleanup inactive sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CleanupInactiveSessionsParams) WithDefaults() *CleanupInactiveSessionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cleanup inactive sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CleanupInactiveSessionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithRequestTimeout adds the timeout to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) WithRequestTimeout(timeout time.Duration) *CleanupInactiveSessionsParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) WithContext(ctx context.Context) *CleanupInactiveSessionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) WithHTTPClient(client *http.Client) *CleanupInactiveSessionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) WithID(id int64) *CleanupInactiveSessionsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) SetID(id int64) {
	o.ID = id
}

// WithTimeout adds the timeout to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) WithTimeout(timeout *int64) *CleanupInactiveSessionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cleanup inactive sessions params
func (o *CleanupInactiveSessionsParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *CleanupInactiveSessionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64

		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {

			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
