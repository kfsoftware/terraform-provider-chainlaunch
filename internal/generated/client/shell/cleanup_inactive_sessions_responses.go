// Code generated by go-swagger; DO NOT EDIT.

package shell

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// CleanupInactiveSessionsReader is a Reader for the CleanupInactiveSessions structure.
type CleanupInactiveSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CleanupInactiveSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewCleanupInactiveSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCleanupInactiveSessionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCleanupInactiveSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /chaincode-projects/{id}/shell/cleanup] cleanupInactiveSessions", response, response.Code())
	}
}

// NewCleanupInactiveSessionsOK creates a CleanupInactiveSessionsOK with default headers values
func NewCleanupInactiveSessionsOK() *CleanupInactiveSessionsOK {
	return &CleanupInactiveSessionsOK{}
}

/*
CleanupInactiveSessionsOK describes a response with status code 200, with default header values.

Cleanup results
*/
type CleanupInactiveSessionsOK struct {
	Payload any
}

// IsSuccess returns true when this cleanup inactive sessions o k response has a 2xx status code
func (o *CleanupInactiveSessionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cleanup inactive sessions o k response has a 3xx status code
func (o *CleanupInactiveSessionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cleanup inactive sessions o k response has a 4xx status code
func (o *CleanupInactiveSessionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cleanup inactive sessions o k response has a 5xx status code
func (o *CleanupInactiveSessionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cleanup inactive sessions o k response a status code equal to that given
func (o *CleanupInactiveSessionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cleanup inactive sessions o k response
func (o *CleanupInactiveSessionsOK) Code() int {
	return 200
}

func (o *CleanupInactiveSessionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsOK %s", 200, payload)
}

func (o *CleanupInactiveSessionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsOK %s", 200, payload)
}

func (o *CleanupInactiveSessionsOK) GetPayload() any {
	return o.Payload
}

func (o *CleanupInactiveSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCleanupInactiveSessionsBadRequest creates a CleanupInactiveSessionsBadRequest with default headers values
func NewCleanupInactiveSessionsBadRequest() *CleanupInactiveSessionsBadRequest {
	return &CleanupInactiveSessionsBadRequest{}
}

/*
CleanupInactiveSessionsBadRequest describes a response with status code 400, with default header values.

Bad request - invalid timeout value
*/
type CleanupInactiveSessionsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this cleanup inactive sessions bad request response has a 2xx status code
func (o *CleanupInactiveSessionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cleanup inactive sessions bad request response has a 3xx status code
func (o *CleanupInactiveSessionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cleanup inactive sessions bad request response has a 4xx status code
func (o *CleanupInactiveSessionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cleanup inactive sessions bad request response has a 5xx status code
func (o *CleanupInactiveSessionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cleanup inactive sessions bad request response a status code equal to that given
func (o *CleanupInactiveSessionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cleanup inactive sessions bad request response
func (o *CleanupInactiveSessionsBadRequest) Code() int {
	return 400
}

func (o *CleanupInactiveSessionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsBadRequest %s", 400, payload)
}

func (o *CleanupInactiveSessionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsBadRequest %s", 400, payload)
}

func (o *CleanupInactiveSessionsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *CleanupInactiveSessionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCleanupInactiveSessionsInternalServerError creates a CleanupInactiveSessionsInternalServerError with default headers values
func NewCleanupInactiveSessionsInternalServerError() *CleanupInactiveSessionsInternalServerError {
	return &CleanupInactiveSessionsInternalServerError{}
}

/*
CleanupInactiveSessionsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CleanupInactiveSessionsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this cleanup inactive sessions internal server error response has a 2xx status code
func (o *CleanupInactiveSessionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cleanup inactive sessions internal server error response has a 3xx status code
func (o *CleanupInactiveSessionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cleanup inactive sessions internal server error response has a 4xx status code
func (o *CleanupInactiveSessionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cleanup inactive sessions internal server error response has a 5xx status code
func (o *CleanupInactiveSessionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cleanup inactive sessions internal server error response a status code equal to that given
func (o *CleanupInactiveSessionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cleanup inactive sessions internal server error response
func (o *CleanupInactiveSessionsInternalServerError) Code() int {
	return 500
}

func (o *CleanupInactiveSessionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsInternalServerError %s", 500, payload)
}

func (o *CleanupInactiveSessionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /chaincode-projects/{id}/shell/cleanup][%d] cleanupInactiveSessionsInternalServerError %s", 500, payload)
}

func (o *CleanupInactiveSessionsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *CleanupInactiveSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
