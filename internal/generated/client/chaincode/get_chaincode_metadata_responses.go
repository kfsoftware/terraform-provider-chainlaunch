// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetChaincodeMetadataReader is a Reader for the GetChaincodeMetadata structure.
type GetChaincodeMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChaincodeMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetChaincodeMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetChaincodeMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetChaincodeMetadataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata] getChaincodeMetadata", response, response.Code())
	}
}

// NewGetChaincodeMetadataOK creates a GetChaincodeMetadataOK with default headers values
func NewGetChaincodeMetadataOK() *GetChaincodeMetadataOK {
	return &GetChaincodeMetadataOK{}
}

/*
GetChaincodeMetadataOK describes a response with status code 200, with default header values.

OK
*/
type GetChaincodeMetadataOK struct {
	Payload *models.ChainlaunchdeployChaincodeMetadataResponse
}

// IsSuccess returns true when this get chaincode metadata o k response has a 2xx status code
func (o *GetChaincodeMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get chaincode metadata o k response has a 3xx status code
func (o *GetChaincodeMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chaincode metadata o k response has a 4xx status code
func (o *GetChaincodeMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chaincode metadata o k response has a 5xx status code
func (o *GetChaincodeMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get chaincode metadata o k response a status code equal to that given
func (o *GetChaincodeMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get chaincode metadata o k response
func (o *GetChaincodeMetadataOK) Code() int {
	return 200
}

func (o *GetChaincodeMetadataOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataOK %s", 200, payload)
}

func (o *GetChaincodeMetadataOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataOK %s", 200, payload)
}

func (o *GetChaincodeMetadataOK) GetPayload() *models.ChainlaunchdeployChaincodeMetadataResponse {
	return o.Payload
}

func (o *GetChaincodeMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployChaincodeMetadataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetChaincodeMetadataBadRequest creates a GetChaincodeMetadataBadRequest with default headers values
func NewGetChaincodeMetadataBadRequest() *GetChaincodeMetadataBadRequest {
	return &GetChaincodeMetadataBadRequest{}
}

/*
GetChaincodeMetadataBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetChaincodeMetadataBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this get chaincode metadata bad request response has a 2xx status code
func (o *GetChaincodeMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chaincode metadata bad request response has a 3xx status code
func (o *GetChaincodeMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chaincode metadata bad request response has a 4xx status code
func (o *GetChaincodeMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get chaincode metadata bad request response has a 5xx status code
func (o *GetChaincodeMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get chaincode metadata bad request response a status code equal to that given
func (o *GetChaincodeMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get chaincode metadata bad request response
func (o *GetChaincodeMetadataBadRequest) Code() int {
	return 400
}

func (o *GetChaincodeMetadataBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataBadRequest %s", 400, payload)
}

func (o *GetChaincodeMetadataBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataBadRequest %s", 400, payload)
}

func (o *GetChaincodeMetadataBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *GetChaincodeMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetChaincodeMetadataInternalServerError creates a GetChaincodeMetadataInternalServerError with default headers values
func NewGetChaincodeMetadataInternalServerError() *GetChaincodeMetadataInternalServerError {
	return &GetChaincodeMetadataInternalServerError{}
}

/*
GetChaincodeMetadataInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetChaincodeMetadataInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this get chaincode metadata internal server error response has a 2xx status code
func (o *GetChaincodeMetadataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get chaincode metadata internal server error response has a 3xx status code
func (o *GetChaincodeMetadataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get chaincode metadata internal server error response has a 4xx status code
func (o *GetChaincodeMetadataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get chaincode metadata internal server error response has a 5xx status code
func (o *GetChaincodeMetadataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get chaincode metadata internal server error response a status code equal to that given
func (o *GetChaincodeMetadataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get chaincode metadata internal server error response
func (o *GetChaincodeMetadataInternalServerError) Code() int {
	return 500
}

func (o *GetChaincodeMetadataInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataInternalServerError %s", 500, payload)
}

func (o *GetChaincodeMetadataInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /sc/fabric/chaincodes/{chaincodeId}/metadata][%d] getChaincodeMetadataInternalServerError %s", 500, payload)
}

func (o *GetChaincodeMetadataInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *GetChaincodeMetadataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
