// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// NewApproveChaincodeByDefinitionParams creates a new ApproveChaincodeByDefinitionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApproveChaincodeByDefinitionParams() *ApproveChaincodeByDefinitionParams {
	return &ApproveChaincodeByDefinitionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApproveChaincodeByDefinitionParamsWithTimeout creates a new ApproveChaincodeByDefinitionParams object
// with the ability to set a timeout on a request.
func NewApproveChaincodeByDefinitionParamsWithTimeout(timeout time.Duration) *ApproveChaincodeByDefinitionParams {
	return &ApproveChaincodeByDefinitionParams{
		timeout: timeout,
	}
}

// NewApproveChaincodeByDefinitionParamsWithContext creates a new ApproveChaincodeByDefinitionParams object
// with the ability to set a context for a request.
func NewApproveChaincodeByDefinitionParamsWithContext(ctx context.Context) *ApproveChaincodeByDefinitionParams {
	return &ApproveChaincodeByDefinitionParams{
		Context: ctx,
	}
}

// NewApproveChaincodeByDefinitionParamsWithHTTPClient creates a new ApproveChaincodeByDefinitionParams object
// with the ability to set a custom HTTPClient for a request.
func NewApproveChaincodeByDefinitionParamsWithHTTPClient(client *http.Client) *ApproveChaincodeByDefinitionParams {
	return &ApproveChaincodeByDefinitionParams{
		HTTPClient: client,
	}
}

/*
ApproveChaincodeByDefinitionParams contains all the parameters to send to the API endpoint

	for the approve chaincode by definition operation.

	Typically these are written to a http.Request.
*/
type ApproveChaincodeByDefinitionParams struct {

	/* DefinitionID.

	   Chaincode Definition ID
	*/
	DefinitionID int64

	/* Request.

	   Peer ID to use for approval
	*/
	Request *models.ChainlaunchdeployApproveChaincodeByDefinitionRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the approve chaincode by definition params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApproveChaincodeByDefinitionParams) WithDefaults() *ApproveChaincodeByDefinitionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the approve chaincode by definition params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApproveChaincodeByDefinitionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) WithTimeout(timeout time.Duration) *ApproveChaincodeByDefinitionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) WithContext(ctx context.Context) *ApproveChaincodeByDefinitionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) WithHTTPClient(client *http.Client) *ApproveChaincodeByDefinitionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDefinitionID adds the definitionID to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) WithDefinitionID(definitionID int64) *ApproveChaincodeByDefinitionParams {
	o.SetDefinitionID(definitionID)
	return o
}

// SetDefinitionID adds the definitionId to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) SetDefinitionID(definitionID int64) {
	o.DefinitionID = definitionID
}

// WithRequest adds the request to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) WithRequest(request *models.ChainlaunchdeployApproveChaincodeByDefinitionRequest) *ApproveChaincodeByDefinitionParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the approve chaincode by definition params
func (o *ApproveChaincodeByDefinitionParams) SetRequest(request *models.ChainlaunchdeployApproveChaincodeByDefinitionRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *ApproveChaincodeByDefinitionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param definitionId
	if err := r.SetPathParam("definitionId", swag.FormatInt64(o.DefinitionID)); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
