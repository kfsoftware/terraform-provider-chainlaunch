// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ShareChaincodeProposalReader is a Reader for the ShareChaincodeProposal structure.
type ShareChaincodeProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShareChaincodeProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewShareChaincodeProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewShareChaincodeProposalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewShareChaincodeProposalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/chaincodes/proposals/{proposalId}/share] shareChaincodeProposal", response, response.Code())
	}
}

// NewShareChaincodeProposalOK creates a ShareChaincodeProposalOK with default headers values
func NewShareChaincodeProposalOK() *ShareChaincodeProposalOK {
	return &ShareChaincodeProposalOK{}
}

/*
ShareChaincodeProposalOK describes a response with status code 200, with default header values.

OK
*/
type ShareChaincodeProposalOK struct {
	Payload *models.ProShareChaincodeProposalResponse
}

// IsSuccess returns true when this share chaincode proposal o k response has a 2xx status code
func (o *ShareChaincodeProposalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this share chaincode proposal o k response has a 3xx status code
func (o *ShareChaincodeProposalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode proposal o k response has a 4xx status code
func (o *ShareChaincodeProposalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this share chaincode proposal o k response has a 5xx status code
func (o *ShareChaincodeProposalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this share chaincode proposal o k response a status code equal to that given
func (o *ShareChaincodeProposalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the share chaincode proposal o k response
func (o *ShareChaincodeProposalOK) Code() int {
	return 200
}

func (o *ShareChaincodeProposalOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalOK %s", 200, payload)
}

func (o *ShareChaincodeProposalOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalOK %s", 200, payload)
}

func (o *ShareChaincodeProposalOK) GetPayload() *models.ProShareChaincodeProposalResponse {
	return o.Payload
}

func (o *ShareChaincodeProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProShareChaincodeProposalResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareChaincodeProposalBadRequest creates a ShareChaincodeProposalBadRequest with default headers values
func NewShareChaincodeProposalBadRequest() *ShareChaincodeProposalBadRequest {
	return &ShareChaincodeProposalBadRequest{}
}

/*
ShareChaincodeProposalBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ShareChaincodeProposalBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share chaincode proposal bad request response has a 2xx status code
func (o *ShareChaincodeProposalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share chaincode proposal bad request response has a 3xx status code
func (o *ShareChaincodeProposalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode proposal bad request response has a 4xx status code
func (o *ShareChaincodeProposalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this share chaincode proposal bad request response has a 5xx status code
func (o *ShareChaincodeProposalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this share chaincode proposal bad request response a status code equal to that given
func (o *ShareChaincodeProposalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the share chaincode proposal bad request response
func (o *ShareChaincodeProposalBadRequest) Code() int {
	return 400
}

func (o *ShareChaincodeProposalBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalBadRequest %s", 400, payload)
}

func (o *ShareChaincodeProposalBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalBadRequest %s", 400, payload)
}

func (o *ShareChaincodeProposalBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareChaincodeProposalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewShareChaincodeProposalInternalServerError creates a ShareChaincodeProposalInternalServerError with default headers values
func NewShareChaincodeProposalInternalServerError() *ShareChaincodeProposalInternalServerError {
	return &ShareChaincodeProposalInternalServerError{}
}

/*
ShareChaincodeProposalInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ShareChaincodeProposalInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this share chaincode proposal internal server error response has a 2xx status code
func (o *ShareChaincodeProposalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this share chaincode proposal internal server error response has a 3xx status code
func (o *ShareChaincodeProposalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this share chaincode proposal internal server error response has a 4xx status code
func (o *ShareChaincodeProposalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this share chaincode proposal internal server error response has a 5xx status code
func (o *ShareChaincodeProposalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this share chaincode proposal internal server error response a status code equal to that given
func (o *ShareChaincodeProposalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the share chaincode proposal internal server error response
func (o *ShareChaincodeProposalInternalServerError) Code() int {
	return 500
}

func (o *ShareChaincodeProposalInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalInternalServerError %s", 500, payload)
}

func (o *ShareChaincodeProposalInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/share][%d] shareChaincodeProposalInternalServerError %s", 500, payload)
}

func (o *ShareChaincodeProposalInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *ShareChaincodeProposalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
