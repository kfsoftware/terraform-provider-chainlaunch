// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// AcceptChaincodeProposalReader is a Reader for the AcceptChaincodeProposal structure.
type AcceptChaincodeProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptChaincodeProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptChaincodeProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptChaincodeProposalBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptChaincodeProposalNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAcceptChaincodeProposalInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /pro/chaincodes/proposals/{proposalId}/accept] acceptChaincodeProposal", response, response.Code())
	}
}

// NewAcceptChaincodeProposalOK creates a AcceptChaincodeProposalOK with default headers values
func NewAcceptChaincodeProposalOK() *AcceptChaincodeProposalOK {
	return &AcceptChaincodeProposalOK{}
}

/*
AcceptChaincodeProposalOK describes a response with status code 200, with default header values.

OK
*/
type AcceptChaincodeProposalOK struct {
	Payload *models.ProChaincodeDefinitionWithChaincode
}

// IsSuccess returns true when this accept chaincode proposal o k response has a 2xx status code
func (o *AcceptChaincodeProposalOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept chaincode proposal o k response has a 3xx status code
func (o *AcceptChaincodeProposalOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept chaincode proposal o k response has a 4xx status code
func (o *AcceptChaincodeProposalOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept chaincode proposal o k response has a 5xx status code
func (o *AcceptChaincodeProposalOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept chaincode proposal o k response a status code equal to that given
func (o *AcceptChaincodeProposalOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the accept chaincode proposal o k response
func (o *AcceptChaincodeProposalOK) Code() int {
	return 200
}

func (o *AcceptChaincodeProposalOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalOK %s", 200, payload)
}

func (o *AcceptChaincodeProposalOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalOK %s", 200, payload)
}

func (o *AcceptChaincodeProposalOK) GetPayload() *models.ProChaincodeDefinitionWithChaincode {
	return o.Payload
}

func (o *AcceptChaincodeProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProChaincodeDefinitionWithChaincode)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptChaincodeProposalBadRequest creates a AcceptChaincodeProposalBadRequest with default headers values
func NewAcceptChaincodeProposalBadRequest() *AcceptChaincodeProposalBadRequest {
	return &AcceptChaincodeProposalBadRequest{}
}

/*
AcceptChaincodeProposalBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AcceptChaincodeProposalBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept chaincode proposal bad request response has a 2xx status code
func (o *AcceptChaincodeProposalBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept chaincode proposal bad request response has a 3xx status code
func (o *AcceptChaincodeProposalBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept chaincode proposal bad request response has a 4xx status code
func (o *AcceptChaincodeProposalBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept chaincode proposal bad request response has a 5xx status code
func (o *AcceptChaincodeProposalBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this accept chaincode proposal bad request response a status code equal to that given
func (o *AcceptChaincodeProposalBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the accept chaincode proposal bad request response
func (o *AcceptChaincodeProposalBadRequest) Code() int {
	return 400
}

func (o *AcceptChaincodeProposalBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalBadRequest %s", 400, payload)
}

func (o *AcceptChaincodeProposalBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalBadRequest %s", 400, payload)
}

func (o *AcceptChaincodeProposalBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptChaincodeProposalBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptChaincodeProposalNotFound creates a AcceptChaincodeProposalNotFound with default headers values
func NewAcceptChaincodeProposalNotFound() *AcceptChaincodeProposalNotFound {
	return &AcceptChaincodeProposalNotFound{}
}

/*
AcceptChaincodeProposalNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AcceptChaincodeProposalNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept chaincode proposal not found response has a 2xx status code
func (o *AcceptChaincodeProposalNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept chaincode proposal not found response has a 3xx status code
func (o *AcceptChaincodeProposalNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept chaincode proposal not found response has a 4xx status code
func (o *AcceptChaincodeProposalNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept chaincode proposal not found response has a 5xx status code
func (o *AcceptChaincodeProposalNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this accept chaincode proposal not found response a status code equal to that given
func (o *AcceptChaincodeProposalNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the accept chaincode proposal not found response
func (o *AcceptChaincodeProposalNotFound) Code() int {
	return 404
}

func (o *AcceptChaincodeProposalNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalNotFound %s", 404, payload)
}

func (o *AcceptChaincodeProposalNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalNotFound %s", 404, payload)
}

func (o *AcceptChaincodeProposalNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptChaincodeProposalNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewAcceptChaincodeProposalInternalServerError creates a AcceptChaincodeProposalInternalServerError with default headers values
func NewAcceptChaincodeProposalInternalServerError() *AcceptChaincodeProposalInternalServerError {
	return &AcceptChaincodeProposalInternalServerError{}
}

/*
AcceptChaincodeProposalInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AcceptChaincodeProposalInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this accept chaincode proposal internal server error response has a 2xx status code
func (o *AcceptChaincodeProposalInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept chaincode proposal internal server error response has a 3xx status code
func (o *AcceptChaincodeProposalInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept chaincode proposal internal server error response has a 4xx status code
func (o *AcceptChaincodeProposalInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept chaincode proposal internal server error response has a 5xx status code
func (o *AcceptChaincodeProposalInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this accept chaincode proposal internal server error response a status code equal to that given
func (o *AcceptChaincodeProposalInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the accept chaincode proposal internal server error response
func (o *AcceptChaincodeProposalInternalServerError) Code() int {
	return 500
}

func (o *AcceptChaincodeProposalInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalInternalServerError %s", 500, payload)
}

func (o *AcceptChaincodeProposalInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /pro/chaincodes/proposals/{proposalId}/accept][%d] acceptChaincodeProposalInternalServerError %s", 500, payload)
}

func (o *AcceptChaincodeProposalInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *AcceptChaincodeProposalInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
