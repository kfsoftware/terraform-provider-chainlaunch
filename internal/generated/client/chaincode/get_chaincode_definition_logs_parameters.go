// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetChaincodeDefinitionLogsParams creates a new GetChaincodeDefinitionLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetChaincodeDefinitionLogsParams() *GetChaincodeDefinitionLogsParams {
	return &GetChaincodeDefinitionLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetChaincodeDefinitionLogsParamsWithTimeout creates a new GetChaincodeDefinitionLogsParams object
// with the ability to set a timeout on a request.
func NewGetChaincodeDefinitionLogsParamsWithTimeout(timeout time.Duration) *GetChaincodeDefinitionLogsParams {
	return &GetChaincodeDefinitionLogsParams{
		timeout: timeout,
	}
}

// NewGetChaincodeDefinitionLogsParamsWithContext creates a new GetChaincodeDefinitionLogsParams object
// with the ability to set a context for a request.
func NewGetChaincodeDefinitionLogsParamsWithContext(ctx context.Context) *GetChaincodeDefinitionLogsParams {
	return &GetChaincodeDefinitionLogsParams{
		Context: ctx,
	}
}

// NewGetChaincodeDefinitionLogsParamsWithHTTPClient creates a new GetChaincodeDefinitionLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetChaincodeDefinitionLogsParamsWithHTTPClient(client *http.Client) *GetChaincodeDefinitionLogsParams {
	return &GetChaincodeDefinitionLogsParams{
		HTTPClient: client,
	}
}

/*
GetChaincodeDefinitionLogsParams contains all the parameters to send to the API endpoint

	for the get chaincode definition logs operation.

	Typically these are written to a http.Request.
*/
type GetChaincodeDefinitionLogsParams struct {

	/* DefinitionID.

	   Chaincode Definition ID
	*/
	DefinitionID int64

	/* Follow.

	   Follow logs in real-time (uses SSE)
	*/
	Follow *bool

	/* Tail.

	   Number of lines to show from the end

	   Default: 100
	*/
	Tail *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get chaincode definition logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChaincodeDefinitionLogsParams) WithDefaults() *GetChaincodeDefinitionLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get chaincode definition logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChaincodeDefinitionLogsParams) SetDefaults() {
	var (
		followDefault = bool(false)

		tailDefault = int64(100)
	)

	val := GetChaincodeDefinitionLogsParams{
		Follow: &followDefault,
		Tail:   &tailDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithTimeout(timeout time.Duration) *GetChaincodeDefinitionLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithContext(ctx context.Context) *GetChaincodeDefinitionLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithHTTPClient(client *http.Client) *GetChaincodeDefinitionLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDefinitionID adds the definitionID to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithDefinitionID(definitionID int64) *GetChaincodeDefinitionLogsParams {
	o.SetDefinitionID(definitionID)
	return o
}

// SetDefinitionID adds the definitionId to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetDefinitionID(definitionID int64) {
	o.DefinitionID = definitionID
}

// WithFollow adds the follow to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithFollow(follow *bool) *GetChaincodeDefinitionLogsParams {
	o.SetFollow(follow)
	return o
}

// SetFollow adds the follow to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetFollow(follow *bool) {
	o.Follow = follow
}

// WithTail adds the tail to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) WithTail(tail *int64) *GetChaincodeDefinitionLogsParams {
	o.SetTail(tail)
	return o
}

// SetTail adds the tail to the get chaincode definition logs params
func (o *GetChaincodeDefinitionLogsParams) SetTail(tail *int64) {
	o.Tail = tail
}

// WriteToRequest writes these params to a swagger request
func (o *GetChaincodeDefinitionLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param definitionId
	if err := r.SetPathParam("definitionId", swag.FormatInt64(o.DefinitionID)); err != nil {
		return err
	}

	if o.Follow != nil {

		// query param follow
		var qrFollow bool

		if o.Follow != nil {
			qrFollow = *o.Follow
		}
		qFollow := swag.FormatBool(qrFollow)
		if qFollow != "" {

			if err := r.SetQueryParam("follow", qFollow); err != nil {
				return err
			}
		}
	}

	if o.Tail != nil {

		// query param tail
		var qrTail int64

		if o.Tail != nil {
			qrTail = *o.Tail
		}
		qTail := swag.FormatInt64(qrTail)
		if qTail != "" {

			if err := r.SetQueryParam("tail", qTail); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
