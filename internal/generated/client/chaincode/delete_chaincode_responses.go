// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// DeleteChaincodeReader is a Reader for the DeleteChaincode structure.
type DeleteChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteChaincodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /sc/fabric/chaincodes/{id}] deleteChaincode", response, response.Code())
	}
}

// NewDeleteChaincodeOK creates a DeleteChaincodeOK with default headers values
func NewDeleteChaincodeOK() *DeleteChaincodeOK {
	return &DeleteChaincodeOK{}
}

/*
DeleteChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type DeleteChaincodeOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete chaincode o k response has a 2xx status code
func (o *DeleteChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete chaincode o k response has a 3xx status code
func (o *DeleteChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete chaincode o k response has a 4xx status code
func (o *DeleteChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete chaincode o k response has a 5xx status code
func (o *DeleteChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete chaincode o k response a status code equal to that given
func (o *DeleteChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete chaincode o k response
func (o *DeleteChaincodeOK) Code() int {
	return 200
}

func (o *DeleteChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeOK %s", 200, payload)
}

func (o *DeleteChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeOK %s", 200, payload)
}

func (o *DeleteChaincodeOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteChaincodeBadRequest creates a DeleteChaincodeBadRequest with default headers values
func NewDeleteChaincodeBadRequest() *DeleteChaincodeBadRequest {
	return &DeleteChaincodeBadRequest{}
}

/*
DeleteChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this delete chaincode bad request response has a 2xx status code
func (o *DeleteChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete chaincode bad request response has a 3xx status code
func (o *DeleteChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete chaincode bad request response has a 4xx status code
func (o *DeleteChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete chaincode bad request response has a 5xx status code
func (o *DeleteChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete chaincode bad request response a status code equal to that given
func (o *DeleteChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete chaincode bad request response
func (o *DeleteChaincodeBadRequest) Code() int {
	return 400
}

func (o *DeleteChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeBadRequest %s", 400, payload)
}

func (o *DeleteChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeBadRequest %s", 400, payload)
}

func (o *DeleteChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *DeleteChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteChaincodeNotFound creates a DeleteChaincodeNotFound with default headers values
func NewDeleteChaincodeNotFound() *DeleteChaincodeNotFound {
	return &DeleteChaincodeNotFound{}
}

/*
DeleteChaincodeNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteChaincodeNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this delete chaincode not found response has a 2xx status code
func (o *DeleteChaincodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete chaincode not found response has a 3xx status code
func (o *DeleteChaincodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete chaincode not found response has a 4xx status code
func (o *DeleteChaincodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete chaincode not found response has a 5xx status code
func (o *DeleteChaincodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete chaincode not found response a status code equal to that given
func (o *DeleteChaincodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete chaincode not found response
func (o *DeleteChaincodeNotFound) Code() int {
	return 404
}

func (o *DeleteChaincodeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeNotFound %s", 404, payload)
}

func (o *DeleteChaincodeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeNotFound %s", 404, payload)
}

func (o *DeleteChaincodeNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *DeleteChaincodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteChaincodeInternalServerError creates a DeleteChaincodeInternalServerError with default headers values
func NewDeleteChaincodeInternalServerError() *DeleteChaincodeInternalServerError {
	return &DeleteChaincodeInternalServerError{}
}

/*
DeleteChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this delete chaincode internal server error response has a 2xx status code
func (o *DeleteChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete chaincode internal server error response has a 3xx status code
func (o *DeleteChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete chaincode internal server error response has a 4xx status code
func (o *DeleteChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete chaincode internal server error response has a 5xx status code
func (o *DeleteChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete chaincode internal server error response a status code equal to that given
func (o *DeleteChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete chaincode internal server error response
func (o *DeleteChaincodeInternalServerError) Code() int {
	return 500
}

func (o *DeleteChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeInternalServerError %s", 500, payload)
}

func (o *DeleteChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /sc/fabric/chaincodes/{id}][%d] deleteChaincodeInternalServerError %s", 500, payload)
}

func (o *DeleteChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *DeleteChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
