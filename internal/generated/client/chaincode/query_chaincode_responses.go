// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// QueryChaincodeReader is a Reader for the QueryChaincode structure.
type QueryChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewQueryChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/chaincodes/{chaincodeId}/query] queryChaincode", response, response.Code())
	}
}

// NewQueryChaincodeOK creates a QueryChaincodeOK with default headers values
func NewQueryChaincodeOK() *QueryChaincodeOK {
	return &QueryChaincodeOK{}
}

/*
QueryChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type QueryChaincodeOK struct {
	Payload *models.ChainlaunchdeployChaincodeQueryResponse
}

// IsSuccess returns true when this query chaincode o k response has a 2xx status code
func (o *QueryChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query chaincode o k response has a 3xx status code
func (o *QueryChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode o k response has a 4xx status code
func (o *QueryChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query chaincode o k response has a 5xx status code
func (o *QueryChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query chaincode o k response a status code equal to that given
func (o *QueryChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query chaincode o k response
func (o *QueryChaincodeOK) Code() int {
	return 200
}

func (o *QueryChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeOK %s", 200, payload)
}

func (o *QueryChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeOK %s", 200, payload)
}

func (o *QueryChaincodeOK) GetPayload() *models.ChainlaunchdeployChaincodeQueryResponse {
	return o.Payload
}

func (o *QueryChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployChaincodeQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewQueryChaincodeBadRequest creates a QueryChaincodeBadRequest with default headers values
func NewQueryChaincodeBadRequest() *QueryChaincodeBadRequest {
	return &QueryChaincodeBadRequest{}
}

/*
QueryChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type QueryChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this query chaincode bad request response has a 2xx status code
func (o *QueryChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query chaincode bad request response has a 3xx status code
func (o *QueryChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode bad request response has a 4xx status code
func (o *QueryChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query chaincode bad request response has a 5xx status code
func (o *QueryChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query chaincode bad request response a status code equal to that given
func (o *QueryChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query chaincode bad request response
func (o *QueryChaincodeBadRequest) Code() int {
	return 400
}

func (o *QueryChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeBadRequest %s", 400, payload)
}

func (o *QueryChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeBadRequest %s", 400, payload)
}

func (o *QueryChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *QueryChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewQueryChaincodeInternalServerError creates a QueryChaincodeInternalServerError with default headers values
func NewQueryChaincodeInternalServerError() *QueryChaincodeInternalServerError {
	return &QueryChaincodeInternalServerError{}
}

/*
QueryChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type QueryChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this query chaincode internal server error response has a 2xx status code
func (o *QueryChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query chaincode internal server error response has a 3xx status code
func (o *QueryChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query chaincode internal server error response has a 4xx status code
func (o *QueryChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query chaincode internal server error response has a 5xx status code
func (o *QueryChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query chaincode internal server error response a status code equal to that given
func (o *QueryChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query chaincode internal server error response
func (o *QueryChaincodeInternalServerError) Code() int {
	return 500
}

func (o *QueryChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeInternalServerError %s", 500, payload)
}

func (o *QueryChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/query][%d] queryChaincodeInternalServerError %s", 500, payload)
}

func (o *QueryChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *QueryChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
