// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// InvokeChaincodeReader is a Reader for the InvokeChaincode structure.
type InvokeChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InvokeChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewInvokeChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInvokeChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInvokeChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke] invokeChaincode", response, response.Code())
	}
}

// NewInvokeChaincodeOK creates a InvokeChaincodeOK with default headers values
func NewInvokeChaincodeOK() *InvokeChaincodeOK {
	return &InvokeChaincodeOK{}
}

/*
InvokeChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type InvokeChaincodeOK struct {
	Payload *models.ChainlaunchdeployChaincodeInvokeResponse
}

// IsSuccess returns true when this invoke chaincode o k response has a 2xx status code
func (o *InvokeChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this invoke chaincode o k response has a 3xx status code
func (o *InvokeChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoke chaincode o k response has a 4xx status code
func (o *InvokeChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this invoke chaincode o k response has a 5xx status code
func (o *InvokeChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this invoke chaincode o k response a status code equal to that given
func (o *InvokeChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the invoke chaincode o k response
func (o *InvokeChaincodeOK) Code() int {
	return 200
}

func (o *InvokeChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeOK %s", 200, payload)
}

func (o *InvokeChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeOK %s", 200, payload)
}

func (o *InvokeChaincodeOK) GetPayload() *models.ChainlaunchdeployChaincodeInvokeResponse {
	return o.Payload
}

func (o *InvokeChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployChaincodeInvokeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewInvokeChaincodeBadRequest creates a InvokeChaincodeBadRequest with default headers values
func NewInvokeChaincodeBadRequest() *InvokeChaincodeBadRequest {
	return &InvokeChaincodeBadRequest{}
}

/*
InvokeChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InvokeChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this invoke chaincode bad request response has a 2xx status code
func (o *InvokeChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoke chaincode bad request response has a 3xx status code
func (o *InvokeChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoke chaincode bad request response has a 4xx status code
func (o *InvokeChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this invoke chaincode bad request response has a 5xx status code
func (o *InvokeChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this invoke chaincode bad request response a status code equal to that given
func (o *InvokeChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the invoke chaincode bad request response
func (o *InvokeChaincodeBadRequest) Code() int {
	return 400
}

func (o *InvokeChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeBadRequest %s", 400, payload)
}

func (o *InvokeChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeBadRequest %s", 400, payload)
}

func (o *InvokeChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *InvokeChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewInvokeChaincodeInternalServerError creates a InvokeChaincodeInternalServerError with default headers values
func NewInvokeChaincodeInternalServerError() *InvokeChaincodeInternalServerError {
	return &InvokeChaincodeInternalServerError{}
}

/*
InvokeChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type InvokeChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this invoke chaincode internal server error response has a 2xx status code
func (o *InvokeChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this invoke chaincode internal server error response has a 3xx status code
func (o *InvokeChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this invoke chaincode internal server error response has a 4xx status code
func (o *InvokeChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this invoke chaincode internal server error response has a 5xx status code
func (o *InvokeChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this invoke chaincode internal server error response a status code equal to that given
func (o *InvokeChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the invoke chaincode internal server error response
func (o *InvokeChaincodeInternalServerError) Code() int {
	return 500
}

func (o *InvokeChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeInternalServerError %s", 500, payload)
}

func (o *InvokeChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes/{chaincodeId}/invoke][%d] invokeChaincodeInternalServerError %s", 500, payload)
}

func (o *InvokeChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *InvokeChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
