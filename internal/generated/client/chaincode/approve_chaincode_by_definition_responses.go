// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ApproveChaincodeByDefinitionReader is a Reader for the ApproveChaincodeByDefinition structure.
type ApproveChaincodeByDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApproveChaincodeByDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewApproveChaincodeByDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewApproveChaincodeByDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewApproveChaincodeByDefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/definitions/{definitionId}/approve] approveChaincodeByDefinition", response, response.Code())
	}
}

// NewApproveChaincodeByDefinitionOK creates a ApproveChaincodeByDefinitionOK with default headers values
func NewApproveChaincodeByDefinitionOK() *ApproveChaincodeByDefinitionOK {
	return &ApproveChaincodeByDefinitionOK{}
}

/*
ApproveChaincodeByDefinitionOK describes a response with status code 200, with default header values.

OK
*/
type ApproveChaincodeByDefinitionOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this approve chaincode by definition o k response has a 2xx status code
func (o *ApproveChaincodeByDefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this approve chaincode by definition o k response has a 3xx status code
func (o *ApproveChaincodeByDefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve chaincode by definition o k response has a 4xx status code
func (o *ApproveChaincodeByDefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve chaincode by definition o k response has a 5xx status code
func (o *ApproveChaincodeByDefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this approve chaincode by definition o k response a status code equal to that given
func (o *ApproveChaincodeByDefinitionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the approve chaincode by definition o k response
func (o *ApproveChaincodeByDefinitionOK) Code() int {
	return 200
}

func (o *ApproveChaincodeByDefinitionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionOK %s", 200, payload)
}

func (o *ApproveChaincodeByDefinitionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionOK %s", 200, payload)
}

func (o *ApproveChaincodeByDefinitionOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *ApproveChaincodeByDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewApproveChaincodeByDefinitionBadRequest creates a ApproveChaincodeByDefinitionBadRequest with default headers values
func NewApproveChaincodeByDefinitionBadRequest() *ApproveChaincodeByDefinitionBadRequest {
	return &ApproveChaincodeByDefinitionBadRequest{}
}

/*
ApproveChaincodeByDefinitionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ApproveChaincodeByDefinitionBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this approve chaincode by definition bad request response has a 2xx status code
func (o *ApproveChaincodeByDefinitionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve chaincode by definition bad request response has a 3xx status code
func (o *ApproveChaincodeByDefinitionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve chaincode by definition bad request response has a 4xx status code
func (o *ApproveChaincodeByDefinitionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this approve chaincode by definition bad request response has a 5xx status code
func (o *ApproveChaincodeByDefinitionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this approve chaincode by definition bad request response a status code equal to that given
func (o *ApproveChaincodeByDefinitionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the approve chaincode by definition bad request response
func (o *ApproveChaincodeByDefinitionBadRequest) Code() int {
	return 400
}

func (o *ApproveChaincodeByDefinitionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *ApproveChaincodeByDefinitionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *ApproveChaincodeByDefinitionBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ApproveChaincodeByDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewApproveChaincodeByDefinitionInternalServerError creates a ApproveChaincodeByDefinitionInternalServerError with default headers values
func NewApproveChaincodeByDefinitionInternalServerError() *ApproveChaincodeByDefinitionInternalServerError {
	return &ApproveChaincodeByDefinitionInternalServerError{}
}

/*
ApproveChaincodeByDefinitionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ApproveChaincodeByDefinitionInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this approve chaincode by definition internal server error response has a 2xx status code
func (o *ApproveChaincodeByDefinitionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this approve chaincode by definition internal server error response has a 3xx status code
func (o *ApproveChaincodeByDefinitionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this approve chaincode by definition internal server error response has a 4xx status code
func (o *ApproveChaincodeByDefinitionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this approve chaincode by definition internal server error response has a 5xx status code
func (o *ApproveChaincodeByDefinitionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this approve chaincode by definition internal server error response a status code equal to that given
func (o *ApproveChaincodeByDefinitionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the approve chaincode by definition internal server error response
func (o *ApproveChaincodeByDefinitionInternalServerError) Code() int {
	return 500
}

func (o *ApproveChaincodeByDefinitionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *ApproveChaincodeByDefinitionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/approve][%d] approveChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *ApproveChaincodeByDefinitionInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ApproveChaincodeByDefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
