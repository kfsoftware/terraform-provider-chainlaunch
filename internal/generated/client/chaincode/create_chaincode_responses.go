// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// CreateChaincodeReader is a Reader for the CreateChaincode structure.
type CreateChaincodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateChaincodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewCreateChaincodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateChaincodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateChaincodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/chaincodes] createChaincode", response, response.Code())
	}
}

// NewCreateChaincodeOK creates a CreateChaincodeOK with default headers values
func NewCreateChaincodeOK() *CreateChaincodeOK {
	return &CreateChaincodeOK{}
}

/*
CreateChaincodeOK describes a response with status code 200, with default header values.

OK
*/
type CreateChaincodeOK struct {
	Payload *models.ChainlaunchdeployCreateChaincodeResponse
}

// IsSuccess returns true when this create chaincode o k response has a 2xx status code
func (o *CreateChaincodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create chaincode o k response has a 3xx status code
func (o *CreateChaincodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chaincode o k response has a 4xx status code
func (o *CreateChaincodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create chaincode o k response has a 5xx status code
func (o *CreateChaincodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create chaincode o k response a status code equal to that given
func (o *CreateChaincodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create chaincode o k response
func (o *CreateChaincodeOK) Code() int {
	return 200
}

func (o *CreateChaincodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeOK %s", 200, payload)
}

func (o *CreateChaincodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeOK %s", 200, payload)
}

func (o *CreateChaincodeOK) GetPayload() *models.ChainlaunchdeployCreateChaincodeResponse {
	return o.Payload
}

func (o *CreateChaincodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployCreateChaincodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateChaincodeBadRequest creates a CreateChaincodeBadRequest with default headers values
func NewCreateChaincodeBadRequest() *CreateChaincodeBadRequest {
	return &CreateChaincodeBadRequest{}
}

/*
CreateChaincodeBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateChaincodeBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this create chaincode bad request response has a 2xx status code
func (o *CreateChaincodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chaincode bad request response has a 3xx status code
func (o *CreateChaincodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chaincode bad request response has a 4xx status code
func (o *CreateChaincodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create chaincode bad request response has a 5xx status code
func (o *CreateChaincodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create chaincode bad request response a status code equal to that given
func (o *CreateChaincodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create chaincode bad request response
func (o *CreateChaincodeBadRequest) Code() int {
	return 400
}

func (o *CreateChaincodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeBadRequest %s", 400, payload)
}

func (o *CreateChaincodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeBadRequest %s", 400, payload)
}

func (o *CreateChaincodeBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *CreateChaincodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateChaincodeInternalServerError creates a CreateChaincodeInternalServerError with default headers values
func NewCreateChaincodeInternalServerError() *CreateChaincodeInternalServerError {
	return &CreateChaincodeInternalServerError{}
}

/*
CreateChaincodeInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateChaincodeInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this create chaincode internal server error response has a 2xx status code
func (o *CreateChaincodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create chaincode internal server error response has a 3xx status code
func (o *CreateChaincodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create chaincode internal server error response has a 4xx status code
func (o *CreateChaincodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create chaincode internal server error response has a 5xx status code
func (o *CreateChaincodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create chaincode internal server error response a status code equal to that given
func (o *CreateChaincodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create chaincode internal server error response
func (o *CreateChaincodeInternalServerError) Code() int {
	return 500
}

func (o *CreateChaincodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeInternalServerError %s", 500, payload)
}

func (o *CreateChaincodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/chaincodes][%d] createChaincodeInternalServerError %s", 500, payload)
}

func (o *CreateChaincodeInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *CreateChaincodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
