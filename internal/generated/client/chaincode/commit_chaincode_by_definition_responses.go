// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// CommitChaincodeByDefinitionReader is a Reader for the CommitChaincodeByDefinition structure.
type CommitChaincodeByDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitChaincodeByDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewCommitChaincodeByDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommitChaincodeByDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommitChaincodeByDefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/definitions/{definitionId}/commit] commitChaincodeByDefinition", response, response.Code())
	}
}

// NewCommitChaincodeByDefinitionOK creates a CommitChaincodeByDefinitionOK with default headers values
func NewCommitChaincodeByDefinitionOK() *CommitChaincodeByDefinitionOK {
	return &CommitChaincodeByDefinitionOK{}
}

/*
CommitChaincodeByDefinitionOK describes a response with status code 200, with default header values.

OK
*/
type CommitChaincodeByDefinitionOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this commit chaincode by definition o k response has a 2xx status code
func (o *CommitChaincodeByDefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this commit chaincode by definition o k response has a 3xx status code
func (o *CommitChaincodeByDefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit chaincode by definition o k response has a 4xx status code
func (o *CommitChaincodeByDefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this commit chaincode by definition o k response has a 5xx status code
func (o *CommitChaincodeByDefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this commit chaincode by definition o k response a status code equal to that given
func (o *CommitChaincodeByDefinitionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the commit chaincode by definition o k response
func (o *CommitChaincodeByDefinitionOK) Code() int {
	return 200
}

func (o *CommitChaincodeByDefinitionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionOK %s", 200, payload)
}

func (o *CommitChaincodeByDefinitionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionOK %s", 200, payload)
}

func (o *CommitChaincodeByDefinitionOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *CommitChaincodeByDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCommitChaincodeByDefinitionBadRequest creates a CommitChaincodeByDefinitionBadRequest with default headers values
func NewCommitChaincodeByDefinitionBadRequest() *CommitChaincodeByDefinitionBadRequest {
	return &CommitChaincodeByDefinitionBadRequest{}
}

/*
CommitChaincodeByDefinitionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CommitChaincodeByDefinitionBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this commit chaincode by definition bad request response has a 2xx status code
func (o *CommitChaincodeByDefinitionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this commit chaincode by definition bad request response has a 3xx status code
func (o *CommitChaincodeByDefinitionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit chaincode by definition bad request response has a 4xx status code
func (o *CommitChaincodeByDefinitionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this commit chaincode by definition bad request response has a 5xx status code
func (o *CommitChaincodeByDefinitionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this commit chaincode by definition bad request response a status code equal to that given
func (o *CommitChaincodeByDefinitionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the commit chaincode by definition bad request response
func (o *CommitChaincodeByDefinitionBadRequest) Code() int {
	return 400
}

func (o *CommitChaincodeByDefinitionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *CommitChaincodeByDefinitionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *CommitChaincodeByDefinitionBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *CommitChaincodeByDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCommitChaincodeByDefinitionInternalServerError creates a CommitChaincodeByDefinitionInternalServerError with default headers values
func NewCommitChaincodeByDefinitionInternalServerError() *CommitChaincodeByDefinitionInternalServerError {
	return &CommitChaincodeByDefinitionInternalServerError{}
}

/*
CommitChaincodeByDefinitionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CommitChaincodeByDefinitionInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this commit chaincode by definition internal server error response has a 2xx status code
func (o *CommitChaincodeByDefinitionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this commit chaincode by definition internal server error response has a 3xx status code
func (o *CommitChaincodeByDefinitionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this commit chaincode by definition internal server error response has a 4xx status code
func (o *CommitChaincodeByDefinitionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this commit chaincode by definition internal server error response has a 5xx status code
func (o *CommitChaincodeByDefinitionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this commit chaincode by definition internal server error response a status code equal to that given
func (o *CommitChaincodeByDefinitionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the commit chaincode by definition internal server error response
func (o *CommitChaincodeByDefinitionInternalServerError) Code() int {
	return 500
}

func (o *CommitChaincodeByDefinitionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *CommitChaincodeByDefinitionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/commit][%d] commitChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *CommitChaincodeByDefinitionInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *CommitChaincodeByDefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
