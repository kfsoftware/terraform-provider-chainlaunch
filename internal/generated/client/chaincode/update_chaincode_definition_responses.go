// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateChaincodeDefinitionReader is a Reader for the UpdateChaincodeDefinition structure.
type UpdateChaincodeDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateChaincodeDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateChaincodeDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateChaincodeDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateChaincodeDefinitionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateChaincodeDefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /sc/fabric/definitions/{definitionId}] updateChaincodeDefinition", response, response.Code())
	}
}

// NewUpdateChaincodeDefinitionOK creates a UpdateChaincodeDefinitionOK with default headers values
func NewUpdateChaincodeDefinitionOK() *UpdateChaincodeDefinitionOK {
	return &UpdateChaincodeDefinitionOK{}
}

/*
UpdateChaincodeDefinitionOK describes a response with status code 200, with default header values.

OK
*/
type UpdateChaincodeDefinitionOK struct {
	Payload *models.ChainlaunchdeployChaincodeDefinitionResponse
}

// IsSuccess returns true when this update chaincode definition o k response has a 2xx status code
func (o *UpdateChaincodeDefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update chaincode definition o k response has a 3xx status code
func (o *UpdateChaincodeDefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chaincode definition o k response has a 4xx status code
func (o *UpdateChaincodeDefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update chaincode definition o k response has a 5xx status code
func (o *UpdateChaincodeDefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update chaincode definition o k response a status code equal to that given
func (o *UpdateChaincodeDefinitionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update chaincode definition o k response
func (o *UpdateChaincodeDefinitionOK) Code() int {
	return 200
}

func (o *UpdateChaincodeDefinitionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionOK %s", 200, payload)
}

func (o *UpdateChaincodeDefinitionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionOK %s", 200, payload)
}

func (o *UpdateChaincodeDefinitionOK) GetPayload() *models.ChainlaunchdeployChaincodeDefinitionResponse {
	return o.Payload
}

func (o *UpdateChaincodeDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChainlaunchdeployChaincodeDefinitionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateChaincodeDefinitionBadRequest creates a UpdateChaincodeDefinitionBadRequest with default headers values
func NewUpdateChaincodeDefinitionBadRequest() *UpdateChaincodeDefinitionBadRequest {
	return &UpdateChaincodeDefinitionBadRequest{}
}

/*
UpdateChaincodeDefinitionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateChaincodeDefinitionBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update chaincode definition bad request response has a 2xx status code
func (o *UpdateChaincodeDefinitionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chaincode definition bad request response has a 3xx status code
func (o *UpdateChaincodeDefinitionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chaincode definition bad request response has a 4xx status code
func (o *UpdateChaincodeDefinitionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update chaincode definition bad request response has a 5xx status code
func (o *UpdateChaincodeDefinitionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update chaincode definition bad request response a status code equal to that given
func (o *UpdateChaincodeDefinitionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update chaincode definition bad request response
func (o *UpdateChaincodeDefinitionBadRequest) Code() int {
	return 400
}

func (o *UpdateChaincodeDefinitionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionBadRequest %s", 400, payload)
}

func (o *UpdateChaincodeDefinitionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionBadRequest %s", 400, payload)
}

func (o *UpdateChaincodeDefinitionBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateChaincodeDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateChaincodeDefinitionNotFound creates a UpdateChaincodeDefinitionNotFound with default headers values
func NewUpdateChaincodeDefinitionNotFound() *UpdateChaincodeDefinitionNotFound {
	return &UpdateChaincodeDefinitionNotFound{}
}

/*
UpdateChaincodeDefinitionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateChaincodeDefinitionNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update chaincode definition not found response has a 2xx status code
func (o *UpdateChaincodeDefinitionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chaincode definition not found response has a 3xx status code
func (o *UpdateChaincodeDefinitionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chaincode definition not found response has a 4xx status code
func (o *UpdateChaincodeDefinitionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update chaincode definition not found response has a 5xx status code
func (o *UpdateChaincodeDefinitionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update chaincode definition not found response a status code equal to that given
func (o *UpdateChaincodeDefinitionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update chaincode definition not found response
func (o *UpdateChaincodeDefinitionNotFound) Code() int {
	return 404
}

func (o *UpdateChaincodeDefinitionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionNotFound %s", 404, payload)
}

func (o *UpdateChaincodeDefinitionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionNotFound %s", 404, payload)
}

func (o *UpdateChaincodeDefinitionNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateChaincodeDefinitionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateChaincodeDefinitionInternalServerError creates a UpdateChaincodeDefinitionInternalServerError with default headers values
func NewUpdateChaincodeDefinitionInternalServerError() *UpdateChaincodeDefinitionInternalServerError {
	return &UpdateChaincodeDefinitionInternalServerError{}
}

/*
UpdateChaincodeDefinitionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateChaincodeDefinitionInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update chaincode definition internal server error response has a 2xx status code
func (o *UpdateChaincodeDefinitionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update chaincode definition internal server error response has a 3xx status code
func (o *UpdateChaincodeDefinitionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update chaincode definition internal server error response has a 4xx status code
func (o *UpdateChaincodeDefinitionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update chaincode definition internal server error response has a 5xx status code
func (o *UpdateChaincodeDefinitionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update chaincode definition internal server error response a status code equal to that given
func (o *UpdateChaincodeDefinitionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update chaincode definition internal server error response
func (o *UpdateChaincodeDefinitionInternalServerError) Code() int {
	return 500
}

func (o *UpdateChaincodeDefinitionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionInternalServerError %s", 500, payload)
}

func (o *UpdateChaincodeDefinitionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /sc/fabric/definitions/{definitionId}][%d] updateChaincodeDefinitionInternalServerError %s", 500, payload)
}

func (o *UpdateChaincodeDefinitionInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateChaincodeDefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
