// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// InstallChaincodeByDefinitionReader is a Reader for the InstallChaincodeByDefinition structure.
type InstallChaincodeByDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallChaincodeByDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewInstallChaincodeByDefinitionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInstallChaincodeByDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInstallChaincodeByDefinitionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /sc/fabric/definitions/{definitionId}/install] installChaincodeByDefinition", response, response.Code())
	}
}

// NewInstallChaincodeByDefinitionOK creates a InstallChaincodeByDefinitionOK with default headers values
func NewInstallChaincodeByDefinitionOK() *InstallChaincodeByDefinitionOK {
	return &InstallChaincodeByDefinitionOK{}
}

/*
InstallChaincodeByDefinitionOK describes a response with status code 200, with default header values.

OK
*/
type InstallChaincodeByDefinitionOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this install chaincode by definition o k response has a 2xx status code
func (o *InstallChaincodeByDefinitionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this install chaincode by definition o k response has a 3xx status code
func (o *InstallChaincodeByDefinitionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install chaincode by definition o k response has a 4xx status code
func (o *InstallChaincodeByDefinitionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this install chaincode by definition o k response has a 5xx status code
func (o *InstallChaincodeByDefinitionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this install chaincode by definition o k response a status code equal to that given
func (o *InstallChaincodeByDefinitionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the install chaincode by definition o k response
func (o *InstallChaincodeByDefinitionOK) Code() int {
	return 200
}

func (o *InstallChaincodeByDefinitionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionOK %s", 200, payload)
}

func (o *InstallChaincodeByDefinitionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionOK %s", 200, payload)
}

func (o *InstallChaincodeByDefinitionOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *InstallChaincodeByDefinitionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewInstallChaincodeByDefinitionBadRequest creates a InstallChaincodeByDefinitionBadRequest with default headers values
func NewInstallChaincodeByDefinitionBadRequest() *InstallChaincodeByDefinitionBadRequest {
	return &InstallChaincodeByDefinitionBadRequest{}
}

/*
InstallChaincodeByDefinitionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InstallChaincodeByDefinitionBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this install chaincode by definition bad request response has a 2xx status code
func (o *InstallChaincodeByDefinitionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install chaincode by definition bad request response has a 3xx status code
func (o *InstallChaincodeByDefinitionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install chaincode by definition bad request response has a 4xx status code
func (o *InstallChaincodeByDefinitionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this install chaincode by definition bad request response has a 5xx status code
func (o *InstallChaincodeByDefinitionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this install chaincode by definition bad request response a status code equal to that given
func (o *InstallChaincodeByDefinitionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the install chaincode by definition bad request response
func (o *InstallChaincodeByDefinitionBadRequest) Code() int {
	return 400
}

func (o *InstallChaincodeByDefinitionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *InstallChaincodeByDefinitionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionBadRequest %s", 400, payload)
}

func (o *InstallChaincodeByDefinitionBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *InstallChaincodeByDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewInstallChaincodeByDefinitionInternalServerError creates a InstallChaincodeByDefinitionInternalServerError with default headers values
func NewInstallChaincodeByDefinitionInternalServerError() *InstallChaincodeByDefinitionInternalServerError {
	return &InstallChaincodeByDefinitionInternalServerError{}
}

/*
InstallChaincodeByDefinitionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type InstallChaincodeByDefinitionInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this install chaincode by definition internal server error response has a 2xx status code
func (o *InstallChaincodeByDefinitionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install chaincode by definition internal server error response has a 3xx status code
func (o *InstallChaincodeByDefinitionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install chaincode by definition internal server error response has a 4xx status code
func (o *InstallChaincodeByDefinitionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this install chaincode by definition internal server error response has a 5xx status code
func (o *InstallChaincodeByDefinitionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this install chaincode by definition internal server error response a status code equal to that given
func (o *InstallChaincodeByDefinitionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the install chaincode by definition internal server error response
func (o *InstallChaincodeByDefinitionInternalServerError) Code() int {
	return 500
}

func (o *InstallChaincodeByDefinitionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *InstallChaincodeByDefinitionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /sc/fabric/definitions/{definitionId}/install][%d] installChaincodeByDefinitionInternalServerError %s", 500, payload)
}

func (o *InstallChaincodeByDefinitionInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *InstallChaincodeByDefinitionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
