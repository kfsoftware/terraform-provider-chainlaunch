// Code generated by go-swagger; DO NOT EDIT.

package backups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backups API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backups API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBackup(params *CreateBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupCreated, error)

	DeleteBackup(params *DeleteBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupNoContent, error)

	GetBackup(params *GetBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupOK, error)

	ListBackups(params *ListBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBackup creates a new backup

Create a new backup with the specified configuration
*/
func (a *Client) CreateBackup(params *CreateBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBackup",
		Method:             "POST",
		PathPattern:        "/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateBackupCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBackup deletes a backup

Delete a backup and its associated files
*/
func (a *Client) DeleteBackup(params *DeleteBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackup",
		Method:             "DELETE",
		PathPattern:        "/backups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteBackupNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackup gets a backup by ID

Get detailed information about a specific backup
*/
func (a *Client) GetBackup(params *GetBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackup",
		Method:             "GET",
		PathPattern:        "/backups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBackupOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBackups lists all backups

Get a list of all backups
*/
func (a *Client) ListBackups(params *ListBackupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBackups",
		Method:             "GET",
		PathPattern:        "/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBackupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListBackupsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBackups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
