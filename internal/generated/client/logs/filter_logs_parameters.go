// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFilterLogsParams creates a new FilterLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFilterLogsParams() *FilterLogsParams {
	return &FilterLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFilterLogsParamsWithTimeout creates a new FilterLogsParams object
// with the ability to set a timeout on a request.
func NewFilterLogsParamsWithTimeout(timeout time.Duration) *FilterLogsParams {
	return &FilterLogsParams{
		timeout: timeout,
	}
}

// NewFilterLogsParamsWithContext creates a new FilterLogsParams object
// with the ability to set a context for a request.
func NewFilterLogsParamsWithContext(ctx context.Context) *FilterLogsParams {
	return &FilterLogsParams{
		Context: ctx,
	}
}

// NewFilterLogsParamsWithHTTPClient creates a new FilterLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewFilterLogsParamsWithHTTPClient(client *http.Client) *FilterLogsParams {
	return &FilterLogsParams{
		HTTPClient: client,
	}
}

/*
FilterLogsParams contains all the parameters to send to the API endpoint

	for the filter logs operation.

	Typically these are written to a http.Request.
*/
type FilterLogsParams struct {

	/* End.

	   End line number
	*/
	End *int64

	/* ID.

	   Node ID
	*/
	ID int64

	/* IgnoreCase.

	   Ignore case in pattern matching
	*/
	IgnoreCase *bool

	/* Pattern.

	   Filter pattern
	*/
	Pattern *string

	/* Start.

	   Start line number
	*/
	Start *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the filter logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FilterLogsParams) WithDefaults() *FilterLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the filter logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FilterLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the filter logs params
func (o *FilterLogsParams) WithTimeout(timeout time.Duration) *FilterLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filter logs params
func (o *FilterLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filter logs params
func (o *FilterLogsParams) WithContext(ctx context.Context) *FilterLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filter logs params
func (o *FilterLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the filter logs params
func (o *FilterLogsParams) WithHTTPClient(client *http.Client) *FilterLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the filter logs params
func (o *FilterLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnd adds the end to the filter logs params
func (o *FilterLogsParams) WithEnd(end *int64) *FilterLogsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the filter logs params
func (o *FilterLogsParams) SetEnd(end *int64) {
	o.End = end
}

// WithID adds the id to the filter logs params
func (o *FilterLogsParams) WithID(id int64) *FilterLogsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the filter logs params
func (o *FilterLogsParams) SetID(id int64) {
	o.ID = id
}

// WithIgnoreCase adds the ignoreCase to the filter logs params
func (o *FilterLogsParams) WithIgnoreCase(ignoreCase *bool) *FilterLogsParams {
	o.SetIgnoreCase(ignoreCase)
	return o
}

// SetIgnoreCase adds the ignoreCase to the filter logs params
func (o *FilterLogsParams) SetIgnoreCase(ignoreCase *bool) {
	o.IgnoreCase = ignoreCase
}

// WithPattern adds the pattern to the filter logs params
func (o *FilterLogsParams) WithPattern(pattern *string) *FilterLogsParams {
	o.SetPattern(pattern)
	return o
}

// SetPattern adds the pattern to the filter logs params
func (o *FilterLogsParams) SetPattern(pattern *string) {
	o.Pattern = pattern
}

// WithStart adds the start to the filter logs params
func (o *FilterLogsParams) WithStart(start *int64) *FilterLogsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the filter logs params
func (o *FilterLogsParams) SetStart(start *int64) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *FilterLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.End != nil {

		// query param end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.IgnoreCase != nil {

		// query param ignoreCase
		var qrIgnoreCase bool

		if o.IgnoreCase != nil {
			qrIgnoreCase = *o.IgnoreCase
		}
		qIgnoreCase := swag.FormatBool(qrIgnoreCase)
		if qIgnoreCase != "" {

			if err := r.SetQueryParam("ignoreCase", qIgnoreCase); err != nil {
				return err
			}
		}
	}

	if o.Pattern != nil {

		// query param pattern
		var qrPattern string

		if o.Pattern != nil {
			qrPattern = *o.Pattern
		}
		qPattern := qrPattern
		if qPattern != "" {

			if err := r.SetQueryParam("pattern", qPattern); err != nil {
				return err
			}
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
