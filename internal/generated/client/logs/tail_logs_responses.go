// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// TailLogsReader is a Reader for the TailLogs structure.
type TailLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TailLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewTailLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTailLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTailLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTailLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/logs/tail] tailLogs", response, response.Code())
	}
}

// NewTailLogsOK creates a TailLogsOK with default headers values
func NewTailLogsOK() *TailLogsOK {
	return &TailLogsOK{}
}

/*
TailLogsOK describes a response with status code 200, with default header values.

Tail log entries
*/
type TailLogsOK struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this tail logs o k response has a 2xx status code
func (o *TailLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tail logs o k response has a 3xx status code
func (o *TailLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tail logs o k response has a 4xx status code
func (o *TailLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tail logs o k response has a 5xx status code
func (o *TailLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tail logs o k response a status code equal to that given
func (o *TailLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tail logs o k response
func (o *TailLogsOK) Code() int {
	return 200
}

func (o *TailLogsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsOK %s", 200, payload)
}

func (o *TailLogsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsOK %s", 200, payload)
}

func (o *TailLogsOK) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *TailLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTailLogsBadRequest creates a TailLogsBadRequest with default headers values
func NewTailLogsBadRequest() *TailLogsBadRequest {
	return &TailLogsBadRequest{}
}

/*
TailLogsBadRequest describes a response with status code 400, with default header values.

Invalid number of lines
*/
type TailLogsBadRequest struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this tail logs bad request response has a 2xx status code
func (o *TailLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tail logs bad request response has a 3xx status code
func (o *TailLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tail logs bad request response has a 4xx status code
func (o *TailLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this tail logs bad request response has a 5xx status code
func (o *TailLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this tail logs bad request response a status code equal to that given
func (o *TailLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the tail logs bad request response
func (o *TailLogsBadRequest) Code() int {
	return 400
}

func (o *TailLogsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsBadRequest %s", 400, payload)
}

func (o *TailLogsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsBadRequest %s", 400, payload)
}

func (o *TailLogsBadRequest) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *TailLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTailLogsNotFound creates a TailLogsNotFound with default headers values
func NewTailLogsNotFound() *TailLogsNotFound {
	return &TailLogsNotFound{}
}

/*
TailLogsNotFound describes a response with status code 404, with default header values.

Node or log file not found
*/
type TailLogsNotFound struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this tail logs not found response has a 2xx status code
func (o *TailLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tail logs not found response has a 3xx status code
func (o *TailLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tail logs not found response has a 4xx status code
func (o *TailLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this tail logs not found response has a 5xx status code
func (o *TailLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this tail logs not found response a status code equal to that given
func (o *TailLogsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the tail logs not found response
func (o *TailLogsNotFound) Code() int {
	return 404
}

func (o *TailLogsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsNotFound %s", 404, payload)
}

func (o *TailLogsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsNotFound %s", 404, payload)
}

func (o *TailLogsNotFound) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *TailLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTailLogsInternalServerError creates a TailLogsInternalServerError with default headers values
func NewTailLogsInternalServerError() *TailLogsInternalServerError {
	return &TailLogsInternalServerError{}
}

/*
TailLogsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type TailLogsInternalServerError struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this tail logs internal server error response has a 2xx status code
func (o *TailLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tail logs internal server error response has a 3xx status code
func (o *TailLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tail logs internal server error response has a 4xx status code
func (o *TailLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this tail logs internal server error response has a 5xx status code
func (o *TailLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this tail logs internal server error response a status code equal to that given
func (o *TailLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the tail logs internal server error response
func (o *TailLogsInternalServerError) Code() int {
	return 500
}

func (o *TailLogsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsInternalServerError %s", 500, payload)
}

func (o *TailLogsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/tail][%d] tailLogsInternalServerError %s", 500, payload)
}

func (o *TailLogsInternalServerError) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *TailLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
