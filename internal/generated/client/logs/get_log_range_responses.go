// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetLogRangeReader is a Reader for the GetLogRange structure.
type GetLogRangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogRangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogRangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogRangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLogRangeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLogRangeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/logs/range] getLogRange", response, response.Code())
	}
}

// NewGetLogRangeOK creates a GetLogRangeOK with default headers values
func NewGetLogRangeOK() *GetLogRangeOK {
	return &GetLogRangeOK{}
}

/*
GetLogRangeOK describes a response with status code 200, with default header values.

Log range content
*/
type GetLogRangeOK struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this get log range o k response has a 2xx status code
func (o *GetLogRangeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log range o k response has a 3xx status code
func (o *GetLogRangeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log range o k response has a 4xx status code
func (o *GetLogRangeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log range o k response has a 5xx status code
func (o *GetLogRangeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log range o k response a status code equal to that given
func (o *GetLogRangeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log range o k response
func (o *GetLogRangeOK) Code() int {
	return 200
}

func (o *GetLogRangeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeOK %s", 200, payload)
}

func (o *GetLogRangeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeOK %s", 200, payload)
}

func (o *GetLogRangeOK) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *GetLogRangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetLogRangeBadRequest creates a GetLogRangeBadRequest with default headers values
func NewGetLogRangeBadRequest() *GetLogRangeBadRequest {
	return &GetLogRangeBadRequest{}
}

/*
GetLogRangeBadRequest describes a response with status code 400, with default header values.

Invalid parameters
*/
type GetLogRangeBadRequest struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this get log range bad request response has a 2xx status code
func (o *GetLogRangeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log range bad request response has a 3xx status code
func (o *GetLogRangeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log range bad request response has a 4xx status code
func (o *GetLogRangeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log range bad request response has a 5xx status code
func (o *GetLogRangeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log range bad request response a status code equal to that given
func (o *GetLogRangeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get log range bad request response
func (o *GetLogRangeBadRequest) Code() int {
	return 400
}

func (o *GetLogRangeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeBadRequest %s", 400, payload)
}

func (o *GetLogRangeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeBadRequest %s", 400, payload)
}

func (o *GetLogRangeBadRequest) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *GetLogRangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetLogRangeNotFound creates a GetLogRangeNotFound with default headers values
func NewGetLogRangeNotFound() *GetLogRangeNotFound {
	return &GetLogRangeNotFound{}
}

/*
GetLogRangeNotFound describes a response with status code 404, with default header values.

Node or log file not found
*/
type GetLogRangeNotFound struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this get log range not found response has a 2xx status code
func (o *GetLogRangeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log range not found response has a 3xx status code
func (o *GetLogRangeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log range not found response has a 4xx status code
func (o *GetLogRangeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log range not found response has a 5xx status code
func (o *GetLogRangeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get log range not found response a status code equal to that given
func (o *GetLogRangeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get log range not found response
func (o *GetLogRangeNotFound) Code() int {
	return 404
}

func (o *GetLogRangeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeNotFound %s", 404, payload)
}

func (o *GetLogRangeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeNotFound %s", 404, payload)
}

func (o *GetLogRangeNotFound) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *GetLogRangeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetLogRangeInternalServerError creates a GetLogRangeInternalServerError with default headers values
func NewGetLogRangeInternalServerError() *GetLogRangeInternalServerError {
	return &GetLogRangeInternalServerError{}
}

/*
GetLogRangeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetLogRangeInternalServerError struct {
	Payload *models.LogLogResponse
}

// IsSuccess returns true when this get log range internal server error response has a 2xx status code
func (o *GetLogRangeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log range internal server error response has a 3xx status code
func (o *GetLogRangeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log range internal server error response has a 4xx status code
func (o *GetLogRangeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log range internal server error response has a 5xx status code
func (o *GetLogRangeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get log range internal server error response a status code equal to that given
func (o *GetLogRangeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get log range internal server error response
func (o *GetLogRangeInternalServerError) Code() int {
	return 500
}

func (o *GetLogRangeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeInternalServerError %s", 500, payload)
}

func (o *GetLogRangeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/logs/range][%d] getLogRangeInternalServerError %s", 500, payload)
}

func (o *GetLogRangeInternalServerError) GetPayload() *models.LogLogResponse {
	return o.Payload
}

func (o *GetLogRangeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogLogResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
