// Code generated by go-swagger; DO NOT EDIT.

package backup_schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateBackupScheduleReader is a Reader for the UpdateBackupSchedule structure.
type UpdateBackupScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBackupScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBackupScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBackupScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBackupScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBackupScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /backups/schedules/{id}] updateBackupSchedule", response, response.Code())
	}
}

// NewUpdateBackupScheduleOK creates a UpdateBackupScheduleOK with default headers values
func NewUpdateBackupScheduleOK() *UpdateBackupScheduleOK {
	return &UpdateBackupScheduleOK{}
}

/*
UpdateBackupScheduleOK describes a response with status code 200, with default header values.

OK
*/
type UpdateBackupScheduleOK struct {
	Payload *models.HTTPBackupScheduleResponse
}

// IsSuccess returns true when this update backup schedule o k response has a 2xx status code
func (o *UpdateBackupScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update backup schedule o k response has a 3xx status code
func (o *UpdateBackupScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup schedule o k response has a 4xx status code
func (o *UpdateBackupScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update backup schedule o k response has a 5xx status code
func (o *UpdateBackupScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup schedule o k response a status code equal to that given
func (o *UpdateBackupScheduleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update backup schedule o k response
func (o *UpdateBackupScheduleOK) Code() int {
	return 200
}

func (o *UpdateBackupScheduleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleOK %s", 200, payload)
}

func (o *UpdateBackupScheduleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleOK %s", 200, payload)
}

func (o *UpdateBackupScheduleOK) GetPayload() *models.HTTPBackupScheduleResponse {
	return o.Payload
}

func (o *UpdateBackupScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPBackupScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupScheduleBadRequest creates a UpdateBackupScheduleBadRequest with default headers values
func NewUpdateBackupScheduleBadRequest() *UpdateBackupScheduleBadRequest {
	return &UpdateBackupScheduleBadRequest{}
}

/*
UpdateBackupScheduleBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type UpdateBackupScheduleBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup schedule bad request response has a 2xx status code
func (o *UpdateBackupScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup schedule bad request response has a 3xx status code
func (o *UpdateBackupScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup schedule bad request response has a 4xx status code
func (o *UpdateBackupScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update backup schedule bad request response has a 5xx status code
func (o *UpdateBackupScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup schedule bad request response a status code equal to that given
func (o *UpdateBackupScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update backup schedule bad request response
func (o *UpdateBackupScheduleBadRequest) Code() int {
	return 400
}

func (o *UpdateBackupScheduleBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleBadRequest %s", 400, payload)
}

func (o *UpdateBackupScheduleBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleBadRequest %s", 400, payload)
}

func (o *UpdateBackupScheduleBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupScheduleNotFound creates a UpdateBackupScheduleNotFound with default headers values
func NewUpdateBackupScheduleNotFound() *UpdateBackupScheduleNotFound {
	return &UpdateBackupScheduleNotFound{}
}

/*
UpdateBackupScheduleNotFound describes a response with status code 404, with default header values.

Schedule not found
*/
type UpdateBackupScheduleNotFound struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup schedule not found response has a 2xx status code
func (o *UpdateBackupScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup schedule not found response has a 3xx status code
func (o *UpdateBackupScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup schedule not found response has a 4xx status code
func (o *UpdateBackupScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update backup schedule not found response has a 5xx status code
func (o *UpdateBackupScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update backup schedule not found response a status code equal to that given
func (o *UpdateBackupScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update backup schedule not found response
func (o *UpdateBackupScheduleNotFound) Code() int {
	return 404
}

func (o *UpdateBackupScheduleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleNotFound %s", 404, payload)
}

func (o *UpdateBackupScheduleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleNotFound %s", 404, payload)
}

func (o *UpdateBackupScheduleNotFound) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateBackupScheduleInternalServerError creates a UpdateBackupScheduleInternalServerError with default headers values
func NewUpdateBackupScheduleInternalServerError() *UpdateBackupScheduleInternalServerError {
	return &UpdateBackupScheduleInternalServerError{}
}

/*
UpdateBackupScheduleInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateBackupScheduleInternalServerError struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this update backup schedule internal server error response has a 2xx status code
func (o *UpdateBackupScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update backup schedule internal server error response has a 3xx status code
func (o *UpdateBackupScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update backup schedule internal server error response has a 4xx status code
func (o *UpdateBackupScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update backup schedule internal server error response has a 5xx status code
func (o *UpdateBackupScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update backup schedule internal server error response a status code equal to that given
func (o *UpdateBackupScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update backup schedule internal server error response
func (o *UpdateBackupScheduleInternalServerError) Code() int {
	return 500
}

func (o *UpdateBackupScheduleInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleInternalServerError %s", 500, payload)
}

func (o *UpdateBackupScheduleInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /backups/schedules/{id}][%d] updateBackupScheduleInternalServerError %s", 500, payload)
}

func (o *UpdateBackupScheduleInternalServerError) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *UpdateBackupScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
