// Code generated by go-swagger; DO NOT EDIT.

package backup_schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup schedules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new backup schedules API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new backup schedules API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for backup schedules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBackupSchedule(params *CreateBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupScheduleCreated, error)

	DeleteBackupSchedule(params *DeleteBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupScheduleNoContent, error)

	DisableBackupSchedule(params *DisableBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableBackupScheduleOK, error)

	EnableBackupSchedule(params *EnableBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableBackupScheduleOK, error)

	GetBackupSchedule(params *GetBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupScheduleOK, error)

	ListBackupSchedules(params *ListBackupSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupSchedulesOK, error)

	UpdateBackupSchedule(params *UpdateBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupScheduleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateBackupSchedule creates a new backup schedule

Create a new backup schedule with the specified configuration
*/
func (a *Client) CreateBackupSchedule(params *CreateBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackupScheduleCreated, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBackupSchedule",
		Method:             "POST",
		PathPattern:        "/backups/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateBackupScheduleCreated)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBackupSchedule deletes a backup schedule

Delete a backup schedule and stop its execution
*/
func (a *Client) DeleteBackupSchedule(params *DeleteBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackupScheduleNoContent, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackupSchedule",
		Method:             "DELETE",
		PathPattern:        "/backups/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteBackupScheduleNoContent)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DisableBackupSchedule disables a backup schedule

Disable a backup schedule to stop it from running
*/
func (a *Client) DisableBackupSchedule(params *DisableBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableBackupScheduleOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDisableBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableBackupSchedule",
		Method:             "PUT",
		PathPattern:        "/backups/schedules/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DisableBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DisableBackupScheduleOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disableBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnableBackupSchedule enables a backup schedule

Enable a backup schedule to start running
*/
func (a *Client) EnableBackupSchedule(params *EnableBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableBackupScheduleOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewEnableBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableBackupSchedule",
		Method:             "PUT",
		PathPattern:        "/backups/schedules/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EnableBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*EnableBackupScheduleOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enableBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBackupSchedule gets a backup schedule by ID

Get detailed information about a specific backup schedule
*/
func (a *Client) GetBackupSchedule(params *GetBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupScheduleOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackupSchedule",
		Method:             "GET",
		PathPattern:        "/backups/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetBackupScheduleOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBackupSchedules lists all backup schedules

Get a list of all backup schedules
*/
func (a *Client) ListBackupSchedules(params *ListBackupSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListBackupSchedulesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListBackupSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBackupSchedules",
		Method:             "GET",
		PathPattern:        "/backups/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBackupSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListBackupSchedulesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBackupSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBackupSchedule updates a backup schedule

Update an existing backup schedule with new configuration
*/
func (a *Client) UpdateBackupSchedule(params *UpdateBackupScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateBackupScheduleOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpdateBackupScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBackupSchedule",
		Method:             "PUT",
		PathPattern:        "/backups/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateBackupScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpdateBackupScheduleOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBackupSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
