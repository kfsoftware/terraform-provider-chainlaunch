// Code generated by go-swagger; DO NOT EDIT.

package key_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// TunePKIMountReader is a Reader for the TunePKIMount structure.
type TunePKIMountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TunePKIMountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewTunePKIMountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTunePKIMountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTunePKIMountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTunePKIMountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /key-providers/{id}/vault/tune-pki] tunePKIMount", response, response.Code())
	}
}

// NewTunePKIMountOK creates a TunePKIMountOK with default headers values
func NewTunePKIMountOK() *TunePKIMountOK {
	return &TunePKIMountOK{}
}

/*
TunePKIMountOK describes a response with status code 200, with default header values.

PKI mount tuned successfully
*/
type TunePKIMountOK struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this tune p k i mount o k response has a 2xx status code
func (o *TunePKIMountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tune p k i mount o k response has a 3xx status code
func (o *TunePKIMountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tune p k i mount o k response has a 4xx status code
func (o *TunePKIMountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this tune p k i mount o k response has a 5xx status code
func (o *TunePKIMountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this tune p k i mount o k response a status code equal to that given
func (o *TunePKIMountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the tune p k i mount o k response
func (o *TunePKIMountOK) Code() int {
	return 200
}

func (o *TunePKIMountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountOK %s", 200, payload)
}

func (o *TunePKIMountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountOK %s", 200, payload)
}

func (o *TunePKIMountOK) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *TunePKIMountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTunePKIMountBadRequest creates a TunePKIMountBadRequest with default headers values
func NewTunePKIMountBadRequest() *TunePKIMountBadRequest {
	return &TunePKIMountBadRequest{}
}

/*
TunePKIMountBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type TunePKIMountBadRequest struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this tune p k i mount bad request response has a 2xx status code
func (o *TunePKIMountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tune p k i mount bad request response has a 3xx status code
func (o *TunePKIMountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tune p k i mount bad request response has a 4xx status code
func (o *TunePKIMountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this tune p k i mount bad request response has a 5xx status code
func (o *TunePKIMountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this tune p k i mount bad request response a status code equal to that given
func (o *TunePKIMountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the tune p k i mount bad request response
func (o *TunePKIMountBadRequest) Code() int {
	return 400
}

func (o *TunePKIMountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountBadRequest %s", 400, payload)
}

func (o *TunePKIMountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountBadRequest %s", 400, payload)
}

func (o *TunePKIMountBadRequest) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *TunePKIMountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTunePKIMountNotFound creates a TunePKIMountNotFound with default headers values
func NewTunePKIMountNotFound() *TunePKIMountNotFound {
	return &TunePKIMountNotFound{}
}

/*
TunePKIMountNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type TunePKIMountNotFound struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this tune p k i mount not found response has a 2xx status code
func (o *TunePKIMountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tune p k i mount not found response has a 3xx status code
func (o *TunePKIMountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tune p k i mount not found response has a 4xx status code
func (o *TunePKIMountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this tune p k i mount not found response has a 5xx status code
func (o *TunePKIMountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this tune p k i mount not found response a status code equal to that given
func (o *TunePKIMountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the tune p k i mount not found response
func (o *TunePKIMountNotFound) Code() int {
	return 404
}

func (o *TunePKIMountNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountNotFound %s", 404, payload)
}

func (o *TunePKIMountNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountNotFound %s", 404, payload)
}

func (o *TunePKIMountNotFound) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *TunePKIMountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewTunePKIMountInternalServerError creates a TunePKIMountInternalServerError with default headers values
func NewTunePKIMountInternalServerError() *TunePKIMountInternalServerError {
	return &TunePKIMountInternalServerError{}
}

/*
TunePKIMountInternalServerError describes a response with status code 500, with default header values.

Failed to tune PKI mount
*/
type TunePKIMountInternalServerError struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this tune p k i mount internal server error response has a 2xx status code
func (o *TunePKIMountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tune p k i mount internal server error response has a 3xx status code
func (o *TunePKIMountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tune p k i mount internal server error response has a 4xx status code
func (o *TunePKIMountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this tune p k i mount internal server error response has a 5xx status code
func (o *TunePKIMountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this tune p k i mount internal server error response a status code equal to that given
func (o *TunePKIMountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the tune p k i mount internal server error response
func (o *TunePKIMountInternalServerError) Code() int {
	return 500
}

func (o *TunePKIMountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountInternalServerError %s", 500, payload)
}

func (o *TunePKIMountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/tune-pki][%d] tunePKIMountInternalServerError %s", 500, payload)
}

func (o *TunePKIMountInternalServerError) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *TunePKIMountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
