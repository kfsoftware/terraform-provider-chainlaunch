// Code generated by go-swagger; DO NOT EDIT.

package key_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UnsealVaultReader is a Reader for the UnsealVault structure.
type UnsealVaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnsealVaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUnsealVaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnsealVaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnsealVaultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnsealVaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /key-providers/{id}/vault/unseal] unsealVault", response, response.Code())
	}
}

// NewUnsealVaultOK creates a UnsealVaultOK with default headers values
func NewUnsealVaultOK() *UnsealVaultOK {
	return &UnsealVaultOK{}
}

/*
UnsealVaultOK describes a response with status code 200, with default header values.

Vault successfully unsealed
*/
type UnsealVaultOK struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this unseal vault o k response has a 2xx status code
func (o *UnsealVaultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unseal vault o k response has a 3xx status code
func (o *UnsealVaultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unseal vault o k response has a 4xx status code
func (o *UnsealVaultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unseal vault o k response has a 5xx status code
func (o *UnsealVaultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this unseal vault o k response a status code equal to that given
func (o *UnsealVaultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the unseal vault o k response
func (o *UnsealVaultOK) Code() int {
	return 200
}

func (o *UnsealVaultOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultOK %s", 200, payload)
}

func (o *UnsealVaultOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultOK %s", 200, payload)
}

func (o *UnsealVaultOK) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *UnsealVaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUnsealVaultBadRequest creates a UnsealVaultBadRequest with default headers values
func NewUnsealVaultBadRequest() *UnsealVaultBadRequest {
	return &UnsealVaultBadRequest{}
}

/*
UnsealVaultBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type UnsealVaultBadRequest struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this unseal vault bad request response has a 2xx status code
func (o *UnsealVaultBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unseal vault bad request response has a 3xx status code
func (o *UnsealVaultBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unseal vault bad request response has a 4xx status code
func (o *UnsealVaultBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this unseal vault bad request response has a 5xx status code
func (o *UnsealVaultBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this unseal vault bad request response a status code equal to that given
func (o *UnsealVaultBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the unseal vault bad request response
func (o *UnsealVaultBadRequest) Code() int {
	return 400
}

func (o *UnsealVaultBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultBadRequest %s", 400, payload)
}

func (o *UnsealVaultBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultBadRequest %s", 400, payload)
}

func (o *UnsealVaultBadRequest) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *UnsealVaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUnsealVaultNotFound creates a UnsealVaultNotFound with default headers values
func NewUnsealVaultNotFound() *UnsealVaultNotFound {
	return &UnsealVaultNotFound{}
}

/*
UnsealVaultNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type UnsealVaultNotFound struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this unseal vault not found response has a 2xx status code
func (o *UnsealVaultNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unseal vault not found response has a 3xx status code
func (o *UnsealVaultNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unseal vault not found response has a 4xx status code
func (o *UnsealVaultNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unseal vault not found response has a 5xx status code
func (o *UnsealVaultNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unseal vault not found response a status code equal to that given
func (o *UnsealVaultNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the unseal vault not found response
func (o *UnsealVaultNotFound) Code() int {
	return 404
}

func (o *UnsealVaultNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultNotFound %s", 404, payload)
}

func (o *UnsealVaultNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultNotFound %s", 404, payload)
}

func (o *UnsealVaultNotFound) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *UnsealVaultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUnsealVaultInternalServerError creates a UnsealVaultInternalServerError with default headers values
func NewUnsealVaultInternalServerError() *UnsealVaultInternalServerError {
	return &UnsealVaultInternalServerError{}
}

/*
UnsealVaultInternalServerError describes a response with status code 500, with default header values.

Failed to unseal
*/
type UnsealVaultInternalServerError struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this unseal vault internal server error response has a 2xx status code
func (o *UnsealVaultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unseal vault internal server error response has a 3xx status code
func (o *UnsealVaultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unseal vault internal server error response has a 4xx status code
func (o *UnsealVaultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unseal vault internal server error response has a 5xx status code
func (o *UnsealVaultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unseal vault internal server error response a status code equal to that given
func (o *UnsealVaultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the unseal vault internal server error response
func (o *UnsealVaultInternalServerError) Code() int {
	return 500
}

func (o *UnsealVaultInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultInternalServerError %s", 500, payload)
}

func (o *UnsealVaultInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/unseal][%d] unsealVaultInternalServerError %s", 500, payload)
}

func (o *UnsealVaultInternalServerError) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *UnsealVaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
