// Code generated by go-swagger; DO NOT EDIT.

package key_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StopVaultReader is a Reader for the StopVault structure.
type StopVaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopVaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStopVaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopVaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopVaultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStopVaultConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopVaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /key-providers/{id}/vault/stop] stopVault", response, response.Code())
	}
}

// NewStopVaultOK creates a StopVaultOK with default headers values
func NewStopVaultOK() *StopVaultOK {
	return &StopVaultOK{}
}

/*
StopVaultOK describes a response with status code 200, with default header values.

Success message
*/
type StopVaultOK struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this stop vault o k response has a 2xx status code
func (o *StopVaultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop vault o k response has a 3xx status code
func (o *StopVaultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop vault o k response has a 4xx status code
func (o *StopVaultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop vault o k response has a 5xx status code
func (o *StopVaultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop vault o k response a status code equal to that given
func (o *StopVaultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop vault o k response
func (o *StopVaultOK) Code() int {
	return 200
}

func (o *StopVaultOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultOK %s", 200, payload)
}

func (o *StopVaultOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultOK %s", 200, payload)
}

func (o *StopVaultOK) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StopVaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopVaultBadRequest creates a StopVaultBadRequest with default headers values
func NewStopVaultBadRequest() *StopVaultBadRequest {
	return &StopVaultBadRequest{}
}

/*
StopVaultBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type StopVaultBadRequest struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this stop vault bad request response has a 2xx status code
func (o *StopVaultBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop vault bad request response has a 3xx status code
func (o *StopVaultBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop vault bad request response has a 4xx status code
func (o *StopVaultBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop vault bad request response has a 5xx status code
func (o *StopVaultBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop vault bad request response a status code equal to that given
func (o *StopVaultBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop vault bad request response
func (o *StopVaultBadRequest) Code() int {
	return 400
}

func (o *StopVaultBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultBadRequest %s", 400, payload)
}

func (o *StopVaultBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultBadRequest %s", 400, payload)
}

func (o *StopVaultBadRequest) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StopVaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopVaultNotFound creates a StopVaultNotFound with default headers values
func NewStopVaultNotFound() *StopVaultNotFound {
	return &StopVaultNotFound{}
}

/*
StopVaultNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type StopVaultNotFound struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this stop vault not found response has a 2xx status code
func (o *StopVaultNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop vault not found response has a 3xx status code
func (o *StopVaultNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop vault not found response has a 4xx status code
func (o *StopVaultNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop vault not found response has a 5xx status code
func (o *StopVaultNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop vault not found response a status code equal to that given
func (o *StopVaultNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop vault not found response
func (o *StopVaultNotFound) Code() int {
	return 404
}

func (o *StopVaultNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultNotFound %s", 404, payload)
}

func (o *StopVaultNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultNotFound %s", 404, payload)
}

func (o *StopVaultNotFound) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StopVaultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopVaultConflict creates a StopVaultConflict with default headers values
func NewStopVaultConflict() *StopVaultConflict {
	return &StopVaultConflict{}
}

/*
StopVaultConflict describes a response with status code 409, with default header values.

Conflict - not running
*/
type StopVaultConflict struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this stop vault conflict response has a 2xx status code
func (o *StopVaultConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop vault conflict response has a 3xx status code
func (o *StopVaultConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop vault conflict response has a 4xx status code
func (o *StopVaultConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop vault conflict response has a 5xx status code
func (o *StopVaultConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this stop vault conflict response a status code equal to that given
func (o *StopVaultConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the stop vault conflict response
func (o *StopVaultConflict) Code() int {
	return 409
}

func (o *StopVaultConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultConflict %s", 409, payload)
}

func (o *StopVaultConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultConflict %s", 409, payload)
}

func (o *StopVaultConflict) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StopVaultConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopVaultInternalServerError creates a StopVaultInternalServerError with default headers values
func NewStopVaultInternalServerError() *StopVaultInternalServerError {
	return &StopVaultInternalServerError{}
}

/*
StopVaultInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopVaultInternalServerError struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this stop vault internal server error response has a 2xx status code
func (o *StopVaultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop vault internal server error response has a 3xx status code
func (o *StopVaultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop vault internal server error response has a 4xx status code
func (o *StopVaultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop vault internal server error response has a 5xx status code
func (o *StopVaultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop vault internal server error response a status code equal to that given
func (o *StopVaultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop vault internal server error response
func (o *StopVaultInternalServerError) Code() int {
	return 500
}

func (o *StopVaultInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultInternalServerError %s", 500, payload)
}

func (o *StopVaultInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/stop][%d] stopVaultInternalServerError %s", 500, payload)
}

func (o *StopVaultInternalServerError) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StopVaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
