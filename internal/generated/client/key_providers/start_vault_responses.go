// Code generated by go-swagger; DO NOT EDIT.

package key_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StartVaultReader is a Reader for the StartVault structure.
type StartVaultReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartVaultReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStartVaultOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartVaultBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartVaultNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartVaultConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartVaultInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /key-providers/{id}/vault/start] startVault", response, response.Code())
	}
}

// NewStartVaultOK creates a StartVaultOK with default headers values
func NewStartVaultOK() *StartVaultOK {
	return &StartVaultOK{}
}

/*
StartVaultOK describes a response with status code 200, with default header values.

Success message
*/
type StartVaultOK struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this start vault o k response has a 2xx status code
func (o *StartVaultOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start vault o k response has a 3xx status code
func (o *StartVaultOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start vault o k response has a 4xx status code
func (o *StartVaultOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start vault o k response has a 5xx status code
func (o *StartVaultOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start vault o k response a status code equal to that given
func (o *StartVaultOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start vault o k response
func (o *StartVaultOK) Code() int {
	return 200
}

func (o *StartVaultOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultOK %s", 200, payload)
}

func (o *StartVaultOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultOK %s", 200, payload)
}

func (o *StartVaultOK) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StartVaultOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartVaultBadRequest creates a StartVaultBadRequest with default headers values
func NewStartVaultBadRequest() *StartVaultBadRequest {
	return &StartVaultBadRequest{}
}

/*
StartVaultBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type StartVaultBadRequest struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this start vault bad request response has a 2xx status code
func (o *StartVaultBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start vault bad request response has a 3xx status code
func (o *StartVaultBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start vault bad request response has a 4xx status code
func (o *StartVaultBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start vault bad request response has a 5xx status code
func (o *StartVaultBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start vault bad request response a status code equal to that given
func (o *StartVaultBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start vault bad request response
func (o *StartVaultBadRequest) Code() int {
	return 400
}

func (o *StartVaultBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultBadRequest %s", 400, payload)
}

func (o *StartVaultBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultBadRequest %s", 400, payload)
}

func (o *StartVaultBadRequest) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StartVaultBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartVaultNotFound creates a StartVaultNotFound with default headers values
func NewStartVaultNotFound() *StartVaultNotFound {
	return &StartVaultNotFound{}
}

/*
StartVaultNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type StartVaultNotFound struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this start vault not found response has a 2xx status code
func (o *StartVaultNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start vault not found response has a 3xx status code
func (o *StartVaultNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start vault not found response has a 4xx status code
func (o *StartVaultNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start vault not found response has a 5xx status code
func (o *StartVaultNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start vault not found response a status code equal to that given
func (o *StartVaultNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start vault not found response
func (o *StartVaultNotFound) Code() int {
	return 404
}

func (o *StartVaultNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultNotFound %s", 404, payload)
}

func (o *StartVaultNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultNotFound %s", 404, payload)
}

func (o *StartVaultNotFound) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StartVaultNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartVaultConflict creates a StartVaultConflict with default headers values
func NewStartVaultConflict() *StartVaultConflict {
	return &StartVaultConflict{}
}

/*
StartVaultConflict describes a response with status code 409, with default header values.

Conflict - already running
*/
type StartVaultConflict struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this start vault conflict response has a 2xx status code
func (o *StartVaultConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start vault conflict response has a 3xx status code
func (o *StartVaultConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start vault conflict response has a 4xx status code
func (o *StartVaultConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this start vault conflict response has a 5xx status code
func (o *StartVaultConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this start vault conflict response a status code equal to that given
func (o *StartVaultConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the start vault conflict response
func (o *StartVaultConflict) Code() int {
	return 409
}

func (o *StartVaultConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultConflict %s", 409, payload)
}

func (o *StartVaultConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultConflict %s", 409, payload)
}

func (o *StartVaultConflict) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StartVaultConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartVaultInternalServerError creates a StartVaultInternalServerError with default headers values
func NewStartVaultInternalServerError() *StartVaultInternalServerError {
	return &StartVaultInternalServerError{}
}

/*
StartVaultInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StartVaultInternalServerError struct {
	Payload *models.HandlerVaultOperationResponse
}

// IsSuccess returns true when this start vault internal server error response has a 2xx status code
func (o *StartVaultInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start vault internal server error response has a 3xx status code
func (o *StartVaultInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start vault internal server error response has a 4xx status code
func (o *StartVaultInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start vault internal server error response has a 5xx status code
func (o *StartVaultInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start vault internal server error response a status code equal to that given
func (o *StartVaultInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start vault internal server error response
func (o *StartVaultInternalServerError) Code() int {
	return 500
}

func (o *StartVaultInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultInternalServerError %s", 500, payload)
}

func (o *StartVaultInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers/{id}/vault/start][%d] startVaultInternalServerError %s", 500, payload)
}

func (o *StartVaultInternalServerError) GetPayload() *models.HandlerVaultOperationResponse {
	return o.Payload
}

func (o *StartVaultInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HandlerVaultOperationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
