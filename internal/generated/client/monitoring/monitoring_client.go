// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitoring API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new monitoring API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new monitoring API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for monitoring API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetNodeHealth(params *GetNodeHealthParams, opts ...ClientOption) (*GetNodeHealthOK, error)

	PingAllNodes(params *PingAllNodesParams, opts ...ClientOption) (*PingAllNodesOK, error)

	TriggerAllNodesCheck(params *TriggerAllNodesCheckParams, opts ...ClientOption) (*TriggerAllNodesCheckOK, error)

	TriggerNodeCheck(params *TriggerNodeCheckParams, opts ...ClientOption) (*TriggerNodeCheckOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetNodeHealth gets health status of a specific node

Retrieve the current health status of a node from the monitoring service
*/
func (a *Client) GetNodeHealth(params *GetNodeHealthParams, opts ...ClientOption) (*GetNodeHealthOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetNodeHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNodeHealth",
		Method:             "GET",
		PathPattern:        "/monitoring/nodes/{id}/health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetNodeHealthOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeHealth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PingAllNodes pings all monitored nodes

Get the current health status of all nodes being monitored
*/
func (a *Client) PingAllNodes(params *PingAllNodesParams, opts ...ClientOption) (*PingAllNodesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewPingAllNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pingAllNodes",
		Method:             "GET",
		PathPattern:        "/monitoring/health/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PingAllNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*PingAllNodesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pingAllNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerAllNodesCheck triggers immediate health check for all nodes

Trigger an immediate health check for all monitored nodes
*/
func (a *Client) TriggerAllNodesCheck(params *TriggerAllNodesCheckParams, opts ...ClientOption) (*TriggerAllNodesCheckOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewTriggerAllNodesCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerAllNodesCheck",
		Method:             "POST",
		PathPattern:        "/monitoring/health/check-all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TriggerAllNodesCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*TriggerAllNodesCheckOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerAllNodesCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerNodeCheck triggers immediate health check for a node

Trigger an immediate health check for a specific node
*/
func (a *Client) TriggerNodeCheck(params *TriggerNodeCheckParams, opts ...ClientOption) (*TriggerNodeCheckOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewTriggerNodeCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerNodeCheck",
		Method:             "POST",
		PathPattern:        "/monitoring/nodes/{id}/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TriggerNodeCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*TriggerNodeCheckOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerNodeCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
