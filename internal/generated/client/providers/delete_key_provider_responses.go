// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteKeyProviderReader is a Reader for the DeleteKeyProvider structure.
type DeleteKeyProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKeyProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteKeyProviderNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteKeyProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteKeyProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteKeyProviderConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteKeyProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /key-providers/{id}] deleteKeyProvider", response, response.Code())
	}
}

// NewDeleteKeyProviderNoContent creates a DeleteKeyProviderNoContent with default headers values
func NewDeleteKeyProviderNoContent() *DeleteKeyProviderNoContent {
	return &DeleteKeyProviderNoContent{}
}

/*
DeleteKeyProviderNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteKeyProviderNoContent struct {
}

// IsSuccess returns true when this delete key provider no content response has a 2xx status code
func (o *DeleteKeyProviderNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete key provider no content response has a 3xx status code
func (o *DeleteKeyProviderNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key provider no content response has a 4xx status code
func (o *DeleteKeyProviderNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete key provider no content response has a 5xx status code
func (o *DeleteKeyProviderNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key provider no content response a status code equal to that given
func (o *DeleteKeyProviderNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete key provider no content response
func (o *DeleteKeyProviderNoContent) Code() int {
	return 204
}

func (o *DeleteKeyProviderNoContent) Error() string {
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderNoContent", 204)
}

func (o *DeleteKeyProviderNoContent) String() string {
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderNoContent", 204)
}

func (o *DeleteKeyProviderNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKeyProviderBadRequest creates a DeleteKeyProviderBadRequest with default headers values
func NewDeleteKeyProviderBadRequest() *DeleteKeyProviderBadRequest {
	return &DeleteKeyProviderBadRequest{}
}

/*
DeleteKeyProviderBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type DeleteKeyProviderBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete key provider bad request response has a 2xx status code
func (o *DeleteKeyProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key provider bad request response has a 3xx status code
func (o *DeleteKeyProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key provider bad request response has a 4xx status code
func (o *DeleteKeyProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key provider bad request response has a 5xx status code
func (o *DeleteKeyProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key provider bad request response a status code equal to that given
func (o *DeleteKeyProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete key provider bad request response
func (o *DeleteKeyProviderBadRequest) Code() int {
	return 400
}

func (o *DeleteKeyProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderBadRequest %s", 400, payload)
}

func (o *DeleteKeyProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderBadRequest %s", 400, payload)
}

func (o *DeleteKeyProviderBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteKeyProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteKeyProviderNotFound creates a DeleteKeyProviderNotFound with default headers values
func NewDeleteKeyProviderNotFound() *DeleteKeyProviderNotFound {
	return &DeleteKeyProviderNotFound{}
}

/*
DeleteKeyProviderNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type DeleteKeyProviderNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete key provider not found response has a 2xx status code
func (o *DeleteKeyProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key provider not found response has a 3xx status code
func (o *DeleteKeyProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key provider not found response has a 4xx status code
func (o *DeleteKeyProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key provider not found response has a 5xx status code
func (o *DeleteKeyProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key provider not found response a status code equal to that given
func (o *DeleteKeyProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete key provider not found response
func (o *DeleteKeyProviderNotFound) Code() int {
	return 404
}

func (o *DeleteKeyProviderNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderNotFound %s", 404, payload)
}

func (o *DeleteKeyProviderNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderNotFound %s", 404, payload)
}

func (o *DeleteKeyProviderNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteKeyProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteKeyProviderConflict creates a DeleteKeyProviderConflict with default headers values
func NewDeleteKeyProviderConflict() *DeleteKeyProviderConflict {
	return &DeleteKeyProviderConflict{}
}

/*
DeleteKeyProviderConflict describes a response with status code 409, with default header values.

Provider has existing keys
*/
type DeleteKeyProviderConflict struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete key provider conflict response has a 2xx status code
func (o *DeleteKeyProviderConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key provider conflict response has a 3xx status code
func (o *DeleteKeyProviderConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key provider conflict response has a 4xx status code
func (o *DeleteKeyProviderConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete key provider conflict response has a 5xx status code
func (o *DeleteKeyProviderConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete key provider conflict response a status code equal to that given
func (o *DeleteKeyProviderConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete key provider conflict response
func (o *DeleteKeyProviderConflict) Code() int {
	return 409
}

func (o *DeleteKeyProviderConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderConflict %s", 409, payload)
}

func (o *DeleteKeyProviderConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderConflict %s", 409, payload)
}

func (o *DeleteKeyProviderConflict) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteKeyProviderConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewDeleteKeyProviderInternalServerError creates a DeleteKeyProviderInternalServerError with default headers values
func NewDeleteKeyProviderInternalServerError() *DeleteKeyProviderInternalServerError {
	return &DeleteKeyProviderInternalServerError{}
}

/*
DeleteKeyProviderInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteKeyProviderInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this delete key provider internal server error response has a 2xx status code
func (o *DeleteKeyProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete key provider internal server error response has a 3xx status code
func (o *DeleteKeyProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete key provider internal server error response has a 4xx status code
func (o *DeleteKeyProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete key provider internal server error response has a 5xx status code
func (o *DeleteKeyProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete key provider internal server error response a status code equal to that given
func (o *DeleteKeyProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete key provider internal server error response
func (o *DeleteKeyProviderInternalServerError) Code() int {
	return 500
}

func (o *DeleteKeyProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderInternalServerError %s", 500, payload)
}

func (o *DeleteKeyProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /key-providers/{id}][%d] deleteKeyProviderInternalServerError %s", 500, payload)
}

func (o *DeleteKeyProviderInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *DeleteKeyProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
