// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// CreateKeyProviderReader is a Reader for the CreateKeyProvider structure.
type CreateKeyProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateKeyProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 201:
		result := NewCreateKeyProviderCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateKeyProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateKeyProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /key-providers] createKeyProvider", response, response.Code())
	}
}

// NewCreateKeyProviderCreated creates a CreateKeyProviderCreated with default headers values
func NewCreateKeyProviderCreated() *CreateKeyProviderCreated {
	return &CreateKeyProviderCreated{}
}

/*
CreateKeyProviderCreated describes a response with status code 201, with default header values.

Created
*/
type CreateKeyProviderCreated struct {
	Payload *models.ModelsProviderResponse
}

// IsSuccess returns true when this create key provider created response has a 2xx status code
func (o *CreateKeyProviderCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create key provider created response has a 3xx status code
func (o *CreateKeyProviderCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create key provider created response has a 4xx status code
func (o *CreateKeyProviderCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create key provider created response has a 5xx status code
func (o *CreateKeyProviderCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create key provider created response a status code equal to that given
func (o *CreateKeyProviderCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create key provider created response
func (o *CreateKeyProviderCreated) Code() int {
	return 201
}

func (o *CreateKeyProviderCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderCreated %s", 201, payload)
}

func (o *CreateKeyProviderCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderCreated %s", 201, payload)
}

func (o *CreateKeyProviderCreated) GetPayload() *models.ModelsProviderResponse {
	return o.Payload
}

func (o *CreateKeyProviderCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateKeyProviderBadRequest creates a CreateKeyProviderBadRequest with default headers values
func NewCreateKeyProviderBadRequest() *CreateKeyProviderBadRequest {
	return &CreateKeyProviderBadRequest{}
}

/*
CreateKeyProviderBadRequest describes a response with status code 400, with default header values.

Invalid request body or validation error
*/
type CreateKeyProviderBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this create key provider bad request response has a 2xx status code
func (o *CreateKeyProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create key provider bad request response has a 3xx status code
func (o *CreateKeyProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create key provider bad request response has a 4xx status code
func (o *CreateKeyProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create key provider bad request response has a 5xx status code
func (o *CreateKeyProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create key provider bad request response a status code equal to that given
func (o *CreateKeyProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create key provider bad request response
func (o *CreateKeyProviderBadRequest) Code() int {
	return 400
}

func (o *CreateKeyProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderBadRequest %s", 400, payload)
}

func (o *CreateKeyProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderBadRequest %s", 400, payload)
}

func (o *CreateKeyProviderBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *CreateKeyProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewCreateKeyProviderInternalServerError creates a CreateKeyProviderInternalServerError with default headers values
func NewCreateKeyProviderInternalServerError() *CreateKeyProviderInternalServerError {
	return &CreateKeyProviderInternalServerError{}
}

/*
CreateKeyProviderInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CreateKeyProviderInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this create key provider internal server error response has a 2xx status code
func (o *CreateKeyProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create key provider internal server error response has a 3xx status code
func (o *CreateKeyProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create key provider internal server error response has a 4xx status code
func (o *CreateKeyProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create key provider internal server error response has a 5xx status code
func (o *CreateKeyProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create key provider internal server error response a status code equal to that given
func (o *CreateKeyProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create key provider internal server error response
func (o *CreateKeyProviderInternalServerError) Code() int {
	return 500
}

func (o *CreateKeyProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderInternalServerError %s", 500, payload)
}

func (o *CreateKeyProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /key-providers][%d] createKeyProviderInternalServerError %s", 500, payload)
}

func (o *CreateKeyProviderInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *CreateKeyProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
