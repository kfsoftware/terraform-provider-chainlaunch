// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetKeyProviderReader is a Reader for the GetKeyProvider structure.
type GetKeyProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKeyProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetKeyProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetKeyProviderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKeyProviderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetKeyProviderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /key-providers/{id}] getKeyProvider", response, response.Code())
	}
}

// NewGetKeyProviderOK creates a GetKeyProviderOK with default headers values
func NewGetKeyProviderOK() *GetKeyProviderOK {
	return &GetKeyProviderOK{}
}

/*
GetKeyProviderOK describes a response with status code 200, with default header values.

OK
*/
type GetKeyProviderOK struct {
	Payload *models.ModelsProviderResponse
}

// IsSuccess returns true when this get key provider o k response has a 2xx status code
func (o *GetKeyProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get key provider o k response has a 3xx status code
func (o *GetKeyProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key provider o k response has a 4xx status code
func (o *GetKeyProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get key provider o k response has a 5xx status code
func (o *GetKeyProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get key provider o k response a status code equal to that given
func (o *GetKeyProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get key provider o k response
func (o *GetKeyProviderOK) Code() int {
	return 200
}

func (o *GetKeyProviderOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderOK %s", 200, payload)
}

func (o *GetKeyProviderOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderOK %s", 200, payload)
}

func (o *GetKeyProviderOK) GetPayload() *models.ModelsProviderResponse {
	return o.Payload
}

func (o *GetKeyProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsProviderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetKeyProviderBadRequest creates a GetKeyProviderBadRequest with default headers values
func NewGetKeyProviderBadRequest() *GetKeyProviderBadRequest {
	return &GetKeyProviderBadRequest{}
}

/*
GetKeyProviderBadRequest describes a response with status code 400, with default header values.

Invalid ID
*/
type GetKeyProviderBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get key provider bad request response has a 2xx status code
func (o *GetKeyProviderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key provider bad request response has a 3xx status code
func (o *GetKeyProviderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key provider bad request response has a 4xx status code
func (o *GetKeyProviderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key provider bad request response has a 5xx status code
func (o *GetKeyProviderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get key provider bad request response a status code equal to that given
func (o *GetKeyProviderBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get key provider bad request response
func (o *GetKeyProviderBadRequest) Code() int {
	return 400
}

func (o *GetKeyProviderBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderBadRequest %s", 400, payload)
}

func (o *GetKeyProviderBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderBadRequest %s", 400, payload)
}

func (o *GetKeyProviderBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetKeyProviderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetKeyProviderNotFound creates a GetKeyProviderNotFound with default headers values
func NewGetKeyProviderNotFound() *GetKeyProviderNotFound {
	return &GetKeyProviderNotFound{}
}

/*
GetKeyProviderNotFound describes a response with status code 404, with default header values.

Provider not found
*/
type GetKeyProviderNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this get key provider not found response has a 2xx status code
func (o *GetKeyProviderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key provider not found response has a 3xx status code
func (o *GetKeyProviderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key provider not found response has a 4xx status code
func (o *GetKeyProviderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key provider not found response has a 5xx status code
func (o *GetKeyProviderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get key provider not found response a status code equal to that given
func (o *GetKeyProviderNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get key provider not found response
func (o *GetKeyProviderNotFound) Code() int {
	return 404
}

func (o *GetKeyProviderNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderNotFound %s", 404, payload)
}

func (o *GetKeyProviderNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderNotFound %s", 404, payload)
}

func (o *GetKeyProviderNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetKeyProviderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetKeyProviderInternalServerError creates a GetKeyProviderInternalServerError with default headers values
func NewGetKeyProviderInternalServerError() *GetKeyProviderInternalServerError {
	return &GetKeyProviderInternalServerError{}
}

/*
GetKeyProviderInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetKeyProviderInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get key provider internal server error response has a 2xx status code
func (o *GetKeyProviderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key provider internal server error response has a 3xx status code
func (o *GetKeyProviderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key provider internal server error response has a 4xx status code
func (o *GetKeyProviderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get key provider internal server error response has a 5xx status code
func (o *GetKeyProviderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get key provider internal server error response a status code equal to that given
func (o *GetKeyProviderInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get key provider internal server error response
func (o *GetKeyProviderInternalServerError) Code() int {
	return 500
}

func (o *GetKeyProviderInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderInternalServerError %s", 500, payload)
}

func (o *GetKeyProviderInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /key-providers/{id}][%d] getKeyProviderInternalServerError %s", 500, payload)
}

func (o *GetKeyProviderInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetKeyProviderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
