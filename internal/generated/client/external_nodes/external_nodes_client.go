// Code generated by go-swagger; DO NOT EDIT.

package external_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new external nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new external nodes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new external nodes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for external nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteExternalBesuNode(params *DeleteExternalBesuNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalBesuNodeOK, error)

	DeleteExternalFabricOrderer(params *DeleteExternalFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricOrdererOK, error)

	DeleteExternalFabricOrganization(params *DeleteExternalFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricOrganizationOK, error)

	DeleteExternalFabricPeer(params *DeleteExternalFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricPeerOK, error)

	ListAllExternalNodes(params *ListAllExternalNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllExternalNodesOK, error)

	ListExternalBesuNodes(params *ListExternalBesuNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalBesuNodesOK, error)

	ListExternalFabricOrderers(params *ListExternalFabricOrderersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricOrderersOK, error)

	ListExternalFabricOrganizations(params *ListExternalFabricOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricOrganizationsOK, error)

	ListExternalFabricPeers(params *ListExternalFabricPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricPeersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteExternalBesuNode deletes an external besu node
*/
func (a *Client) DeleteExternalBesuNode(params *DeleteExternalBesuNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalBesuNodeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteExternalBesuNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalBesuNode",
		Method:             "DELETE",
		PathPattern:        "/external-nodes/besu-nodes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteExternalBesuNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteExternalBesuNodeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalBesuNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExternalFabricOrderer deletes an external fabric orderer
*/
func (a *Client) DeleteExternalFabricOrderer(params *DeleteExternalFabricOrdererParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricOrdererOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteExternalFabricOrdererParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalFabricOrderer",
		Method:             "DELETE",
		PathPattern:        "/external-nodes/fabric-orderers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteExternalFabricOrdererReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteExternalFabricOrdererOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalFabricOrderer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExternalFabricOrganization deletes an external fabric organization
*/
func (a *Client) DeleteExternalFabricOrganization(params *DeleteExternalFabricOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricOrganizationOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteExternalFabricOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalFabricOrganization",
		Method:             "DELETE",
		PathPattern:        "/external-nodes/fabric-organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteExternalFabricOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteExternalFabricOrganizationOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalFabricOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExternalFabricPeer deletes an external fabric peer
*/
func (a *Client) DeleteExternalFabricPeer(params *DeleteExternalFabricPeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalFabricPeerOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteExternalFabricPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalFabricPeer",
		Method:             "DELETE",
		PathPattern:        "/external-nodes/fabric-peers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteExternalFabricPeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteExternalFabricPeerOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalFabricPeer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAllExternalNodes lists all external nodes all types
*/
func (a *Client) ListAllExternalNodes(params *ListAllExternalNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllExternalNodesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListAllExternalNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAllExternalNodes",
		Method:             "GET",
		PathPattern:        "/external-nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAllExternalNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListAllExternalNodesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllExternalNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExternalBesuNodes lists all external besu nodes
*/
func (a *Client) ListExternalBesuNodes(params *ListExternalBesuNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalBesuNodesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListExternalBesuNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExternalBesuNodes",
		Method:             "GET",
		PathPattern:        "/external-nodes/besu-nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListExternalBesuNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListExternalBesuNodesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExternalBesuNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExternalFabricOrderers lists all external fabric orderers
*/
func (a *Client) ListExternalFabricOrderers(params *ListExternalFabricOrderersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricOrderersOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListExternalFabricOrderersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExternalFabricOrderers",
		Method:             "GET",
		PathPattern:        "/external-nodes/fabric-orderers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListExternalFabricOrderersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListExternalFabricOrderersOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExternalFabricOrderers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExternalFabricOrganizations lists all external fabric organizations
*/
func (a *Client) ListExternalFabricOrganizations(params *ListExternalFabricOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricOrganizationsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListExternalFabricOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExternalFabricOrganizations",
		Method:             "GET",
		PathPattern:        "/external-nodes/fabric-organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListExternalFabricOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListExternalFabricOrganizationsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExternalFabricOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExternalFabricPeers lists all external fabric peers
*/
func (a *Client) ListExternalFabricPeers(params *ListExternalFabricPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListExternalFabricPeersOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListExternalFabricPeersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listExternalFabricPeers",
		Method:             "GET",
		PathPattern:        "/external-nodes/fabric-peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListExternalFabricPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListExternalFabricPeersOK)
	if ok {
		return success, nil
	}

	// unexpected success response.

	// no default response is defined.
	//
	// safeguard: normally, in the absence of a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExternalFabricPeers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
