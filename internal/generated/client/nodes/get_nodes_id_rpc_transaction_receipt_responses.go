// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCTransactionReceiptReader is a Reader for the GetNodesIDRPCTransactionReceipt structure.
type GetNodesIDRPCTransactionReceiptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCTransactionReceiptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCTransactionReceiptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCTransactionReceiptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCTransactionReceiptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCTransactionReceiptInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/transaction-receipt] GetNodesIDRPCTransactionReceipt", response, response.Code())
	}
}

// NewGetNodesIDRPCTransactionReceiptOK creates a GetNodesIDRPCTransactionReceiptOK with default headers values
func NewGetNodesIDRPCTransactionReceiptOK() *GetNodesIDRPCTransactionReceiptOK {
	return &GetNodesIDRPCTransactionReceiptOK{}
}

/*
GetNodesIDRPCTransactionReceiptOK describes a response with status code 200, with default header values.

Transaction receipt
*/
type GetNodesIDRPCTransactionReceiptOK struct {
	Payload any
}

// IsSuccess returns true when this get nodes Id Rpc transaction receipt o k response has a 2xx status code
func (o *GetNodesIDRPCTransactionReceiptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc transaction receipt o k response has a 3xx status code
func (o *GetNodesIDRPCTransactionReceiptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction receipt o k response has a 4xx status code
func (o *GetNodesIDRPCTransactionReceiptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc transaction receipt o k response has a 5xx status code
func (o *GetNodesIDRPCTransactionReceiptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction receipt o k response a status code equal to that given
func (o *GetNodesIDRPCTransactionReceiptOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc transaction receipt o k response
func (o *GetNodesIDRPCTransactionReceiptOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCTransactionReceiptOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptOK %s", 200, payload)
}

func (o *GetNodesIDRPCTransactionReceiptOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptOK %s", 200, payload)
}

func (o *GetNodesIDRPCTransactionReceiptOK) GetPayload() any {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionReceiptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionReceiptBadRequest creates a GetNodesIDRPCTransactionReceiptBadRequest with default headers values
func NewGetNodesIDRPCTransactionReceiptBadRequest() *GetNodesIDRPCTransactionReceiptBadRequest {
	return &GetNodesIDRPCTransactionReceiptBadRequest{}
}

/*
GetNodesIDRPCTransactionReceiptBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCTransactionReceiptBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction receipt bad request response has a 2xx status code
func (o *GetNodesIDRPCTransactionReceiptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction receipt bad request response has a 3xx status code
func (o *GetNodesIDRPCTransactionReceiptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction receipt bad request response has a 4xx status code
func (o *GetNodesIDRPCTransactionReceiptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc transaction receipt bad request response has a 5xx status code
func (o *GetNodesIDRPCTransactionReceiptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction receipt bad request response a status code equal to that given
func (o *GetNodesIDRPCTransactionReceiptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc transaction receipt bad request response
func (o *GetNodesIDRPCTransactionReceiptBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCTransactionReceiptBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCTransactionReceiptBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCTransactionReceiptBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionReceiptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionReceiptNotFound creates a GetNodesIDRPCTransactionReceiptNotFound with default headers values
func NewGetNodesIDRPCTransactionReceiptNotFound() *GetNodesIDRPCTransactionReceiptNotFound {
	return &GetNodesIDRPCTransactionReceiptNotFound{}
}

/*
GetNodesIDRPCTransactionReceiptNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCTransactionReceiptNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction receipt not found response has a 2xx status code
func (o *GetNodesIDRPCTransactionReceiptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction receipt not found response has a 3xx status code
func (o *GetNodesIDRPCTransactionReceiptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction receipt not found response has a 4xx status code
func (o *GetNodesIDRPCTransactionReceiptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc transaction receipt not found response has a 5xx status code
func (o *GetNodesIDRPCTransactionReceiptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction receipt not found response a status code equal to that given
func (o *GetNodesIDRPCTransactionReceiptNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc transaction receipt not found response
func (o *GetNodesIDRPCTransactionReceiptNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCTransactionReceiptNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCTransactionReceiptNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCTransactionReceiptNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionReceiptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionReceiptInternalServerError creates a GetNodesIDRPCTransactionReceiptInternalServerError with default headers values
func NewGetNodesIDRPCTransactionReceiptInternalServerError() *GetNodesIDRPCTransactionReceiptInternalServerError {
	return &GetNodesIDRPCTransactionReceiptInternalServerError{}
}

/*
GetNodesIDRPCTransactionReceiptInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCTransactionReceiptInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction receipt internal server error response has a 2xx status code
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction receipt internal server error response has a 3xx status code
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction receipt internal server error response has a 4xx status code
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc transaction receipt internal server error response has a 5xx status code
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc transaction receipt internal server error response a status code equal to that given
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc transaction receipt internal server error response
func (o *GetNodesIDRPCTransactionReceiptInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCTransactionReceiptInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCTransactionReceiptInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-receipt][%d] getNodesIdRpcTransactionReceiptInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCTransactionReceiptInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionReceiptInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
