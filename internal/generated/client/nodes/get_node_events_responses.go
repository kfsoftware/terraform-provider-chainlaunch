// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodeEventsReader is a Reader for the GetNodeEvents structure.
type GetNodeEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodeEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodeEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodeEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodeEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodeEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/events] getNodeEvents", response, response.Code())
	}
}

// NewGetNodeEventsOK creates a GetNodeEventsOK with default headers values
func NewGetNodeEventsOK() *GetNodeEventsOK {
	return &GetNodeEventsOK{}
}

/*
GetNodeEventsOK describes a response with status code 200, with default header values.

OK
*/
type GetNodeEventsOK struct {
	Payload *models.HTTPPaginatedNodeEventsResponse
}

// IsSuccess returns true when this get node events o k response has a 2xx status code
func (o *GetNodeEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get node events o k response has a 3xx status code
func (o *GetNodeEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node events o k response has a 4xx status code
func (o *GetNodeEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get node events o k response has a 5xx status code
func (o *GetNodeEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get node events o k response a status code equal to that given
func (o *GetNodeEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get node events o k response
func (o *GetNodeEventsOK) Code() int {
	return 200
}

func (o *GetNodeEventsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsOK %s", 200, payload)
}

func (o *GetNodeEventsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsOK %s", 200, payload)
}

func (o *GetNodeEventsOK) GetPayload() *models.HTTPPaginatedNodeEventsResponse {
	return o.Payload
}

func (o *GetNodeEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPPaginatedNodeEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodeEventsBadRequest creates a GetNodeEventsBadRequest with default headers values
func NewGetNodeEventsBadRequest() *GetNodeEventsBadRequest {
	return &GetNodeEventsBadRequest{}
}

/*
GetNodeEventsBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodeEventsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get node events bad request response has a 2xx status code
func (o *GetNodeEventsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get node events bad request response has a 3xx status code
func (o *GetNodeEventsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node events bad request response has a 4xx status code
func (o *GetNodeEventsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get node events bad request response has a 5xx status code
func (o *GetNodeEventsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get node events bad request response a status code equal to that given
func (o *GetNodeEventsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get node events bad request response
func (o *GetNodeEventsBadRequest) Code() int {
	return 400
}

func (o *GetNodeEventsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsBadRequest %s", 400, payload)
}

func (o *GetNodeEventsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsBadRequest %s", 400, payload)
}

func (o *GetNodeEventsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodeEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodeEventsNotFound creates a GetNodeEventsNotFound with default headers values
func NewGetNodeEventsNotFound() *GetNodeEventsNotFound {
	return &GetNodeEventsNotFound{}
}

/*
GetNodeEventsNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodeEventsNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get node events not found response has a 2xx status code
func (o *GetNodeEventsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get node events not found response has a 3xx status code
func (o *GetNodeEventsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node events not found response has a 4xx status code
func (o *GetNodeEventsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get node events not found response has a 5xx status code
func (o *GetNodeEventsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get node events not found response a status code equal to that given
func (o *GetNodeEventsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get node events not found response
func (o *GetNodeEventsNotFound) Code() int {
	return 404
}

func (o *GetNodeEventsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsNotFound %s", 404, payload)
}

func (o *GetNodeEventsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsNotFound %s", 404, payload)
}

func (o *GetNodeEventsNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodeEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodeEventsInternalServerError creates a GetNodeEventsInternalServerError with default headers values
func NewGetNodeEventsInternalServerError() *GetNodeEventsInternalServerError {
	return &GetNodeEventsInternalServerError{}
}

/*
GetNodeEventsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodeEventsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get node events internal server error response has a 2xx status code
func (o *GetNodeEventsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get node events internal server error response has a 3xx status code
func (o *GetNodeEventsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get node events internal server error response has a 4xx status code
func (o *GetNodeEventsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get node events internal server error response has a 5xx status code
func (o *GetNodeEventsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get node events internal server error response a status code equal to that given
func (o *GetNodeEventsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get node events internal server error response
func (o *GetNodeEventsInternalServerError) Code() int {
	return 500
}

func (o *GetNodeEventsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsInternalServerError %s", 500, payload)
}

func (o *GetNodeEventsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/events][%d] getNodeEventsInternalServerError %s", 500, payload)
}

func (o *GetNodeEventsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodeEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
