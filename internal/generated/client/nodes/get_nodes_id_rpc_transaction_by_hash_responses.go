// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCTransactionByHashReader is a Reader for the GetNodesIDRPCTransactionByHash structure.
type GetNodesIDRPCTransactionByHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCTransactionByHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCTransactionByHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCTransactionByHashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCTransactionByHashNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCTransactionByHashInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/transaction-by-hash] GetNodesIDRPCTransactionByHash", response, response.Code())
	}
}

// NewGetNodesIDRPCTransactionByHashOK creates a GetNodesIDRPCTransactionByHashOK with default headers values
func NewGetNodesIDRPCTransactionByHashOK() *GetNodesIDRPCTransactionByHashOK {
	return &GetNodesIDRPCTransactionByHashOK{}
}

/*
GetNodesIDRPCTransactionByHashOK describes a response with status code 200, with default header values.

Transaction object
*/
type GetNodesIDRPCTransactionByHashOK struct {
	Payload any
}

// IsSuccess returns true when this get nodes Id Rpc transaction by hash o k response has a 2xx status code
func (o *GetNodesIDRPCTransactionByHashOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc transaction by hash o k response has a 3xx status code
func (o *GetNodesIDRPCTransactionByHashOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction by hash o k response has a 4xx status code
func (o *GetNodesIDRPCTransactionByHashOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc transaction by hash o k response has a 5xx status code
func (o *GetNodesIDRPCTransactionByHashOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction by hash o k response a status code equal to that given
func (o *GetNodesIDRPCTransactionByHashOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc transaction by hash o k response
func (o *GetNodesIDRPCTransactionByHashOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCTransactionByHashOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashOK %s", 200, payload)
}

func (o *GetNodesIDRPCTransactionByHashOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashOK %s", 200, payload)
}

func (o *GetNodesIDRPCTransactionByHashOK) GetPayload() any {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionByHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionByHashBadRequest creates a GetNodesIDRPCTransactionByHashBadRequest with default headers values
func NewGetNodesIDRPCTransactionByHashBadRequest() *GetNodesIDRPCTransactionByHashBadRequest {
	return &GetNodesIDRPCTransactionByHashBadRequest{}
}

/*
GetNodesIDRPCTransactionByHashBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCTransactionByHashBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction by hash bad request response has a 2xx status code
func (o *GetNodesIDRPCTransactionByHashBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction by hash bad request response has a 3xx status code
func (o *GetNodesIDRPCTransactionByHashBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction by hash bad request response has a 4xx status code
func (o *GetNodesIDRPCTransactionByHashBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc transaction by hash bad request response has a 5xx status code
func (o *GetNodesIDRPCTransactionByHashBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction by hash bad request response a status code equal to that given
func (o *GetNodesIDRPCTransactionByHashBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc transaction by hash bad request response
func (o *GetNodesIDRPCTransactionByHashBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCTransactionByHashBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCTransactionByHashBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCTransactionByHashBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionByHashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionByHashNotFound creates a GetNodesIDRPCTransactionByHashNotFound with default headers values
func NewGetNodesIDRPCTransactionByHashNotFound() *GetNodesIDRPCTransactionByHashNotFound {
	return &GetNodesIDRPCTransactionByHashNotFound{}
}

/*
GetNodesIDRPCTransactionByHashNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCTransactionByHashNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction by hash not found response has a 2xx status code
func (o *GetNodesIDRPCTransactionByHashNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction by hash not found response has a 3xx status code
func (o *GetNodesIDRPCTransactionByHashNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction by hash not found response has a 4xx status code
func (o *GetNodesIDRPCTransactionByHashNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc transaction by hash not found response has a 5xx status code
func (o *GetNodesIDRPCTransactionByHashNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc transaction by hash not found response a status code equal to that given
func (o *GetNodesIDRPCTransactionByHashNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc transaction by hash not found response
func (o *GetNodesIDRPCTransactionByHashNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCTransactionByHashNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCTransactionByHashNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCTransactionByHashNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionByHashNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCTransactionByHashInternalServerError creates a GetNodesIDRPCTransactionByHashInternalServerError with default headers values
func NewGetNodesIDRPCTransactionByHashInternalServerError() *GetNodesIDRPCTransactionByHashInternalServerError {
	return &GetNodesIDRPCTransactionByHashInternalServerError{}
}

/*
GetNodesIDRPCTransactionByHashInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCTransactionByHashInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc transaction by hash internal server error response has a 2xx status code
func (o *GetNodesIDRPCTransactionByHashInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc transaction by hash internal server error response has a 3xx status code
func (o *GetNodesIDRPCTransactionByHashInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc transaction by hash internal server error response has a 4xx status code
func (o *GetNodesIDRPCTransactionByHashInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc transaction by hash internal server error response has a 5xx status code
func (o *GetNodesIDRPCTransactionByHashInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc transaction by hash internal server error response a status code equal to that given
func (o *GetNodesIDRPCTransactionByHashInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc transaction by hash internal server error response
func (o *GetNodesIDRPCTransactionByHashInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCTransactionByHashInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCTransactionByHashInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/transaction-by-hash][%d] getNodesIdRpcTransactionByHashInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCTransactionByHashInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCTransactionByHashInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
