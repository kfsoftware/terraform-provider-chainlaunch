// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCPendingTransactionsReader is a Reader for the GetNodesIDRPCPendingTransactions structure.
type GetNodesIDRPCPendingTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCPendingTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCPendingTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCPendingTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCPendingTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCPendingTransactionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/pending-transactions] GetNodesIDRPCPendingTransactions", response, response.Code())
	}
}

// NewGetNodesIDRPCPendingTransactionsOK creates a GetNodesIDRPCPendingTransactionsOK with default headers values
func NewGetNodesIDRPCPendingTransactionsOK() *GetNodesIDRPCPendingTransactionsOK {
	return &GetNodesIDRPCPendingTransactionsOK{}
}

/*
GetNodesIDRPCPendingTransactionsOK describes a response with status code 200, with default header values.

Array of transaction objects
*/
type GetNodesIDRPCPendingTransactionsOK struct {
	Payload []any
}

// IsSuccess returns true when this get nodes Id Rpc pending transactions o k response has a 2xx status code
func (o *GetNodesIDRPCPendingTransactionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc pending transactions o k response has a 3xx status code
func (o *GetNodesIDRPCPendingTransactionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc pending transactions o k response has a 4xx status code
func (o *GetNodesIDRPCPendingTransactionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc pending transactions o k response has a 5xx status code
func (o *GetNodesIDRPCPendingTransactionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc pending transactions o k response a status code equal to that given
func (o *GetNodesIDRPCPendingTransactionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc pending transactions o k response
func (o *GetNodesIDRPCPendingTransactionsOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCPendingTransactionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsOK %s", 200, payload)
}

func (o *GetNodesIDRPCPendingTransactionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsOK %s", 200, payload)
}

func (o *GetNodesIDRPCPendingTransactionsOK) GetPayload() []any {
	return o.Payload
}

func (o *GetNodesIDRPCPendingTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCPendingTransactionsBadRequest creates a GetNodesIDRPCPendingTransactionsBadRequest with default headers values
func NewGetNodesIDRPCPendingTransactionsBadRequest() *GetNodesIDRPCPendingTransactionsBadRequest {
	return &GetNodesIDRPCPendingTransactionsBadRequest{}
}

/*
GetNodesIDRPCPendingTransactionsBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCPendingTransactionsBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc pending transactions bad request response has a 2xx status code
func (o *GetNodesIDRPCPendingTransactionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc pending transactions bad request response has a 3xx status code
func (o *GetNodesIDRPCPendingTransactionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc pending transactions bad request response has a 4xx status code
func (o *GetNodesIDRPCPendingTransactionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc pending transactions bad request response has a 5xx status code
func (o *GetNodesIDRPCPendingTransactionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc pending transactions bad request response a status code equal to that given
func (o *GetNodesIDRPCPendingTransactionsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc pending transactions bad request response
func (o *GetNodesIDRPCPendingTransactionsBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCPendingTransactionsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCPendingTransactionsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCPendingTransactionsBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCPendingTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCPendingTransactionsNotFound creates a GetNodesIDRPCPendingTransactionsNotFound with default headers values
func NewGetNodesIDRPCPendingTransactionsNotFound() *GetNodesIDRPCPendingTransactionsNotFound {
	return &GetNodesIDRPCPendingTransactionsNotFound{}
}

/*
GetNodesIDRPCPendingTransactionsNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCPendingTransactionsNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc pending transactions not found response has a 2xx status code
func (o *GetNodesIDRPCPendingTransactionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc pending transactions not found response has a 3xx status code
func (o *GetNodesIDRPCPendingTransactionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc pending transactions not found response has a 4xx status code
func (o *GetNodesIDRPCPendingTransactionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc pending transactions not found response has a 5xx status code
func (o *GetNodesIDRPCPendingTransactionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc pending transactions not found response a status code equal to that given
func (o *GetNodesIDRPCPendingTransactionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc pending transactions not found response
func (o *GetNodesIDRPCPendingTransactionsNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCPendingTransactionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCPendingTransactionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCPendingTransactionsNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCPendingTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCPendingTransactionsInternalServerError creates a GetNodesIDRPCPendingTransactionsInternalServerError with default headers values
func NewGetNodesIDRPCPendingTransactionsInternalServerError() *GetNodesIDRPCPendingTransactionsInternalServerError {
	return &GetNodesIDRPCPendingTransactionsInternalServerError{}
}

/*
GetNodesIDRPCPendingTransactionsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCPendingTransactionsInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc pending transactions internal server error response has a 2xx status code
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc pending transactions internal server error response has a 3xx status code
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc pending transactions internal server error response has a 4xx status code
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc pending transactions internal server error response has a 5xx status code
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc pending transactions internal server error response a status code equal to that given
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc pending transactions internal server error response
func (o *GetNodesIDRPCPendingTransactionsInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCPendingTransactionsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCPendingTransactionsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/pending-transactions][%d] getNodesIdRpcPendingTransactionsInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCPendingTransactionsInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCPendingTransactionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
