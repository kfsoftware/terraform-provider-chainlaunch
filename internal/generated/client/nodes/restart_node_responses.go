// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RestartNodeReader is a Reader for the RestartNode structure.
type RestartNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RestartNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRestartNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRestartNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRestartNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRestartNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /nodes/{id}/restart] restartNode", response, response.Code())
	}
}

// NewRestartNodeOK creates a RestartNodeOK with default headers values
func NewRestartNodeOK() *RestartNodeOK {
	return &RestartNodeOK{}
}

/*
RestartNodeOK describes a response with status code 200, with default header values.

OK
*/
type RestartNodeOK struct {
	Payload *models.HTTPNodeResponse
}

// IsSuccess returns true when this restart node o k response has a 2xx status code
func (o *RestartNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this restart node o k response has a 3xx status code
func (o *RestartNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restart node o k response has a 4xx status code
func (o *RestartNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this restart node o k response has a 5xx status code
func (o *RestartNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this restart node o k response a status code equal to that given
func (o *RestartNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the restart node o k response
func (o *RestartNodeOK) Code() int {
	return 200
}

func (o *RestartNodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeOK %s", 200, payload)
}

func (o *RestartNodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeOK %s", 200, payload)
}

func (o *RestartNodeOK) GetPayload() *models.HTTPNodeResponse {
	return o.Payload
}

func (o *RestartNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRestartNodeBadRequest creates a RestartNodeBadRequest with default headers values
func NewRestartNodeBadRequest() *RestartNodeBadRequest {
	return &RestartNodeBadRequest{}
}

/*
RestartNodeBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type RestartNodeBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this restart node bad request response has a 2xx status code
func (o *RestartNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restart node bad request response has a 3xx status code
func (o *RestartNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restart node bad request response has a 4xx status code
func (o *RestartNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this restart node bad request response has a 5xx status code
func (o *RestartNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this restart node bad request response a status code equal to that given
func (o *RestartNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the restart node bad request response
func (o *RestartNodeBadRequest) Code() int {
	return 400
}

func (o *RestartNodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeBadRequest %s", 400, payload)
}

func (o *RestartNodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeBadRequest %s", 400, payload)
}

func (o *RestartNodeBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RestartNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRestartNodeNotFound creates a RestartNodeNotFound with default headers values
func NewRestartNodeNotFound() *RestartNodeNotFound {
	return &RestartNodeNotFound{}
}

/*
RestartNodeNotFound describes a response with status code 404, with default header values.

Node not found
*/
type RestartNodeNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this restart node not found response has a 2xx status code
func (o *RestartNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restart node not found response has a 3xx status code
func (o *RestartNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restart node not found response has a 4xx status code
func (o *RestartNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this restart node not found response has a 5xx status code
func (o *RestartNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this restart node not found response a status code equal to that given
func (o *RestartNodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the restart node not found response
func (o *RestartNodeNotFound) Code() int {
	return 404
}

func (o *RestartNodeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeNotFound %s", 404, payload)
}

func (o *RestartNodeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeNotFound %s", 404, payload)
}

func (o *RestartNodeNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RestartNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRestartNodeInternalServerError creates a RestartNodeInternalServerError with default headers values
func NewRestartNodeInternalServerError() *RestartNodeInternalServerError {
	return &RestartNodeInternalServerError{}
}

/*
RestartNodeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RestartNodeInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this restart node internal server error response has a 2xx status code
func (o *RestartNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this restart node internal server error response has a 3xx status code
func (o *RestartNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this restart node internal server error response has a 4xx status code
func (o *RestartNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this restart node internal server error response has a 5xx status code
func (o *RestartNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this restart node internal server error response a status code equal to that given
func (o *RestartNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the restart node internal server error response
func (o *RestartNodeInternalServerError) Code() int {
	return 500
}

func (o *RestartNodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeInternalServerError %s", 500, payload)
}

func (o *RestartNodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/restart][%d] restartNodeInternalServerError %s", 500, payload)
}

func (o *RestartNodeInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RestartNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
