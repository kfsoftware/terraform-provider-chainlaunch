// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNodesIDRPCFeeHistoryParams creates a new GetNodesIDRPCFeeHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNodesIDRPCFeeHistoryParams() *GetNodesIDRPCFeeHistoryParams {
	return &GetNodesIDRPCFeeHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodesIDRPCFeeHistoryParamsWithTimeout creates a new GetNodesIDRPCFeeHistoryParams object
// with the ability to set a timeout on a request.
func NewGetNodesIDRPCFeeHistoryParamsWithTimeout(timeout time.Duration) *GetNodesIDRPCFeeHistoryParams {
	return &GetNodesIDRPCFeeHistoryParams{
		timeout: timeout,
	}
}

// NewGetNodesIDRPCFeeHistoryParamsWithContext creates a new GetNodesIDRPCFeeHistoryParams object
// with the ability to set a context for a request.
func NewGetNodesIDRPCFeeHistoryParamsWithContext(ctx context.Context) *GetNodesIDRPCFeeHistoryParams {
	return &GetNodesIDRPCFeeHistoryParams{
		Context: ctx,
	}
}

// NewGetNodesIDRPCFeeHistoryParamsWithHTTPClient creates a new GetNodesIDRPCFeeHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNodesIDRPCFeeHistoryParamsWithHTTPClient(client *http.Client) *GetNodesIDRPCFeeHistoryParams {
	return &GetNodesIDRPCFeeHistoryParams{
		HTTPClient: client,
	}
}

/*
GetNodesIDRPCFeeHistoryParams contains all the parameters to send to the API endpoint

	for the get nodes ID RPC fee history operation.

	Typically these are written to a http.Request.
*/
type GetNodesIDRPCFeeHistoryParams struct {

	/* BlockCount.

	   Number of blocks
	*/
	BlockCount string

	/* ID.

	   Node ID
	*/
	ID int64

	/* NewestBlock.

	   Newest block
	*/
	NewestBlock string

	/* RewardPercentiles.

	   Reward percentiles
	*/
	RewardPercentiles string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get nodes ID RPC fee history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodesIDRPCFeeHistoryParams) WithDefaults() *GetNodesIDRPCFeeHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get nodes ID RPC fee history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodesIDRPCFeeHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithTimeout(timeout time.Duration) *GetNodesIDRPCFeeHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithContext(ctx context.Context) *GetNodesIDRPCFeeHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithHTTPClient(client *http.Client) *GetNodesIDRPCFeeHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBlockCount adds the blockCount to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithBlockCount(blockCount string) *GetNodesIDRPCFeeHistoryParams {
	o.SetBlockCount(blockCount)
	return o
}

// SetBlockCount adds the blockCount to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetBlockCount(blockCount string) {
	o.BlockCount = blockCount
}

// WithID adds the id to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithID(id int64) *GetNodesIDRPCFeeHistoryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetID(id int64) {
	o.ID = id
}

// WithNewestBlock adds the newestBlock to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithNewestBlock(newestBlock string) *GetNodesIDRPCFeeHistoryParams {
	o.SetNewestBlock(newestBlock)
	return o
}

// SetNewestBlock adds the newestBlock to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetNewestBlock(newestBlock string) {
	o.NewestBlock = newestBlock
}

// WithRewardPercentiles adds the rewardPercentiles to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) WithRewardPercentiles(rewardPercentiles string) *GetNodesIDRPCFeeHistoryParams {
	o.SetRewardPercentiles(rewardPercentiles)
	return o
}

// SetRewardPercentiles adds the rewardPercentiles to the get nodes ID RPC fee history params
func (o *GetNodesIDRPCFeeHistoryParams) SetRewardPercentiles(rewardPercentiles string) {
	o.RewardPercentiles = rewardPercentiles
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodesIDRPCFeeHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param blockCount
	qrBlockCount := o.BlockCount
	qBlockCount := qrBlockCount
	if qBlockCount != "" {

		if err := r.SetQueryParam("blockCount", qBlockCount); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	// query param newestBlock
	qrNewestBlock := o.NewestBlock
	qNewestBlock := qrNewestBlock
	if qNewestBlock != "" {

		if err := r.SetQueryParam("newestBlock", qNewestBlock); err != nil {
			return err
		}
	}

	// query param rewardPercentiles
	qrRewardPercentiles := o.RewardPercentiles
	qRewardPercentiles := qrRewardPercentiles
	if qRewardPercentiles != "" {

		if err := r.SetQueryParam("rewardPercentiles", qRewardPercentiles); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
