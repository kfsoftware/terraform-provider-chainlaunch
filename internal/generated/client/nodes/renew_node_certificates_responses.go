// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// RenewNodeCertificatesReader is a Reader for the RenewNodeCertificates structure.
type RenewNodeCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenewNodeCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRenewNodeCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenewNodeCertificatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenewNodeCertificatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenewNodeCertificatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /nodes/{id}/certificates/renew] renewNodeCertificates", response, response.Code())
	}
}

// NewRenewNodeCertificatesOK creates a RenewNodeCertificatesOK with default headers values
func NewRenewNodeCertificatesOK() *RenewNodeCertificatesOK {
	return &RenewNodeCertificatesOK{}
}

/*
RenewNodeCertificatesOK describes a response with status code 200, with default header values.

OK
*/
type RenewNodeCertificatesOK struct {
	Payload *models.HTTPNodeResponse
}

// IsSuccess returns true when this renew node certificates o k response has a 2xx status code
func (o *RenewNodeCertificatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this renew node certificates o k response has a 3xx status code
func (o *RenewNodeCertificatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew node certificates o k response has a 4xx status code
func (o *RenewNodeCertificatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this renew node certificates o k response has a 5xx status code
func (o *RenewNodeCertificatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this renew node certificates o k response a status code equal to that given
func (o *RenewNodeCertificatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the renew node certificates o k response
func (o *RenewNodeCertificatesOK) Code() int {
	return 200
}

func (o *RenewNodeCertificatesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesOK %s", 200, payload)
}

func (o *RenewNodeCertificatesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesOK %s", 200, payload)
}

func (o *RenewNodeCertificatesOK) GetPayload() *models.HTTPNodeResponse {
	return o.Payload
}

func (o *RenewNodeCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewNodeCertificatesBadRequest creates a RenewNodeCertificatesBadRequest with default headers values
func NewRenewNodeCertificatesBadRequest() *RenewNodeCertificatesBadRequest {
	return &RenewNodeCertificatesBadRequest{}
}

/*
RenewNodeCertificatesBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type RenewNodeCertificatesBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this renew node certificates bad request response has a 2xx status code
func (o *RenewNodeCertificatesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew node certificates bad request response has a 3xx status code
func (o *RenewNodeCertificatesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew node certificates bad request response has a 4xx status code
func (o *RenewNodeCertificatesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this renew node certificates bad request response has a 5xx status code
func (o *RenewNodeCertificatesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this renew node certificates bad request response a status code equal to that given
func (o *RenewNodeCertificatesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the renew node certificates bad request response
func (o *RenewNodeCertificatesBadRequest) Code() int {
	return 400
}

func (o *RenewNodeCertificatesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesBadRequest %s", 400, payload)
}

func (o *RenewNodeCertificatesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesBadRequest %s", 400, payload)
}

func (o *RenewNodeCertificatesBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RenewNodeCertificatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewNodeCertificatesNotFound creates a RenewNodeCertificatesNotFound with default headers values
func NewRenewNodeCertificatesNotFound() *RenewNodeCertificatesNotFound {
	return &RenewNodeCertificatesNotFound{}
}

/*
RenewNodeCertificatesNotFound describes a response with status code 404, with default header values.

Node not found
*/
type RenewNodeCertificatesNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this renew node certificates not found response has a 2xx status code
func (o *RenewNodeCertificatesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew node certificates not found response has a 3xx status code
func (o *RenewNodeCertificatesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew node certificates not found response has a 4xx status code
func (o *RenewNodeCertificatesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this renew node certificates not found response has a 5xx status code
func (o *RenewNodeCertificatesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this renew node certificates not found response a status code equal to that given
func (o *RenewNodeCertificatesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the renew node certificates not found response
func (o *RenewNodeCertificatesNotFound) Code() int {
	return 404
}

func (o *RenewNodeCertificatesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesNotFound %s", 404, payload)
}

func (o *RenewNodeCertificatesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesNotFound %s", 404, payload)
}

func (o *RenewNodeCertificatesNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RenewNodeCertificatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRenewNodeCertificatesInternalServerError creates a RenewNodeCertificatesInternalServerError with default headers values
func NewRenewNodeCertificatesInternalServerError() *RenewNodeCertificatesInternalServerError {
	return &RenewNodeCertificatesInternalServerError{}
}

/*
RenewNodeCertificatesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type RenewNodeCertificatesInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this renew node certificates internal server error response has a 2xx status code
func (o *RenewNodeCertificatesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew node certificates internal server error response has a 3xx status code
func (o *RenewNodeCertificatesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew node certificates internal server error response has a 4xx status code
func (o *RenewNodeCertificatesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this renew node certificates internal server error response has a 5xx status code
func (o *RenewNodeCertificatesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this renew node certificates internal server error response a status code equal to that given
func (o *RenewNodeCertificatesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the renew node certificates internal server error response
func (o *RenewNodeCertificatesInternalServerError) Code() int {
	return 500
}

func (o *RenewNodeCertificatesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesInternalServerError %s", 500, payload)
}

func (o *RenewNodeCertificatesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/certificates/renew][%d] renewNodeCertificatesInternalServerError %s", 500, payload)
}

func (o *RenewNodeCertificatesInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *RenewNodeCertificatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
