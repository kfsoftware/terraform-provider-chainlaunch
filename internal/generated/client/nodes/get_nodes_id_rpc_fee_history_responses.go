// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCFeeHistoryReader is a Reader for the GetNodesIDRPCFeeHistory structure.
type GetNodesIDRPCFeeHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCFeeHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCFeeHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCFeeHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCFeeHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCFeeHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/fee-history] GetNodesIDRPCFeeHistory", response, response.Code())
	}
}

// NewGetNodesIDRPCFeeHistoryOK creates a GetNodesIDRPCFeeHistoryOK with default headers values
func NewGetNodesIDRPCFeeHistoryOK() *GetNodesIDRPCFeeHistoryOK {
	return &GetNodesIDRPCFeeHistoryOK{}
}

/*
GetNodesIDRPCFeeHistoryOK describes a response with status code 200, with default header values.

Fee history object
*/
type GetNodesIDRPCFeeHistoryOK struct {
	Payload any
}

// IsSuccess returns true when this get nodes Id Rpc fee history o k response has a 2xx status code
func (o *GetNodesIDRPCFeeHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc fee history o k response has a 3xx status code
func (o *GetNodesIDRPCFeeHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc fee history o k response has a 4xx status code
func (o *GetNodesIDRPCFeeHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc fee history o k response has a 5xx status code
func (o *GetNodesIDRPCFeeHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc fee history o k response a status code equal to that given
func (o *GetNodesIDRPCFeeHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc fee history o k response
func (o *GetNodesIDRPCFeeHistoryOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCFeeHistoryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryOK %s", 200, payload)
}

func (o *GetNodesIDRPCFeeHistoryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryOK %s", 200, payload)
}

func (o *GetNodesIDRPCFeeHistoryOK) GetPayload() any {
	return o.Payload
}

func (o *GetNodesIDRPCFeeHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCFeeHistoryBadRequest creates a GetNodesIDRPCFeeHistoryBadRequest with default headers values
func NewGetNodesIDRPCFeeHistoryBadRequest() *GetNodesIDRPCFeeHistoryBadRequest {
	return &GetNodesIDRPCFeeHistoryBadRequest{}
}

/*
GetNodesIDRPCFeeHistoryBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCFeeHistoryBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc fee history bad request response has a 2xx status code
func (o *GetNodesIDRPCFeeHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc fee history bad request response has a 3xx status code
func (o *GetNodesIDRPCFeeHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc fee history bad request response has a 4xx status code
func (o *GetNodesIDRPCFeeHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc fee history bad request response has a 5xx status code
func (o *GetNodesIDRPCFeeHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc fee history bad request response a status code equal to that given
func (o *GetNodesIDRPCFeeHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc fee history bad request response
func (o *GetNodesIDRPCFeeHistoryBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCFeeHistoryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCFeeHistoryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCFeeHistoryBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCFeeHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCFeeHistoryNotFound creates a GetNodesIDRPCFeeHistoryNotFound with default headers values
func NewGetNodesIDRPCFeeHistoryNotFound() *GetNodesIDRPCFeeHistoryNotFound {
	return &GetNodesIDRPCFeeHistoryNotFound{}
}

/*
GetNodesIDRPCFeeHistoryNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCFeeHistoryNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc fee history not found response has a 2xx status code
func (o *GetNodesIDRPCFeeHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc fee history not found response has a 3xx status code
func (o *GetNodesIDRPCFeeHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc fee history not found response has a 4xx status code
func (o *GetNodesIDRPCFeeHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc fee history not found response has a 5xx status code
func (o *GetNodesIDRPCFeeHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc fee history not found response a status code equal to that given
func (o *GetNodesIDRPCFeeHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc fee history not found response
func (o *GetNodesIDRPCFeeHistoryNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCFeeHistoryNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCFeeHistoryNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCFeeHistoryNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCFeeHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCFeeHistoryInternalServerError creates a GetNodesIDRPCFeeHistoryInternalServerError with default headers values
func NewGetNodesIDRPCFeeHistoryInternalServerError() *GetNodesIDRPCFeeHistoryInternalServerError {
	return &GetNodesIDRPCFeeHistoryInternalServerError{}
}

/*
GetNodesIDRPCFeeHistoryInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCFeeHistoryInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc fee history internal server error response has a 2xx status code
func (o *GetNodesIDRPCFeeHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc fee history internal server error response has a 3xx status code
func (o *GetNodesIDRPCFeeHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc fee history internal server error response has a 4xx status code
func (o *GetNodesIDRPCFeeHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc fee history internal server error response has a 5xx status code
func (o *GetNodesIDRPCFeeHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc fee history internal server error response a status code equal to that given
func (o *GetNodesIDRPCFeeHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc fee history internal server error response
func (o *GetNodesIDRPCFeeHistoryInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCFeeHistoryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCFeeHistoryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/fee-history][%d] getNodesIdRpcFeeHistoryInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCFeeHistoryInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCFeeHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
