// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StartNodeReader is a Reader for the StartNode structure.
type StartNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStartNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStartNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStartNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /nodes/{id}/start] startNode", response, response.Code())
	}
}

// NewStartNodeOK creates a StartNodeOK with default headers values
func NewStartNodeOK() *StartNodeOK {
	return &StartNodeOK{}
}

/*
StartNodeOK describes a response with status code 200, with default header values.

OK
*/
type StartNodeOK struct {
	Payload *models.HTTPNodeResponse
}

// IsSuccess returns true when this start node o k response has a 2xx status code
func (o *StartNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start node o k response has a 3xx status code
func (o *StartNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start node o k response has a 4xx status code
func (o *StartNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start node o k response has a 5xx status code
func (o *StartNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start node o k response a status code equal to that given
func (o *StartNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start node o k response
func (o *StartNodeOK) Code() int {
	return 200
}

func (o *StartNodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeOK %s", 200, payload)
}

func (o *StartNodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeOK %s", 200, payload)
}

func (o *StartNodeOK) GetPayload() *models.HTTPNodeResponse {
	return o.Payload
}

func (o *StartNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartNodeBadRequest creates a StartNodeBadRequest with default headers values
func NewStartNodeBadRequest() *StartNodeBadRequest {
	return &StartNodeBadRequest{}
}

/*
StartNodeBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type StartNodeBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this start node bad request response has a 2xx status code
func (o *StartNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start node bad request response has a 3xx status code
func (o *StartNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start node bad request response has a 4xx status code
func (o *StartNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this start node bad request response has a 5xx status code
func (o *StartNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this start node bad request response a status code equal to that given
func (o *StartNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the start node bad request response
func (o *StartNodeBadRequest) Code() int {
	return 400
}

func (o *StartNodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeBadRequest %s", 400, payload)
}

func (o *StartNodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeBadRequest %s", 400, payload)
}

func (o *StartNodeBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StartNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartNodeNotFound creates a StartNodeNotFound with default headers values
func NewStartNodeNotFound() *StartNodeNotFound {
	return &StartNodeNotFound{}
}

/*
StartNodeNotFound describes a response with status code 404, with default header values.

Node not found
*/
type StartNodeNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this start node not found response has a 2xx status code
func (o *StartNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start node not found response has a 3xx status code
func (o *StartNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start node not found response has a 4xx status code
func (o *StartNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start node not found response has a 5xx status code
func (o *StartNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start node not found response a status code equal to that given
func (o *StartNodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start node not found response
func (o *StartNodeNotFound) Code() int {
	return 404
}

func (o *StartNodeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeNotFound %s", 404, payload)
}

func (o *StartNodeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeNotFound %s", 404, payload)
}

func (o *StartNodeNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StartNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStartNodeInternalServerError creates a StartNodeInternalServerError with default headers values
func NewStartNodeInternalServerError() *StartNodeInternalServerError {
	return &StartNodeInternalServerError{}
}

/*
StartNodeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StartNodeInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this start node internal server error response has a 2xx status code
func (o *StartNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start node internal server error response has a 3xx status code
func (o *StartNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start node internal server error response has a 4xx status code
func (o *StartNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start node internal server error response has a 5xx status code
func (o *StartNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start node internal server error response a status code equal to that given
func (o *StartNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start node internal server error response
func (o *StartNodeInternalServerError) Code() int {
	return 500
}

func (o *StartNodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeInternalServerError %s", 500, payload)
}

func (o *StartNodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/start][%d] startNodeInternalServerError %s", 500, payload)
}

func (o *StartNodeInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StartNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
