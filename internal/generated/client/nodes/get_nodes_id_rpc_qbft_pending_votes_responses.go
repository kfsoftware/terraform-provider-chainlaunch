// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCQbftPendingVotesReader is a Reader for the GetNodesIDRPCQbftPendingVotes structure.
type GetNodesIDRPCQbftPendingVotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCQbftPendingVotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCQbftPendingVotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCQbftPendingVotesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCQbftPendingVotesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCQbftPendingVotesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/qbft-pending-votes] GetNodesIDRPCQbftPendingVotes", response, response.Code())
	}
}

// NewGetNodesIDRPCQbftPendingVotesOK creates a GetNodesIDRPCQbftPendingVotesOK with default headers values
func NewGetNodesIDRPCQbftPendingVotesOK() *GetNodesIDRPCQbftPendingVotesOK {
	return &GetNodesIDRPCQbftPendingVotesOK{}
}

/*
GetNodesIDRPCQbftPendingVotesOK describes a response with status code 200, with default header values.

Map of validator addresses to boolean values indicating pending votes
*/
type GetNodesIDRPCQbftPendingVotesOK struct {
	Payload models.ServiceQbftPendingVotes
}

// IsSuccess returns true when this get nodes Id Rpc qbft pending votes o k response has a 2xx status code
func (o *GetNodesIDRPCQbftPendingVotesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc qbft pending votes o k response has a 3xx status code
func (o *GetNodesIDRPCQbftPendingVotesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft pending votes o k response has a 4xx status code
func (o *GetNodesIDRPCQbftPendingVotesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc qbft pending votes o k response has a 5xx status code
func (o *GetNodesIDRPCQbftPendingVotesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft pending votes o k response a status code equal to that given
func (o *GetNodesIDRPCQbftPendingVotesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc qbft pending votes o k response
func (o *GetNodesIDRPCQbftPendingVotesOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCQbftPendingVotesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesOK %s", 200, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesOK %s", 200, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesOK) GetPayload() models.ServiceQbftPendingVotes {
	return o.Payload
}

func (o *GetNodesIDRPCQbftPendingVotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftPendingVotesBadRequest creates a GetNodesIDRPCQbftPendingVotesBadRequest with default headers values
func NewGetNodesIDRPCQbftPendingVotesBadRequest() *GetNodesIDRPCQbftPendingVotesBadRequest {
	return &GetNodesIDRPCQbftPendingVotesBadRequest{}
}

/*
GetNodesIDRPCQbftPendingVotesBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCQbftPendingVotesBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft pending votes bad request response has a 2xx status code
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft pending votes bad request response has a 3xx status code
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft pending votes bad request response has a 4xx status code
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc qbft pending votes bad request response has a 5xx status code
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft pending votes bad request response a status code equal to that given
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc qbft pending votes bad request response
func (o *GetNodesIDRPCQbftPendingVotesBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCQbftPendingVotesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftPendingVotesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftPendingVotesNotFound creates a GetNodesIDRPCQbftPendingVotesNotFound with default headers values
func NewGetNodesIDRPCQbftPendingVotesNotFound() *GetNodesIDRPCQbftPendingVotesNotFound {
	return &GetNodesIDRPCQbftPendingVotesNotFound{}
}

/*
GetNodesIDRPCQbftPendingVotesNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCQbftPendingVotesNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft pending votes not found response has a 2xx status code
func (o *GetNodesIDRPCQbftPendingVotesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft pending votes not found response has a 3xx status code
func (o *GetNodesIDRPCQbftPendingVotesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft pending votes not found response has a 4xx status code
func (o *GetNodesIDRPCQbftPendingVotesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc qbft pending votes not found response has a 5xx status code
func (o *GetNodesIDRPCQbftPendingVotesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft pending votes not found response a status code equal to that given
func (o *GetNodesIDRPCQbftPendingVotesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc qbft pending votes not found response
func (o *GetNodesIDRPCQbftPendingVotesNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCQbftPendingVotesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftPendingVotesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftPendingVotesInternalServerError creates a GetNodesIDRPCQbftPendingVotesInternalServerError with default headers values
func NewGetNodesIDRPCQbftPendingVotesInternalServerError() *GetNodesIDRPCQbftPendingVotesInternalServerError {
	return &GetNodesIDRPCQbftPendingVotesInternalServerError{}
}

/*
GetNodesIDRPCQbftPendingVotesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCQbftPendingVotesInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft pending votes internal server error response has a 2xx status code
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft pending votes internal server error response has a 3xx status code
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft pending votes internal server error response has a 4xx status code
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc qbft pending votes internal server error response has a 5xx status code
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc qbft pending votes internal server error response a status code equal to that given
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc qbft pending votes internal server error response
func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-pending-votes][%d] getNodesIdRpcQbftPendingVotesInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftPendingVotesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
