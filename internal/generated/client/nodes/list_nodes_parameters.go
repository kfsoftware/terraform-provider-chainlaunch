// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListNodesParams creates a new ListNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListNodesParams() *ListNodesParams {
	return &ListNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListNodesParamsWithTimeout creates a new ListNodesParams object
// with the ability to set a timeout on a request.
func NewListNodesParamsWithTimeout(timeout time.Duration) *ListNodesParams {
	return &ListNodesParams{
		timeout: timeout,
	}
}

// NewListNodesParamsWithContext creates a new ListNodesParams object
// with the ability to set a context for a request.
func NewListNodesParamsWithContext(ctx context.Context) *ListNodesParams {
	return &ListNodesParams{
		Context: ctx,
	}
}

// NewListNodesParamsWithHTTPClient creates a new ListNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListNodesParamsWithHTTPClient(client *http.Client) *ListNodesParams {
	return &ListNodesParams{
		HTTPClient: client,
	}
}

/*
ListNodesParams contains all the parameters to send to the API endpoint

	for the list nodes operation.

	Typically these are written to a http.Request.
*/
type ListNodesParams struct {

	/* Limit.

	   Items per page

	   Default: 10
	*/
	Limit *int64

	/* Name.

	   Filter by node name (partial match, case-insensitive)
	*/
	Name *string

	/* NetworkID.

	   Filter by network ID
	*/
	NetworkID *int64

	/* NodeType.

	   Filter by node type
	*/
	NodeType *string

	/* OrganizationID.

	   Filter by organization ID (Fabric nodes only)
	*/
	OrganizationID *int64

	/* Page.

	   Page number

	   Default: 1
	*/
	Page *int64

	/* Platform.

	   Filter by blockchain platform
	*/
	Platform *string

	/* Slug.

	   Filter by node slug (exact match)
	*/
	Slug *string

	/* Status.

	   Filter by node status
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListNodesParams) WithDefaults() *ListNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListNodesParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		pageDefault = int64(1)
	)

	val := ListNodesParams{
		Limit: &limitDefault,
		Page:  &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list nodes params
func (o *ListNodesParams) WithTimeout(timeout time.Duration) *ListNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list nodes params
func (o *ListNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list nodes params
func (o *ListNodesParams) WithContext(ctx context.Context) *ListNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list nodes params
func (o *ListNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list nodes params
func (o *ListNodesParams) WithHTTPClient(client *http.Client) *ListNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list nodes params
func (o *ListNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list nodes params
func (o *ListNodesParams) WithLimit(limit *int64) *ListNodesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list nodes params
func (o *ListNodesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the list nodes params
func (o *ListNodesParams) WithName(name *string) *ListNodesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list nodes params
func (o *ListNodesParams) SetName(name *string) {
	o.Name = name
}

// WithNetworkID adds the networkID to the list nodes params
func (o *ListNodesParams) WithNetworkID(networkID *int64) *ListNodesParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the list nodes params
func (o *ListNodesParams) SetNetworkID(networkID *int64) {
	o.NetworkID = networkID
}

// WithNodeType adds the nodeType to the list nodes params
func (o *ListNodesParams) WithNodeType(nodeType *string) *ListNodesParams {
	o.SetNodeType(nodeType)
	return o
}

// SetNodeType adds the nodeType to the list nodes params
func (o *ListNodesParams) SetNodeType(nodeType *string) {
	o.NodeType = nodeType
}

// WithOrganizationID adds the organizationID to the list nodes params
func (o *ListNodesParams) WithOrganizationID(organizationID *int64) *ListNodesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the list nodes params
func (o *ListNodesParams) SetOrganizationID(organizationID *int64) {
	o.OrganizationID = organizationID
}

// WithPage adds the page to the list nodes params
func (o *ListNodesParams) WithPage(page *int64) *ListNodesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list nodes params
func (o *ListNodesParams) SetPage(page *int64) {
	o.Page = page
}

// WithPlatform adds the platform to the list nodes params
func (o *ListNodesParams) WithPlatform(platform *string) *ListNodesParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the list nodes params
func (o *ListNodesParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithSlug adds the slug to the list nodes params
func (o *ListNodesParams) WithSlug(slug *string) *ListNodesParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the list nodes params
func (o *ListNodesParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WithStatus adds the status to the list nodes params
func (o *ListNodesParams) WithStatus(status *string) *ListNodesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list nodes params
func (o *ListNodesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NetworkID != nil {

		// query param networkId
		var qrNetworkID int64

		if o.NetworkID != nil {
			qrNetworkID = *o.NetworkID
		}
		qNetworkID := swag.FormatInt64(qrNetworkID)
		if qNetworkID != "" {

			if err := r.SetQueryParam("networkId", qNetworkID); err != nil {
				return err
			}
		}
	}

	if o.NodeType != nil {

		// query param nodeType
		var qrNodeType string

		if o.NodeType != nil {
			qrNodeType = *o.NodeType
		}
		qNodeType := qrNodeType
		if qNodeType != "" {

			if err := r.SetQueryParam("nodeType", qNodeType); err != nil {
				return err
			}
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int64

		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt64(qrOrganizationID)
		if qOrganizationID != "" {

			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string

		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {

			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}
	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string

		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {

			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
