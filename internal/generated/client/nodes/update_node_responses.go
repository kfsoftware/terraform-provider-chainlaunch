// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// UpdateNodeReader is a Reader for the UpdateNode structure.
type UpdateNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /nodes/{id}] updateNode", response, response.Code())
	}
}

// NewUpdateNodeOK creates a UpdateNodeOK with default headers values
func NewUpdateNodeOK() *UpdateNodeOK {
	return &UpdateNodeOK{}
}

/*
UpdateNodeOK describes a response with status code 200, with default header values.

OK
*/
type UpdateNodeOK struct {
	Payload *models.HTTPNodeResponse
}

// IsSuccess returns true when this update node o k response has a 2xx status code
func (o *UpdateNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update node o k response has a 3xx status code
func (o *UpdateNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update node o k response has a 4xx status code
func (o *UpdateNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update node o k response has a 5xx status code
func (o *UpdateNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update node o k response a status code equal to that given
func (o *UpdateNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update node o k response
func (o *UpdateNodeOK) Code() int {
	return 200
}

func (o *UpdateNodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeOK %s", 200, payload)
}

func (o *UpdateNodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeOK %s", 200, payload)
}

func (o *UpdateNodeOK) GetPayload() *models.HTTPNodeResponse {
	return o.Payload
}

func (o *UpdateNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNodeBadRequest creates a UpdateNodeBadRequest with default headers values
func NewUpdateNodeBadRequest() *UpdateNodeBadRequest {
	return &UpdateNodeBadRequest{}
}

/*
UpdateNodeBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type UpdateNodeBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update node bad request response has a 2xx status code
func (o *UpdateNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update node bad request response has a 3xx status code
func (o *UpdateNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update node bad request response has a 4xx status code
func (o *UpdateNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update node bad request response has a 5xx status code
func (o *UpdateNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update node bad request response a status code equal to that given
func (o *UpdateNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update node bad request response
func (o *UpdateNodeBadRequest) Code() int {
	return 400
}

func (o *UpdateNodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeBadRequest %s", 400, payload)
}

func (o *UpdateNodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeBadRequest %s", 400, payload)
}

func (o *UpdateNodeBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNodeNotFound creates a UpdateNodeNotFound with default headers values
func NewUpdateNodeNotFound() *UpdateNodeNotFound {
	return &UpdateNodeNotFound{}
}

/*
UpdateNodeNotFound describes a response with status code 404, with default header values.

Node not found
*/
type UpdateNodeNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update node not found response has a 2xx status code
func (o *UpdateNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update node not found response has a 3xx status code
func (o *UpdateNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update node not found response has a 4xx status code
func (o *UpdateNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update node not found response has a 5xx status code
func (o *UpdateNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update node not found response a status code equal to that given
func (o *UpdateNodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update node not found response
func (o *UpdateNodeNotFound) Code() int {
	return 404
}

func (o *UpdateNodeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeNotFound %s", 404, payload)
}

func (o *UpdateNodeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeNotFound %s", 404, payload)
}

func (o *UpdateNodeNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewUpdateNodeInternalServerError creates a UpdateNodeInternalServerError with default headers values
func NewUpdateNodeInternalServerError() *UpdateNodeInternalServerError {
	return &UpdateNodeInternalServerError{}
}

/*
UpdateNodeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateNodeInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this update node internal server error response has a 2xx status code
func (o *UpdateNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update node internal server error response has a 3xx status code
func (o *UpdateNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update node internal server error response has a 4xx status code
func (o *UpdateNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update node internal server error response has a 5xx status code
func (o *UpdateNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update node internal server error response a status code equal to that given
func (o *UpdateNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update node internal server error response
func (o *UpdateNodeInternalServerError) Code() int {
	return 500
}

func (o *UpdateNodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeInternalServerError %s", 500, payload)
}

func (o *UpdateNodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /nodes/{id}][%d] updateNodeInternalServerError %s", 500, payload)
}

func (o *UpdateNodeInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *UpdateNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
