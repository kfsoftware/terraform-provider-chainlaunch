// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCSyncingReader is a Reader for the GetNodesIDRPCSyncing structure.
type GetNodesIDRPCSyncingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCSyncingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCSyncingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCSyncingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCSyncingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCSyncingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/syncing] GetNodesIDRPCSyncing", response, response.Code())
	}
}

// NewGetNodesIDRPCSyncingOK creates a GetNodesIDRPCSyncingOK with default headers values
func NewGetNodesIDRPCSyncingOK() *GetNodesIDRPCSyncingOK {
	return &GetNodesIDRPCSyncingOK{}
}

/*
GetNodesIDRPCSyncingOK describes a response with status code 200, with default header values.

Sync object or false
*/
type GetNodesIDRPCSyncingOK struct {
	Payload any
}

// IsSuccess returns true when this get nodes Id Rpc syncing o k response has a 2xx status code
func (o *GetNodesIDRPCSyncingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc syncing o k response has a 3xx status code
func (o *GetNodesIDRPCSyncingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc syncing o k response has a 4xx status code
func (o *GetNodesIDRPCSyncingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc syncing o k response has a 5xx status code
func (o *GetNodesIDRPCSyncingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc syncing o k response a status code equal to that given
func (o *GetNodesIDRPCSyncingOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc syncing o k response
func (o *GetNodesIDRPCSyncingOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCSyncingOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingOK %s", 200, payload)
}

func (o *GetNodesIDRPCSyncingOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingOK %s", 200, payload)
}

func (o *GetNodesIDRPCSyncingOK) GetPayload() any {
	return o.Payload
}

func (o *GetNodesIDRPCSyncingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCSyncingBadRequest creates a GetNodesIDRPCSyncingBadRequest with default headers values
func NewGetNodesIDRPCSyncingBadRequest() *GetNodesIDRPCSyncingBadRequest {
	return &GetNodesIDRPCSyncingBadRequest{}
}

/*
GetNodesIDRPCSyncingBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCSyncingBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc syncing bad request response has a 2xx status code
func (o *GetNodesIDRPCSyncingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc syncing bad request response has a 3xx status code
func (o *GetNodesIDRPCSyncingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc syncing bad request response has a 4xx status code
func (o *GetNodesIDRPCSyncingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc syncing bad request response has a 5xx status code
func (o *GetNodesIDRPCSyncingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc syncing bad request response a status code equal to that given
func (o *GetNodesIDRPCSyncingBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc syncing bad request response
func (o *GetNodesIDRPCSyncingBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCSyncingBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCSyncingBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCSyncingBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCSyncingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCSyncingNotFound creates a GetNodesIDRPCSyncingNotFound with default headers values
func NewGetNodesIDRPCSyncingNotFound() *GetNodesIDRPCSyncingNotFound {
	return &GetNodesIDRPCSyncingNotFound{}
}

/*
GetNodesIDRPCSyncingNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCSyncingNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc syncing not found response has a 2xx status code
func (o *GetNodesIDRPCSyncingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc syncing not found response has a 3xx status code
func (o *GetNodesIDRPCSyncingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc syncing not found response has a 4xx status code
func (o *GetNodesIDRPCSyncingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc syncing not found response has a 5xx status code
func (o *GetNodesIDRPCSyncingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc syncing not found response a status code equal to that given
func (o *GetNodesIDRPCSyncingNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc syncing not found response
func (o *GetNodesIDRPCSyncingNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCSyncingNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCSyncingNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCSyncingNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCSyncingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCSyncingInternalServerError creates a GetNodesIDRPCSyncingInternalServerError with default headers values
func NewGetNodesIDRPCSyncingInternalServerError() *GetNodesIDRPCSyncingInternalServerError {
	return &GetNodesIDRPCSyncingInternalServerError{}
}

/*
GetNodesIDRPCSyncingInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCSyncingInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc syncing internal server error response has a 2xx status code
func (o *GetNodesIDRPCSyncingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc syncing internal server error response has a 3xx status code
func (o *GetNodesIDRPCSyncingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc syncing internal server error response has a 4xx status code
func (o *GetNodesIDRPCSyncingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc syncing internal server error response has a 5xx status code
func (o *GetNodesIDRPCSyncingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc syncing internal server error response a status code equal to that given
func (o *GetNodesIDRPCSyncingInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc syncing internal server error response
func (o *GetNodesIDRPCSyncingInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCSyncingInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCSyncingInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/syncing][%d] getNodesIdRpcSyncingInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCSyncingInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCSyncingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
