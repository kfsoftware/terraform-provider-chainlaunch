// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNodeHealthHistoryParams creates a new GetNodeHealthHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNodeHealthHistoryParams() *GetNodeHealthHistoryParams {
	return &GetNodeHealthHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNodeHealthHistoryParamsWithTimeout creates a new GetNodeHealthHistoryParams object
// with the ability to set a timeout on a request.
func NewGetNodeHealthHistoryParamsWithTimeout(timeout time.Duration) *GetNodeHealthHistoryParams {
	return &GetNodeHealthHistoryParams{
		timeout: timeout,
	}
}

// NewGetNodeHealthHistoryParamsWithContext creates a new GetNodeHealthHistoryParams object
// with the ability to set a context for a request.
func NewGetNodeHealthHistoryParamsWithContext(ctx context.Context) *GetNodeHealthHistoryParams {
	return &GetNodeHealthHistoryParams{
		Context: ctx,
	}
}

// NewGetNodeHealthHistoryParamsWithHTTPClient creates a new GetNodeHealthHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNodeHealthHistoryParamsWithHTTPClient(client *http.Client) *GetNodeHealthHistoryParams {
	return &GetNodeHealthHistoryParams{
		HTTPClient: client,
	}
}

/*
GetNodeHealthHistoryParams contains all the parameters to send to the API endpoint

	for the get node health history operation.

	Typically these are written to a http.Request.
*/
type GetNodeHealthHistoryParams struct {

	/* EndTime.

	   End time (RFC3339 format)
	*/
	EndTime *string

	/* Hours.

	   Hours from now (alternative to start_time/end_time)
	*/
	Hours *int64

	/* ID.

	   Node ID
	*/
	ID int64

	/* StartTime.

	   Start time (RFC3339 format)
	*/
	StartTime *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get node health history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeHealthHistoryParams) WithDefaults() *GetNodeHealthHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get node health history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNodeHealthHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get node health history params
func (o *GetNodeHealthHistoryParams) WithTimeout(timeout time.Duration) *GetNodeHealthHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get node health history params
func (o *GetNodeHealthHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get node health history params
func (o *GetNodeHealthHistoryParams) WithContext(ctx context.Context) *GetNodeHealthHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get node health history params
func (o *GetNodeHealthHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get node health history params
func (o *GetNodeHealthHistoryParams) WithHTTPClient(client *http.Client) *GetNodeHealthHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get node health history params
func (o *GetNodeHealthHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the get node health history params
func (o *GetNodeHealthHistoryParams) WithEndTime(endTime *string) *GetNodeHealthHistoryParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get node health history params
func (o *GetNodeHealthHistoryParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithHours adds the hours to the get node health history params
func (o *GetNodeHealthHistoryParams) WithHours(hours *int64) *GetNodeHealthHistoryParams {
	o.SetHours(hours)
	return o
}

// SetHours adds the hours to the get node health history params
func (o *GetNodeHealthHistoryParams) SetHours(hours *int64) {
	o.Hours = hours
}

// WithID adds the id to the get node health history params
func (o *GetNodeHealthHistoryParams) WithID(id int64) *GetNodeHealthHistoryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get node health history params
func (o *GetNodeHealthHistoryParams) SetID(id int64) {
	o.ID = id
}

// WithStartTime adds the startTime to the get node health history params
func (o *GetNodeHealthHistoryParams) WithStartTime(startTime *string) *GetNodeHealthHistoryParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get node health history params
func (o *GetNodeHealthHistoryParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetNodeHealthHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Hours != nil {

		// query param hours
		var qrHours int64

		if o.Hours != nil {
			qrHours = *o.Hours
		}
		qHours := swag.FormatInt64(qrHours)
		if qHours != "" {

			if err := r.SetQueryParam("hours", qHours); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
