// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// VerifyBesuVersionReader is a Reader for the VerifyBesuVersion structure.
type VerifyBesuVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyBesuVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyBesuVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVerifyBesuVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVerifyBesuVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /nodes/verify/besu] verifyBesuVersion", response, response.Code())
	}
}

// NewVerifyBesuVersionOK creates a VerifyBesuVersionOK with default headers values
func NewVerifyBesuVersionOK() *VerifyBesuVersionOK {
	return &VerifyBesuVersionOK{}
}

/*
VerifyBesuVersionOK describes a response with status code 200, with default header values.

OK
*/
type VerifyBesuVersionOK struct {
	Payload *models.ServiceBesuVersionVerificationResponse
}

// IsSuccess returns true when this verify besu version o k response has a 2xx status code
func (o *VerifyBesuVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify besu version o k response has a 3xx status code
func (o *VerifyBesuVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify besu version o k response has a 4xx status code
func (o *VerifyBesuVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify besu version o k response has a 5xx status code
func (o *VerifyBesuVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify besu version o k response a status code equal to that given
func (o *VerifyBesuVersionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the verify besu version o k response
func (o *VerifyBesuVersionOK) Code() int {
	return 200
}

func (o *VerifyBesuVersionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionOK %s", 200, payload)
}

func (o *VerifyBesuVersionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionOK %s", 200, payload)
}

func (o *VerifyBesuVersionOK) GetPayload() *models.ServiceBesuVersionVerificationResponse {
	return o.Payload
}

func (o *VerifyBesuVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceBesuVersionVerificationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewVerifyBesuVersionBadRequest creates a VerifyBesuVersionBadRequest with default headers values
func NewVerifyBesuVersionBadRequest() *VerifyBesuVersionBadRequest {
	return &VerifyBesuVersionBadRequest{}
}

/*
VerifyBesuVersionBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type VerifyBesuVersionBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this verify besu version bad request response has a 2xx status code
func (o *VerifyBesuVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify besu version bad request response has a 3xx status code
func (o *VerifyBesuVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify besu version bad request response has a 4xx status code
func (o *VerifyBesuVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify besu version bad request response has a 5xx status code
func (o *VerifyBesuVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this verify besu version bad request response a status code equal to that given
func (o *VerifyBesuVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the verify besu version bad request response
func (o *VerifyBesuVersionBadRequest) Code() int {
	return 400
}

func (o *VerifyBesuVersionBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionBadRequest %s", 400, payload)
}

func (o *VerifyBesuVersionBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionBadRequest %s", 400, payload)
}

func (o *VerifyBesuVersionBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *VerifyBesuVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewVerifyBesuVersionInternalServerError creates a VerifyBesuVersionInternalServerError with default headers values
func NewVerifyBesuVersionInternalServerError() *VerifyBesuVersionInternalServerError {
	return &VerifyBesuVersionInternalServerError{}
}

/*
VerifyBesuVersionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type VerifyBesuVersionInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this verify besu version internal server error response has a 2xx status code
func (o *VerifyBesuVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify besu version internal server error response has a 3xx status code
func (o *VerifyBesuVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify besu version internal server error response has a 4xx status code
func (o *VerifyBesuVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify besu version internal server error response has a 5xx status code
func (o *VerifyBesuVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this verify besu version internal server error response a status code equal to that given
func (o *VerifyBesuVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the verify besu version internal server error response
func (o *VerifyBesuVersionInternalServerError) Code() int {
	return 500
}

func (o *VerifyBesuVersionInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionInternalServerError %s", 500, payload)
}

func (o *VerifyBesuVersionInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/verify/besu][%d] verifyBesuVersionInternalServerError %s", 500, payload)
}

func (o *VerifyBesuVersionInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *VerifyBesuVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
