// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFabricNodesDefaultsParams creates a new GetFabricNodesDefaultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFabricNodesDefaultsParams() *GetFabricNodesDefaultsParams {
	return &GetFabricNodesDefaultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFabricNodesDefaultsParamsWithTimeout creates a new GetFabricNodesDefaultsParams object
// with the ability to set a timeout on a request.
func NewGetFabricNodesDefaultsParamsWithTimeout(timeout time.Duration) *GetFabricNodesDefaultsParams {
	return &GetFabricNodesDefaultsParams{
		timeout: timeout,
	}
}

// NewGetFabricNodesDefaultsParamsWithContext creates a new GetFabricNodesDefaultsParams object
// with the ability to set a context for a request.
func NewGetFabricNodesDefaultsParamsWithContext(ctx context.Context) *GetFabricNodesDefaultsParams {
	return &GetFabricNodesDefaultsParams{
		Context: ctx,
	}
}

// NewGetFabricNodesDefaultsParamsWithHTTPClient creates a new GetFabricNodesDefaultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFabricNodesDefaultsParamsWithHTTPClient(client *http.Client) *GetFabricNodesDefaultsParams {
	return &GetFabricNodesDefaultsParams{
		HTTPClient: client,
	}
}

/*
GetFabricNodesDefaultsParams contains all the parameters to send to the API endpoint

	for the get fabric nodes defaults operation.

	Typically these are written to a http.Request.
*/
type GetFabricNodesDefaultsParams struct {

	/* Mode.

	   Mode (service/docker)

	   Default: "service"
	*/
	Mode *string

	/* OrdererCount.

	   Number of orderer nodes

	   Default: 1
	*/
	OrdererCount *int64

	/* PeerCount.

	   Number of peer nodes

	   Default: 1
	*/
	PeerCount *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get fabric nodes defaults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFabricNodesDefaultsParams) WithDefaults() *GetFabricNodesDefaultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get fabric nodes defaults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFabricNodesDefaultsParams) SetDefaults() {
	var (
		modeDefault = string("service")

		ordererCountDefault = int64(1)

		peerCountDefault = int64(1)
	)

	val := GetFabricNodesDefaultsParams{
		Mode:         &modeDefault,
		OrdererCount: &ordererCountDefault,
		PeerCount:    &peerCountDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithTimeout(timeout time.Duration) *GetFabricNodesDefaultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithContext(ctx context.Context) *GetFabricNodesDefaultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithHTTPClient(client *http.Client) *GetFabricNodesDefaultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMode adds the mode to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithMode(mode *string) *GetFabricNodesDefaultsParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithOrdererCount adds the ordererCount to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithOrdererCount(ordererCount *int64) *GetFabricNodesDefaultsParams {
	o.SetOrdererCount(ordererCount)
	return o
}

// SetOrdererCount adds the ordererCount to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetOrdererCount(ordererCount *int64) {
	o.OrdererCount = ordererCount
}

// WithPeerCount adds the peerCount to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) WithPeerCount(peerCount *int64) *GetFabricNodesDefaultsParams {
	o.SetPeerCount(peerCount)
	return o
}

// SetPeerCount adds the peerCount to the get fabric nodes defaults params
func (o *GetFabricNodesDefaultsParams) SetPeerCount(peerCount *int64) {
	o.PeerCount = peerCount
}

// WriteToRequest writes these params to a swagger request
func (o *GetFabricNodesDefaultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Mode != nil {

		// query param mode
		var qrMode string

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}

	if o.OrdererCount != nil {

		// query param ordererCount
		var qrOrdererCount int64

		if o.OrdererCount != nil {
			qrOrdererCount = *o.OrdererCount
		}
		qOrdererCount := swag.FormatInt64(qrOrdererCount)
		if qOrdererCount != "" {

			if err := r.SetQueryParam("ordererCount", qOrdererCount); err != nil {
				return err
			}
		}
	}

	if o.PeerCount != nil {

		// query param peerCount
		var qrPeerCount int64

		if o.PeerCount != nil {
			qrPeerCount = *o.PeerCount
		}
		qPeerCount := swag.FormatInt64(qrPeerCount)
		if qPeerCount != "" {

			if err := r.SetQueryParam("peerCount", qPeerCount); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
