// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// StopNodeReader is a Reader for the StopNode structure.
type StopNodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopNodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewStopNodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopNodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopNodeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopNodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /nodes/{id}/stop] stopNode", response, response.Code())
	}
}

// NewStopNodeOK creates a StopNodeOK with default headers values
func NewStopNodeOK() *StopNodeOK {
	return &StopNodeOK{}
}

/*
StopNodeOK describes a response with status code 200, with default header values.

OK
*/
type StopNodeOK struct {
	Payload *models.HTTPNodeResponse
}

// IsSuccess returns true when this stop node o k response has a 2xx status code
func (o *StopNodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop node o k response has a 3xx status code
func (o *StopNodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop node o k response has a 4xx status code
func (o *StopNodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop node o k response has a 5xx status code
func (o *StopNodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop node o k response a status code equal to that given
func (o *StopNodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop node o k response
func (o *StopNodeOK) Code() int {
	return 200
}

func (o *StopNodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeOK %s", 200, payload)
}

func (o *StopNodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeOK %s", 200, payload)
}

func (o *StopNodeOK) GetPayload() *models.HTTPNodeResponse {
	return o.Payload
}

func (o *StopNodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPNodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopNodeBadRequest creates a StopNodeBadRequest with default headers values
func NewStopNodeBadRequest() *StopNodeBadRequest {
	return &StopNodeBadRequest{}
}

/*
StopNodeBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type StopNodeBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop node bad request response has a 2xx status code
func (o *StopNodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop node bad request response has a 3xx status code
func (o *StopNodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop node bad request response has a 4xx status code
func (o *StopNodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop node bad request response has a 5xx status code
func (o *StopNodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop node bad request response a status code equal to that given
func (o *StopNodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop node bad request response
func (o *StopNodeBadRequest) Code() int {
	return 400
}

func (o *StopNodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeBadRequest %s", 400, payload)
}

func (o *StopNodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeBadRequest %s", 400, payload)
}

func (o *StopNodeBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopNodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopNodeNotFound creates a StopNodeNotFound with default headers values
func NewStopNodeNotFound() *StopNodeNotFound {
	return &StopNodeNotFound{}
}

/*
StopNodeNotFound describes a response with status code 404, with default header values.

Node not found
*/
type StopNodeNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop node not found response has a 2xx status code
func (o *StopNodeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop node not found response has a 3xx status code
func (o *StopNodeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop node not found response has a 4xx status code
func (o *StopNodeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop node not found response has a 5xx status code
func (o *StopNodeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop node not found response a status code equal to that given
func (o *StopNodeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop node not found response
func (o *StopNodeNotFound) Code() int {
	return 404
}

func (o *StopNodeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeNotFound %s", 404, payload)
}

func (o *StopNodeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeNotFound %s", 404, payload)
}

func (o *StopNodeNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopNodeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewStopNodeInternalServerError creates a StopNodeInternalServerError with default headers values
func NewStopNodeInternalServerError() *StopNodeInternalServerError {
	return &StopNodeInternalServerError{}
}

/*
StopNodeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopNodeInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this stop node internal server error response has a 2xx status code
func (o *StopNodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop node internal server error response has a 3xx status code
func (o *StopNodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop node internal server error response has a 4xx status code
func (o *StopNodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop node internal server error response has a 5xx status code
func (o *StopNodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop node internal server error response a status code equal to that given
func (o *StopNodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop node internal server error response
func (o *StopNodeInternalServerError) Code() int {
	return 500
}

func (o *StopNodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeInternalServerError %s", 500, payload)
}

func (o *StopNodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/{id}/stop][%d] stopNodeInternalServerError %s", 500, payload)
}

func (o *StopNodeInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *StopNodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
