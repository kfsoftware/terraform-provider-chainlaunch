// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// GetNodesIDRPCQbftRequestTimeoutReader is a Reader for the GetNodesIDRPCQbftRequestTimeout structure.
type GetNodesIDRPCQbftRequestTimeoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNodesIDRPCQbftRequestTimeoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewGetNodesIDRPCQbftRequestTimeoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNodesIDRPCQbftRequestTimeoutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNodesIDRPCQbftRequestTimeoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNodesIDRPCQbftRequestTimeoutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /nodes/{id}/rpc/qbft-request-timeout] GetNodesIDRPCQbftRequestTimeout", response, response.Code())
	}
}

// NewGetNodesIDRPCQbftRequestTimeoutOK creates a GetNodesIDRPCQbftRequestTimeoutOK with default headers values
func NewGetNodesIDRPCQbftRequestTimeoutOK() *GetNodesIDRPCQbftRequestTimeoutOK {
	return &GetNodesIDRPCQbftRequestTimeoutOK{}
}

/*
GetNodesIDRPCQbftRequestTimeoutOK describes a response with status code 200, with default header values.

Request timeout in seconds
*/
type GetNodesIDRPCQbftRequestTimeoutOK struct {
	Payload string
}

// IsSuccess returns true when this get nodes Id Rpc qbft request timeout o k response has a 2xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get nodes Id Rpc qbft request timeout o k response has a 3xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft request timeout o k response has a 4xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc qbft request timeout o k response has a 5xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft request timeout o k response a status code equal to that given
func (o *GetNodesIDRPCQbftRequestTimeoutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get nodes Id Rpc qbft request timeout o k response
func (o *GetNodesIDRPCQbftRequestTimeoutOK) Code() int {
	return 200
}

func (o *GetNodesIDRPCQbftRequestTimeoutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutOK %s", 200, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutOK %s", 200, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutOK) GetPayload() string {
	return o.Payload
}

func (o *GetNodesIDRPCQbftRequestTimeoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftRequestTimeoutBadRequest creates a GetNodesIDRPCQbftRequestTimeoutBadRequest with default headers values
func NewGetNodesIDRPCQbftRequestTimeoutBadRequest() *GetNodesIDRPCQbftRequestTimeoutBadRequest {
	return &GetNodesIDRPCQbftRequestTimeoutBadRequest{}
}

/*
GetNodesIDRPCQbftRequestTimeoutBadRequest describes a response with status code 400, with default header values.

Validation error
*/
type GetNodesIDRPCQbftRequestTimeoutBadRequest struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft request timeout bad request response has a 2xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft request timeout bad request response has a 3xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft request timeout bad request response has a 4xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc qbft request timeout bad request response has a 5xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft request timeout bad request response a status code equal to that given
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get nodes Id Rpc qbft request timeout bad request response
func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) Code() int {
	return 400
}

func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutBadRequest %s", 400, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftRequestTimeoutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftRequestTimeoutNotFound creates a GetNodesIDRPCQbftRequestTimeoutNotFound with default headers values
func NewGetNodesIDRPCQbftRequestTimeoutNotFound() *GetNodesIDRPCQbftRequestTimeoutNotFound {
	return &GetNodesIDRPCQbftRequestTimeoutNotFound{}
}

/*
GetNodesIDRPCQbftRequestTimeoutNotFound describes a response with status code 404, with default header values.

Node not found
*/
type GetNodesIDRPCQbftRequestTimeoutNotFound struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft request timeout not found response has a 2xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft request timeout not found response has a 3xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft request timeout not found response has a 4xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get nodes Id Rpc qbft request timeout not found response has a 5xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get nodes Id Rpc qbft request timeout not found response a status code equal to that given
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get nodes Id Rpc qbft request timeout not found response
func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) Code() int {
	return 404
}

func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutNotFound %s", 404, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftRequestTimeoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewGetNodesIDRPCQbftRequestTimeoutInternalServerError creates a GetNodesIDRPCQbftRequestTimeoutInternalServerError with default headers values
func NewGetNodesIDRPCQbftRequestTimeoutInternalServerError() *GetNodesIDRPCQbftRequestTimeoutInternalServerError {
	return &GetNodesIDRPCQbftRequestTimeoutInternalServerError{}
}

/*
GetNodesIDRPCQbftRequestTimeoutInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetNodesIDRPCQbftRequestTimeoutInternalServerError struct {
	Payload *models.ResponseErrorResponse
}

// IsSuccess returns true when this get nodes Id Rpc qbft request timeout internal server error response has a 2xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get nodes Id Rpc qbft request timeout internal server error response has a 3xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get nodes Id Rpc qbft request timeout internal server error response has a 4xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get nodes Id Rpc qbft request timeout internal server error response has a 5xx status code
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get nodes Id Rpc qbft request timeout internal server error response a status code equal to that given
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get nodes Id Rpc qbft request timeout internal server error response
func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) Code() int {
	return 500
}

func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /nodes/{id}/rpc/qbft-request-timeout][%d] getNodesIdRpcQbftRequestTimeoutInternalServerError %s", 500, payload)
}

func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) GetPayload() *models.ResponseErrorResponse {
	return o.Payload
}

func (o *GetNodesIDRPCQbftRequestTimeoutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
