// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// LoginUserReader is a Reader for the LoginUser structure.
type LoginUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoginUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLoginUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLoginUserMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/login] loginUser", response, response.Code())
	}
}

// NewLoginUserOK creates a LoginUserOK with default headers values
func NewLoginUserOK() *LoginUserOK {
	return &LoginUserOK{}
}

/*
LoginUserOK describes a response with status code 200, with default header values.

Login successful
*/
type LoginUserOK struct {
	Payload *models.AuthLoginResponse
}

// IsSuccess returns true when this login user o k response has a 2xx status code
func (o *LoginUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login user o k response has a 3xx status code
func (o *LoginUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user o k response has a 4xx status code
func (o *LoginUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login user o k response has a 5xx status code
func (o *LoginUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login user o k response a status code equal to that given
func (o *LoginUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login user o k response
func (o *LoginUserOK) Code() int {
	return 200
}

func (o *LoginUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserOK %s", 200, payload)
}

func (o *LoginUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserOK %s", 200, payload)
}

func (o *LoginUserOK) GetPayload() *models.AuthLoginResponse {
	return o.Payload
}

func (o *LoginUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthLoginResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewLoginUserBadRequest creates a LoginUserBadRequest with default headers values
func NewLoginUserBadRequest() *LoginUserBadRequest {
	return &LoginUserBadRequest{}
}

/*
LoginUserBadRequest describes a response with status code 400, with default header values.

Invalid request body
*/
type LoginUserBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this login user bad request response has a 2xx status code
func (o *LoginUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user bad request response has a 3xx status code
func (o *LoginUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user bad request response has a 4xx status code
func (o *LoginUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user bad request response has a 5xx status code
func (o *LoginUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this login user bad request response a status code equal to that given
func (o *LoginUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the login user bad request response
func (o *LoginUserBadRequest) Code() int {
	return 400
}

func (o *LoginUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserBadRequest %s", 400, payload)
}

func (o *LoginUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserBadRequest %s", 400, payload)
}

func (o *LoginUserBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *LoginUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewLoginUserUnauthorized creates a LoginUserUnauthorized with default headers values
func NewLoginUserUnauthorized() *LoginUserUnauthorized {
	return &LoginUserUnauthorized{}
}

/*
LoginUserUnauthorized describes a response with status code 401, with default header values.

Invalid credentials
*/
type LoginUserUnauthorized struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this login user unauthorized response has a 2xx status code
func (o *LoginUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user unauthorized response has a 3xx status code
func (o *LoginUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user unauthorized response has a 4xx status code
func (o *LoginUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user unauthorized response has a 5xx status code
func (o *LoginUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login user unauthorized response a status code equal to that given
func (o *LoginUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login user unauthorized response
func (o *LoginUserUnauthorized) Code() int {
	return 401
}

func (o *LoginUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserUnauthorized %s", 401, payload)
}

func (o *LoginUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserUnauthorized %s", 401, payload)
}

func (o *LoginUserUnauthorized) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *LoginUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewLoginUserMethodNotAllowed creates a LoginUserMethodNotAllowed with default headers values
func NewLoginUserMethodNotAllowed() *LoginUserMethodNotAllowed {
	return &LoginUserMethodNotAllowed{}
}

/*
LoginUserMethodNotAllowed describes a response with status code 405, with default header values.

Method not allowed
*/
type LoginUserMethodNotAllowed struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this login user method not allowed response has a 2xx status code
func (o *LoginUserMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login user method not allowed response has a 3xx status code
func (o *LoginUserMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login user method not allowed response has a 4xx status code
func (o *LoginUserMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this login user method not allowed response has a 5xx status code
func (o *LoginUserMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this login user method not allowed response a status code equal to that given
func (o *LoginUserMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the login user method not allowed response
func (o *LoginUserMethodNotAllowed) Code() int {
	return 405
}

func (o *LoginUserMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserMethodNotAllowed %s", 405, payload)
}

func (o *LoginUserMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/login][%d] loginUserMethodNotAllowed %s", 405, payload)
}

func (o *LoginUserMethodNotAllowed) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *LoginUserMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
