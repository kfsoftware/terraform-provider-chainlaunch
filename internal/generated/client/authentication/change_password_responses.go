// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewChangePasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChangePasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/change-password] changePassword", response, response.Code())
	}
}

// NewChangePasswordOK creates a ChangePasswordOK with default headers values
func NewChangePasswordOK() *ChangePasswordOK {
	return &ChangePasswordOK{}
}

/*
ChangePasswordOK describes a response with status code 200, with default header values.

Password changed successfully
*/
type ChangePasswordOK struct {
	Payload map[string]string
}

// IsSuccess returns true when this change password o k response has a 2xx status code
func (o *ChangePasswordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this change password o k response has a 3xx status code
func (o *ChangePasswordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password o k response has a 4xx status code
func (o *ChangePasswordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this change password o k response has a 5xx status code
func (o *ChangePasswordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this change password o k response a status code equal to that given
func (o *ChangePasswordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the change password o k response
func (o *ChangePasswordOK) Code() int {
	return 200
}

func (o *ChangePasswordOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordOK %s", 200, payload)
}

func (o *ChangePasswordOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordOK %s", 200, payload)
}

func (o *ChangePasswordOK) GetPayload() map[string]string {
	return o.Payload
}

func (o *ChangePasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/*
ChangePasswordBadRequest describes a response with status code 400, with default header values.

Invalid request body
*/
type ChangePasswordBadRequest struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this change password bad request response has a 2xx status code
func (o *ChangePasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password bad request response has a 3xx status code
func (o *ChangePasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password bad request response has a 4xx status code
func (o *ChangePasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password bad request response has a 5xx status code
func (o *ChangePasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this change password bad request response a status code equal to that given
func (o *ChangePasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the change password bad request response
func (o *ChangePasswordBadRequest) Code() int {
	return 400
}

func (o *ChangePasswordBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordBadRequest %s", 400, payload)
}

func (o *ChangePasswordBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordBadRequest %s", 400, payload)
}

func (o *ChangePasswordBadRequest) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewChangePasswordUnauthorized creates a ChangePasswordUnauthorized with default headers values
func NewChangePasswordUnauthorized() *ChangePasswordUnauthorized {
	return &ChangePasswordUnauthorized{}
}

/*
ChangePasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ChangePasswordUnauthorized struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this change password unauthorized response has a 2xx status code
func (o *ChangePasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password unauthorized response has a 3xx status code
func (o *ChangePasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password unauthorized response has a 4xx status code
func (o *ChangePasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password unauthorized response has a 5xx status code
func (o *ChangePasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this change password unauthorized response a status code equal to that given
func (o *ChangePasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the change password unauthorized response
func (o *ChangePasswordUnauthorized) Code() int {
	return 401
}

func (o *ChangePasswordUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordUnauthorized %s", 401, payload)
}

func (o *ChangePasswordUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordUnauthorized %s", 401, payload)
}

func (o *ChangePasswordUnauthorized) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ChangePasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewChangePasswordForbidden creates a ChangePasswordForbidden with default headers values
func NewChangePasswordForbidden() *ChangePasswordForbidden {
	return &ChangePasswordForbidden{}
}

/*
ChangePasswordForbidden describes a response with status code 403, with default header values.

Invalid current password
*/
type ChangePasswordForbidden struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this change password forbidden response has a 2xx status code
func (o *ChangePasswordForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password forbidden response has a 3xx status code
func (o *ChangePasswordForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password forbidden response has a 4xx status code
func (o *ChangePasswordForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password forbidden response has a 5xx status code
func (o *ChangePasswordForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this change password forbidden response a status code equal to that given
func (o *ChangePasswordForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the change password forbidden response
func (o *ChangePasswordForbidden) Code() int {
	return 403
}

func (o *ChangePasswordForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordForbidden %s", 403, payload)
}

func (o *ChangePasswordForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/change-password][%d] changePasswordForbidden %s", 403, payload)
}

func (o *ChangePasswordForbidden) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *ChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
