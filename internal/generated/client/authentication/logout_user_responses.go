// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chainlaunch/terraform-provider-chainlaunch/internal/generated/models"
)

// LogoutUserReader is a Reader for the LogoutUser structure.
type LogoutUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogoutUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewLogoutUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 405:
		result := NewLogoutUserMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/logout] logoutUser", response, response.Code())
	}
}

// NewLogoutUserOK creates a LogoutUserOK with default headers values
func NewLogoutUserOK() *LogoutUserOK {
	return &LogoutUserOK{}
}

/*
LogoutUserOK describes a response with status code 200, with default header values.

Logout successful
*/
type LogoutUserOK struct {
	Payload *models.AuthLogoutResponse
}

// IsSuccess returns true when this logout user o k response has a 2xx status code
func (o *LogoutUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this logout user o k response has a 3xx status code
func (o *LogoutUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout user o k response has a 4xx status code
func (o *LogoutUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this logout user o k response has a 5xx status code
func (o *LogoutUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this logout user o k response a status code equal to that given
func (o *LogoutUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the logout user o k response
func (o *LogoutUserOK) Code() int {
	return 200
}

func (o *LogoutUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/logout][%d] logoutUserOK %s", 200, payload)
}

func (o *LogoutUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/logout][%d] logoutUserOK %s", 200, payload)
}

func (o *LogoutUserOK) GetPayload() *models.AuthLogoutResponse {
	return o.Payload
}

func (o *LogoutUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthLogoutResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewLogoutUserMethodNotAllowed creates a LogoutUserMethodNotAllowed with default headers values
func NewLogoutUserMethodNotAllowed() *LogoutUserMethodNotAllowed {
	return &LogoutUserMethodNotAllowed{}
}

/*
LogoutUserMethodNotAllowed describes a response with status code 405, with default header values.

Method not allowed
*/
type LogoutUserMethodNotAllowed struct {
	Payload *models.ResponseResponse
}

// IsSuccess returns true when this logout user method not allowed response has a 2xx status code
func (o *LogoutUserMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this logout user method not allowed response has a 3xx status code
func (o *LogoutUserMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout user method not allowed response has a 4xx status code
func (o *LogoutUserMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this logout user method not allowed response has a 5xx status code
func (o *LogoutUserMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this logout user method not allowed response a status code equal to that given
func (o *LogoutUserMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the logout user method not allowed response
func (o *LogoutUserMethodNotAllowed) Code() int {
	return 405
}

func (o *LogoutUserMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/logout][%d] logoutUserMethodNotAllowed %s", 405, payload)
}

func (o *LogoutUserMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/logout][%d] logoutUserMethodNotAllowed %s", 405, payload)
}

func (o *LogoutUserMethodNotAllowed) GetPayload() *models.ResponseResponse {
	return o.Payload
}

func (o *LogoutUserMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
